{"version":3,"sources":["webpack:///./src/entry.js","webpack:///./~/font-awesome/css/font-awesome.css","webpack:///./src/hivtrace.css","webpack:///./src/hivtrace.js","webpack:///./~/bootstrap/dist/css/bootstrap.css","webpack:///./src/clusternetwork.js","webpack:///./src/misc.js","webpack:///./src/helpers.js","webpack:///./~/downloadjs/download.js","webpack:///./src/scatterplot.js","webpack:///./src/histogram.js"],"names":["window","require","hivtrace","misc","helpers","module","d3","_","scatterPlot","_networkGraphAttrbuteID","_networkNodeAttributeID","_networkMissing","_networkMissingOpacity","_networkMissingColor","_networkContinuousColorStops","_networkShapeOrdering","_defaultFloatFormat","_defaultPercentFormat","_defaultDateFormats","_defaultDateViewFormat","_defaultDateViewFormatShort","_defaultDateViewFormatSlider","_networkDotFormatPadder","_networkCategoricalBase","_networkCategorical","_maximumValuesInCategories","_networkSequentialColor","_networkPresetColorSchemes","trans_categ","Missing","Perinatal","race","Asian","missing","White","_networkPresetShapeSchemes","birth_sex","Male","Female","Unknown","current_gender","mapWidth","mapHeight","mapProjection","countryCentersArray","countryCentersObject","i","data","countryCode","countryLat","countryLong","countryXY","hivtrace_cluster_depthwise_traversal","clusters","adjacency","by_node","n","edges","nodes","e","console","traverse","node","save_edges","neighbor","_networkUpperBoundOnDate","_networkCDCDateField","hivtrace_cluster_network_graph","json","self","options","cdc_extra","description","value","sort","c","help","generator","html","cluster","format","v","str","callback","this_cell","data_to_use","payload","buttons","button_text","button_obj","selected","d","id","shaper","top","right","bottom","left","size","filter","date","subcluster_enum","_n_months_ago","depends","label","enum","type","volatile","color_scale","map","binned_vl_recent_value","vl_value","recent_rapid","subcluster_index","age_dx","hiv_aids_dx_dt_year","range_without_missing","attr","parsed_value","passed","f","handle_cluster_click","container","menu_object","already_fixed","center_cluster_handler","release","export_items","network","color","attr_desc","base_line","font_size","rect_size","width","height","colorizer","prefix","drag","x","y","$","additional_options","filtered_json","_extract_single_cluster","custom_filter","jQuery","extra_menu","title","items","custom_name","random_id","s","letters","random_prefix","random_tab_id","random_content_id","random_button_bar","tab_container","content_container","go_here_when_closed","new_tab_header","new_link","new_tab_content","option_extras","new_button_bar","cluster_options","no_cdc","secondary","cluster_view","countries","topojson","mapsvg","path","not_nested","handle_node_click","collapse_cluster_handler","mapped_clusters","get_all_clusters","d_clusters","children","cluster_id","treemap","Math","b","a","graphMe","expandedClusters","drawnNodes","hxb2_exists","extra_menu_items","enclosure","item","set_date","field_def","selector","past_date","past_months","diff_year","months","left_over","start_date","filter_by_date","node_dx","cutoff_long","cutoff_short","node_iterator","beginning_of_time","oldest_nodes_first","node1_dx","node2_dx","n1","n2","split_clusters","node_id_to_local_cluster","Nodes","Edges","edge","edge_cluster","source_id","target_id","copied_edge","array_index","subclusters","cluster_nodes","cc","es","c1","c2","parent_cluster","distances","_compute_cluster_degrees","subcluster_json","sub","rr_cluster","priority_nodes","recent_cluster","init_layout","get_initial_xy","coordinate_update","set_init_coords","network_layout","x_scale","delta","y_scale","rescale_x","rescale_y","neighborhood_size","a_node","neighborhood","counter","worker","event","node_to_update","worker_obj","estimate_cubic_compute_cost","memo","cluster_size","a_cluster","member_nodes","triads","triangles","my_neighbors","connected_links","total","graph_data","result","allowed_types","String","Date","Number","string_id","the_list","column_ids","binned","column","sorted_keys","attribute_record","attribute_list","patient_record","patient_list","group_by_id","button_clicked","link_clicked","modal","cluster_ui_container","fix_handler","obj","layout_reset_handler","fixed","default_layout","cluster_commands","handler_callback","button_group","change_spacing","change_window_size","filter_value","distance_threshold","parseFloat","render_binned_table","attributes","singletons","compute_node_degrees","extra_ui_container","valid_cats","valid_shapes","valid_scales","low_var","bins","scl","mean","values","vrnc","p","determine_scaling","a_date","inject_attribute_node_value_by_id","m","menu_items","_menu_label_gen","cat_menu","j","the_cluster","compute_cluster_gradient","attribute_map","index","range","computed","extension","sorted_array","k","warning_string","sorted_state","sort_table_toggle_icon","table_element","sort_on","parseInt","sort_key","datum","sorted_function","sort_accessor","val","this_sel","current_value","repr","clicker","sort_table_by_column","thead","format_a_cell","tbody","_is_subcluster","labels","expand_cluster","collapse_cluster","cluster_json","map_to_id","given_json","ne","node_list","headers","rows","this_row","ed","add_a_sortable_table","element","make_row","_cluster_table_draw_id","actual_cluster","is_subcluster","length","clusters_shown","clusters_removed","nodes_removed","clusters_selected","nodes_selected","symbol_type","node_size","node_color","node_opacity","container_group","draw_from","sums","running_totals","startAngle","endAngle","name","rim","arc_radius","cluster_box_size","paths","cluster_color","cat_id","domain","set_attr","lbl","domain_range","check_for_predefined_shapes","shape_mapper","offset","anchor_format","scale","gradient","finite","infinite","render_chord_diagram","func","points","src","tgt","stratify","attribute_cluster_distribution","extended_range","arg","attribute_pairwise_distribution","anything_changed","conditions","did_match","regexp","warning_box","pull","dist_x","dist_y","theta","alpha","dx","dx2","dy","dy2","s1","s2","draw_me","update_network_string","edge_set","tag","step","link","rendered_nodes","rendered_clusters","draw_a_node","draw_a_cluster","currently_displayed_objects","sizes","xBoundLower","xBoundUpper","yBoundLower","yBoundUpper","allowed_offset_from_center_of_country","center","new_attr","r","key","attribute","toggle_tooltip","node_info_string","edge_info_string","by_cluster","cls","idx","open_cluster_queue","compute_cluster_centroids","the_table","matrix","fill","lookup","the_map","sum","text_label","t","svg","chord","text_offset","innerRadius","outerRadius","fade","scan_from","only_expanded","the_matrix","haz_null","dim","d2","string_hash","hash","ci","charCode","hashed","available_keys","reindexed","first_try","second_try","last_resort","attribute_id","attr_info","cluster_info_string","new_nodes","leftover","sequences","degrees","use_these_nodes","node_filter","series","time","subset","condition","dict","stratified","array","annotation","edge_types_dict","existing_nodes","nodes_and_attributes","injected_nodes","node_attributes","index_id","attribute_definition","existing_network_nodes","node_name_2_id","attribute_key","handle_node_attributes","new_node","node_class","node_annotation","degree","new_edge","source","target","edge_type","directed","JSON","edge_types_by_cluster","edge_clusters","edge_types_by_cluster_sorted","my_keys","edge_types","_edge_colorizer","injected_column","other_clusters","labeled_links","shown_types","init_code","def_color","caption","types","checkbox","edge_class","cluster_report","edge_filter","recomputed_clusters","cluster_ids","injected_count","cluster_count","existing_cluster","turn_on","this_box","this_data","l_scale","max_points_to_render","gravity_scale","legend_vertical_offset","initial_json_load","hivtrace_cluster_graph_summary","summary_table","table_data","graph","columns","adjacency_list","seq_ids","in_nodes","hivtrace_generate_svg_polygon_lookup","angle_step","hivtrace_generate_svg_ellipse","hivtrace_generate_svg_polygon","current_angle","all_paths","next","intermediate","paths_i_k","hivtrace_get_path","paths_k_j","i_k_index","i_k","k_j_index","k_j","sublist","num_nodes","node_ids","hivtrace_cluster_adjacency_list","Object","node_count","empty_arr","zeroes","index2","second_node","index_i","n_i","index_j","n_j","distances2","index_k","n_k","d_ik","d_jk","d_ij","ordering","node_obj","nodes_in_cluster","edges_in_cluster","filtered_obj","cb","hivtrace_compute_shortest_paths_with_reconstruction","betweenness","hivtrace_compute_betweenness_centrality","hivtrace_filter_to_node_in_cluster","paths_with_node","hivtrace_paths_with_node","unique_clusters","cb_count","hivtrace_get_node_by_id","results","hivtrace_betweenness_centrality_all_nodes_in_cluster","hivtrace_compute_node_degrees","hivtrace_compute_cluster_betweenness","node_array","hivtrace_is_contaminant","node_csv","pom","document","encodeURIComponent","the_button","table_tag","table_text","hivtrace_compute_local_clustering_coefficients","hivtrace_new_cluster_adjacency_list","formatter","skip_cumulative","bin_by","year","nearest_quarter","mid_point","quarter","xAxis","yAxis","values_by_attribute","total_id","total_color","max_bin","bin_tag","point","binned_array","min_x","max_x","time_series","legend_area","y_key","plot_types","legend_lines","on_off","opacity_toggle","last","plot_color","y_accessor","plot_key","bin_accessor","curve","curve_year","x_axis","download","datamonkey_error_modal","img","canvas","ctx","blob","onsuccess","datamonkey_export_csv_button","datamonkey_save_image","xmlns","xlink","ss","rule","process_stylesheet","styles","styleSheets","doc","convert_svg_to_png","image","context","get_styles","defsEl","styleEl","rect","doctype","to_download","image_string","navigator","b64toBlob","url","datamonkey_validate_date","class","text","isNaN","processStyleSheet","top_modal_container","nwk","tree_container","datamonkey_get_styles","datamonkey_convert_svg_to_png","regex","span","vector","min","max","median","Q1","Q3","ua","msie","IEwindow","filename","mimeType","sep","header_row","table_id","data_rows","accessor","predicate","transform","margin","w","h","dates","histogram_svg","y_axis","defaultFloatFormat","histogram_w","histogram_h","hivtrace_render_histogram","edge_lengths","hivtrace_render_histogram_continuous","histogram_data","histogram_line","counts","data_to_plot","fit_line","exports"],"mappings":";;;;;;;;;;;;;;;AAAAA,iBAAgBA,WAAhBA;;AAEA,oBAAAC,CAAA,CAAAA;AACA,oBAAAA,CAAA,EAAAA;AACA,oBAAAA,CAAA,EAAAA;;AAEA,KAAIC,WAAW,mBAAAD,CAAf,EAAeA,CAAf;;AAEA;AACAD,4B;;;;;;;;ACTA,0C;;;;;;;ACAA,0C;;;;;;;;;;;;;ACCA;;AACA;;AACA;;;;AAEA,KAAIG,OAAO,mBAAAF,CAAX,EAAWA,CAAX;AACA,KAAIG,UAAU,mBAAAH,CAAd,EAAcA,CAAd;;AAEAI;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,uD;;;;;;;ACdA,0C;;;;;;;;;ACAA,KAAIC,KAAK,mBAAAL,CAAT,EAASA,CAAT;AAAA,KACEM,IAAI,mBAAAN,CADN,EACMA,CADN;AAAA,KAEEE,OAAO,mBAAAF,CAFT,EAESA,CAFT;AAAA,KAGEG,UAAU,mBAAAH,CAHZ,EAGYA,CAHZ;AAAA,KAIEO,cAAc,mBAAAP,CAJhB,EAIgBA,CAJhB;;AAMA,KAAIQ,0BAAJ;AACA,KAAIC,0BAAJ;AACA,KAAIC,kBAAJ;AACA,KAAIC,yBAAJ;AACA,KAAIC,uBAAJ;AACA,KAAIC,+BAAJ;AACA,KAAIC,wBAAwB,0EAA5B,UAA4B,CAA5B;AAUA,KAAIC,sBAAsBV,UAA1B,MAA0BA,CAA1B;AACA,KAAIW,wBAAwBX,UAA5B,MAA4BA,CAA5B;AACA,KAAIY,sBAAsB,CACxBZ,eADwB,uBACxBA,CADwB,EAExBA,eAFF,uBAEEA,CAFwB,CAA1B;AAIA,KAAIa,yBAAyBb,eAA7B,WAA6BA,CAA7B;AACA,KAAIc,8BAA8Bd,eAAlC,OAAkCA,CAAlC;AACA,KAAIe,+BAA+Bf,eAAnC,UAAmCA,CAAnC;AACA,KAAIgB,0BAA0BhB,UAA9B,KAA8BA,CAA9B;;AAEA,KAAIiB,0BAA0B,0HAA9B,SAA8B,CAA9B;;AAeA,KAAIC,sBAAJ;;AAEAjB,QAAO,IAAI,CAAJ,KAAPA,GAAO,CAAPA,EAAuB,aAAY;AACjCA,mCAAgC,aAAY;AAC1CiB,8BAAyBlB,oBAAzBkB,QAAyBlB,EAAzBkB;AADFjB;AADFA;;AAMA,KAAIkB,6BAA6BD,oBAAjC;;AAEA,KAAIE,0BAA0B;AAC5B,MAAG,YADyB,SACzB,CADyB;AAE5B,MAAG,uBAFyB,SAEzB,CAFyB;AAG5B,MAAG,kCAHyB,SAGzB,CAHyB;AAI5B,MAAG,6CAJyB,SAIzB,CAJyB;AAK5B,MAAG,wDALyB,SAKzB,CALyB;AAM5B,MAAG,mEANyB,SAMzB,CANyB;AAe5B,MAAG,8EAfyB,SAezB,CAfyB;AAyB5B,MAAG;AAzByB,EAA9B;;AAsCA,KAAIC,6BAA6B;AAC/BC,gBAAa;AACX,iBADW;AAEX,wBAFW;AAGX,kCAHW;AAIX,oCAJW;AAKX,yCALW;AAMX,iBANW;AAOX,uBAPW;AAQX,mBARW;AASX,wBATW;AAUX,2BAVW;AAWX,6BAXW;AAYX,mBAZW;AAaX,qBAbW;AAcXC,cAdW;AAeX,SAfW;AAgBX,kCAhBW;AAiBXC,gBAjBW;AAkBX,4BAlBW;AAmBX,oBAAe;AAnBJ,IADkB;AAsB/BC,SAAM;AACJC,YADI;AAEJ,+BAFI;AAGJ,wBAHI;AAIJ,sCAJI;AAKJ,+CALI;AAMJ,uBANI;AAOJ,qBAPI;AAQJH,cARI;AASJI,cATI;AAUJC,YAAO;AAVH;AAtByB,EAAjC;;AAoCA,KAAIC,6BAA6B;AAC/BC,cAAW;AACTC,WADS;AAETC,aAFS;AAGTT,cAHS;AAITI,cAJS;AAKTM,cAAS;AALA,IADoB;AAQ/BR,SAAM;AACJC,YADI;AAEJ,+BAFI;AAGJ,wBAHI;AAIJ,sCAJI;AAKJ,+CALI;AAMJ,uBANI;AAOJ,qBAPI;AAQJH,cARI;AASJI,cATI;AAUJC,YAAO;AAVH,IARyB;AAoB/BM,mBAAgB;AACdH,WADc;AAEdC,aAFc;AAGd,mCAHc;AAId,mCAJc;AAKd,mCALc;AAMdC,cANc;AAOdV,cAPc;AAQdI,cAAS;AARK;AApBe,EAAjC;;AAgCA;AACA,KAAMQ,WAAN;AACA,KAAMC,YAAN;AACA,KAAMC,gBAAgBrC,4BACT,CAACmC,WAAD,GAAaC,YADJpC,CACT,CADSA,QAAtB,GAAsBA,CAAtB;;AAIA;AACA,KAAIsC,sBAAJ;AACA,KAAIC,uBAAJ;AACCvC,oCAAmC,gBAAe;AACjD,QAAK,IAAIwC,IAAT,GAAcA,IAAIC,KAAlB,aAAoC;AAClC,SAAIC,cAAcD,QAAlB,cAAkBA,CAAlB;AACA,SAAIE,aAAaF,QAAjB,oBAAiBA,CAAjB;AACA,SAAIG,cAAcH,QAAlB,qBAAkBA,CAAlB;AACA,SAAII,YAAYR,cAAc,cAA9B,UAA8B,CAAdA,CAAhB;AACAE,yCAAoC,EAAC,KAAKM,UAAN,CAAMA,CAAN,EAAoB,KAAKA,UAA7DN,CAA6DM,CAAzB,EAApCN;AACD;AAPFvC;;AAUD,KAAI8C,uCAAuC,SAAvCA,oCAAuC,wCAKzC;AACA,OAAIC,WAAJ;AAAA,OACEC,YADF;AAAA,OAEEC,UAFF;;AAIAhD,iBAAc,aAAY;AACxBiD;AACAF,eAAUE,EAAVF;AAFF/C;;AAKA,oBAAiB;AACfkD,aAAQlD,gBAARkD,WAAQlD,CAARkD;AACD;;AAEDlD,iBAAc,aAAY;AACxB,SAAI;AACF+C,iBAAUI,MAAMC,EAAND,QAAVJ,SAAmC,CAACI,MAAMC,EAAP,MAACD,CAAD,EAAnCJ,CAAmC,CAAnCA;AACAA,iBAAUI,MAAMC,EAAND,QAAVJ,SAAmC,CAACI,MAAMC,EAAP,MAACD,CAAD,EAAnCJ,CAAmC,CAAnCA;AAFF,OAGE,YAAY;AACZM,mBACE,2CAA2CD,EAA3C,kBAA+DA,EADjEC;AAGA,aAAM,2CACJD,EADI,kBAGJA,EAHF;AAID;AAZHpD;;AAeA,OAAIsD,WAAW,SAAXA,QAAW,OAAe;AAC5B,SAAI,EAAEC,WAAN,OAAI,CAAJ,EAA2B;AACzBT,qBAAc,CAAdA,IAAc,CAAdA;AACAE,eAAQO,KAARP,MAAmBF,kBAAnBE;AACA,uBAAgB;AACdQ;AACD;AACF;AACDD;;AAEAvD,YAAO+C,UAAUQ,KAAjBvD,EAAO+C,CAAP/C,EAA2B,oBAAmB;AAC5C,WAAI,CAACyD,YAAL,SAA0B;AACxBT,iBAAQS,YAART,MAA0BA,QAAQO,KAAlCP,EAA0BA,CAA1BA;AACAF,kBAASE,QAAQS,YAAjBX,EAASE,CAATF,OAAuCW,SAAvCX,CAAuCW,CAAvCX;AACA,yBAAgB;AACdU,sBAAWR,QAAQS,YAAnBD,EAAWR,CAAXQ,OAAyCC,SAAzCD,CAAyCC,CAAzCD;AACD;AACDF,kBAASG,SAATH,CAASG,CAATH;AACD;AARHtD;AAVF;;AAsBAA,iBAAc,aAAY;AACxB,SAAI,CAACiD,EAAL,SAAgB;AACdK;AACD;AAHHtD;;AAMA;AA9DF;;AAiEA,KAAI0D,2BAA2B,WAA/B,WAA+B,EAA/B;AACA,KAAIC,uBAAJ;;AAEA,KAAIC,iCAAiC,SAAjCA,8BAAiC,8KAYnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAI,CAACC,KAAL,uBAAKA,CAAL,EAAoC;AAClCA;AACD;;AAED,OAAIC,OAAJ;;AAEAA,mBAAgBC,WAAWA,QAAXA,QAAWA,CAAXA,WAAhBD;AACAA,aACEC,WAAWA,QAAXA,OAAWA,CAAXA,GACIA,QADJA,OACIA,CADJA,GAEIhE,qCAHN+D,aAGM/D,CAHN+D;AAIAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,yBAAsBC,0BAAtBD;;AAEA,OAAIC,WAAW/D,aAAa+D,QAA5B,WAA4BA,CAAb/D,CAAf,EAAmD;AACjD+D;AACD;AACDD,qBACEC,WAAWA,QAAXA,QAAWA,CAAXA,GAA+BA,QAA/BA,QAA+BA,CAA/BA,GADFD;AAEAA,sCACEC,WAAWA,QAAXA,uBAAWA,CAAXA,GACIA,QADJA,uBACIA,CADJA,GADFD;AAIAA;;AAEA,OAAIA,KAAJ,UAAmB;AACjBA,6BACEC,WAAWA,QAAXA,kBAAWA,CAAXA,GACIhE,UAAUgE,QADdA,kBACcA,CAAVhE,CADJgE,GADFD;AAIAA;AACA,SAAIE,YAAY,CACd;AACEC,oBAAa;AACXC,gBADW;AAEXC,eAAM,iBAAY;AAChB,kBAAOC,iBAAiBA,QAAjBA,CAAiBA,CAAjBA,GAAP;AAHS;AAKXC,eAAM;AALK,QADf;AAQEC,kBAAW,4BAAkB;AAC3B,gBAAO;AACLC,iBADK;AAELL,kBAAOM,QAFF;AAGLC,mBAAQ,mBAAY;AAClB,iBAAIC,EAAJ,QAAc;AACZ,sBAAOA,OAAP,IAAOA,CAAP;AADF,oBAEO;AACL;AACD;AACF;AATI,UAAP;AAWD;AApBH,MADc,EAuBd;AACET,oBAAa;AACXC,gBADW;AAEXC,eAFW;AAGXE,eACE;AAJS,QADf;AAOEC,kBAAW,4BAAkB;AAC3B,gBAAO;AACLC,iBADK;AAELL,kBAAOM,QAFF;AAGLC,mBAAQ,mBAAY;AAClB,iBAAIC,EAAJ,QAAc;AACZ,mBAAIC,MAAMD,OAAV,IAAUA,CAAV;AACA,mBAAIA,QAAJ,GAAe;AACb,wBACE,mCADF;AAKD;AACD;AACD;AACD;AACD;AAhBI,UAAP;AAkBD;AA1BH,MAvBc,CAAhB;;AAqDA,SAAIZ,KAAJ,kBAA2B;AACzBA;AADF,YAEO;AACL,WAAIA,KAAJ,6BAAsC;AACpCA,4CAAmCA,wCAAnCA,SAAmCA,CAAnCA;AADF,cAIO;AACLA;AACD;AACF;AACF;;AAEDA,mCACEC,WAAWA,QAAXA,oBAAWA,CAAXA,GACIA,QADJA,oBACIA,CADJA,GAEI,gBACE,CACE;AACEE,kBAAa;AACXC,cADW;AAEXC,aAFW;AAGXE,aACE;AAJS,MADf;AAOEC,gBAAW,yBAAe;AACxB,cAAO;AACLM,mBAAU,oCAA2B;AACnC;AACA,eAAIC,YAAY9E,UAAhB,OAAgBA,CAAhB;;AAEA,eAAI+E,cAAc,CAChB,CAACC,WAAD,CAACA,CAAD,EAAgBA,WAAhB,CAAgBA,CAAhB,EAA+BA,WADf,CACeA,CAA/B,CADgB,EAEhB,CAACA,8BAAD,IAAmCA,WAFnB,CAEmBA,CAAnC,CAFgB,EAGhB,CAACA,8BAAD,IAAmCA,WAHnB,CAGmBA,CAAnC,CAHgB,EAIhB,CACEA,sBAAsBA,WAAtBA,CAAsBA,CAAtBA,0BADF,IAIEA,qBAAqBA,WAArBA,CAAqBA,CAArBA,GARJ,IAIE,CAJgB,CAAlB;;AAYA,eAAIC,UAAUH,4BAAd,MAAcA,EAAd;;AAEA7E,+BAAoB,uBAAsB;AACxC;AACA,iBAAIiF,eAAJ,QAA2B;AACzB,mBAAIC,aAAaL,+EAGNI,YAHMJ,CAGNI,CAHMJ,aAITI,YAJR,CAIQA,CAJSJ,CAAjB;;AAMA,mBAAI7E,aAAaiF,YAAjB,CAAiBA,CAAbjF,CAAJ,EAAkC;AAChCkF,wCAAuBD,YAAvBC,CAAuBD,CAAvBC;AADF,sBAEO;AACLA;AACD;AACF;AAdHlF;AAnBG;AAoCLkE,gBAAO,iBAAW;AAChB,kBAAO,CACL,CACEX,kBAAkB,gBAAgBA,KAAlCA,aADF,mBAGE,kBACI,YAAW;AACTO,kCACEP,KADFO,YAEE,aAAY;AACV,sBAAOb,gBAAgBM,KAAvB;AAHJO,gBAKE,gBAAgBP,KALlBO;AAFN,eAJG,IACL,CADK,EAiBL,CAACP,sBAAD,GAjBK,aAiBL,CAjBK,EAkBL,CAACA,sBAAD,GAlBK,YAkBL,CAlBK,EAmBL,CAACA,sBAAD,GAnBF,YAmBE,CAnBK,CAAP;AAqBD;AA1DI,QAAP;AA4DD;AApEH,IADF,CADF,GAHNO;;AA8EAA,oBAAiB;AACfqB,eAAU,qBAAY;AACpB,cAAOC,kBAAkBrF,gBAAlBqF,GAAkBrF,CAAlBqF,GAAP;AACD;AAHc,IAAjBtB;;AAMAA,+BACEC,WAAWA,QAAXA,sBAAWA,CAAXA,GACIA,QADJA,sBACIA,CADJA,GADFD;AAIAA,gBAAaC,WAAWA,QAAXA,OAAWA,CAAXA,GAA8BA,QAA9BA,OAA8BA,CAA9BA,GAAiD,IAA9DD,IAA8D,EAA9DA;;AAEAA,sBAAmB;AACjBuB,SADiB;AAEjBC,aAAQ,kBAAW;AACjB;AACD;AAJgB,IAAnBxB;AAMCA,uBAAD,IAACA,EAA4BA,iBAA7B,KAACA,EAAsDA,yBAAvD,CAACA,EAAoFA,cAAc;AACjGyB,UADiG;AAEjGC,YAFiG;AAGjGC,aAHiG;AAIjGC,WAAM;AAJ2F,IAAlG5B,EAKIA,aACHA,UAAUA,YAAVA,OAA6BA,YAN/B,KAACA,EAMmDA,cAClDA,iBAPF,EAACA,EAOwBA,qBAAqB/D,UAP9C,cAO8CA,CAP7C+D,EASIA,kBAAkB/D,UATvB,WASuBA,CATtB+D,EAWIA,uBAXL,KAACA,EAWoCA,YAXrC,IAACA,EAWwDA,uBAXzD,KAACA,EAWwFA,sCAXzF,KAACA,EAWuIA,mBAXxI,CAACA;;AAaDA;AACA;;;AAGA,OAAIC,WAAW,kBAAf,SAA0C;AACxCD,iCAA4BC,QAA5BD,cAA4BC,CAA5BD;AADF,UAEO;AACL,SAAIA,KAAJ,UAAmB;AACjBA;AADF,YAEO;AACLA;AACD;AACF;;AAED,OAAIC,WAAW,kBAAf,SAA0C;AACxCD,+BAA0BC,QAA1BD,cAA0BC,CAA1BD;AACD;;AAED,OAAIA,KAAJ,UAAmB;AACjBA;AACAA,+BAA0BA,2BAA1BA;AACD;;AAED,OAAIC,WAAW,eAAf,SAAuC;AACrCD,6BAAwBC,QAAxBD,WAAwBC,CAAxBD;AADF,UAEO;AACLA,6BAAwB,CAAxBA;AACD;;AAED,OAAIC,WAAW,iBAAf,SAAyC;AACvCD,mCAA8BC,QAA9BD,aAA8BC,CAA9BD;AADF,UAEO;AACLA;AACD;;AAEDA,yBAAsB,mBAAkB;AACtC,YAAOU,2BAA2BV,KAAlC;AADFA;;AAIAA,sCAAmC,EAAE6B,MAAM7B,KAA3CA,cAAmC,EAAnCA;AACAA,iCAA8B,mBAAkB;AAC9C,YAAO,QAAQA,KAAR,6BAA0C,kBAAiB;AAChE,cAAO8B,OAAP,OAAOA,CAAP;AADF,MAAO,CAAP;AADF9B;;AAMAA,wBAAqBC,WAAW,eAAXA,kBAArBD;AACAA,yBACEC,WAAWA,6BAAXA,kBADFD;;AAGAA,kCAA+B,yBAAwB;AACrD+B,YAAOA,QAAQ/B,KAAf+B;AACA,SAAIC,kBAAkB,eAEpB,4BACElF,uBAAuBmF,oBADzB,EACyBA,CAAvBnF,CADF,GAFoB,KAKpB,4BACEA,uBAAuBmF,oBADzB,EACyBA,CAAvBnF,CADF,GALoB,wBAQpB,4BACEA,uBAAuBmF,oBADzB,EACyBA,CAAvBnF,CADF,GARoB,KAWpB,wBAAwBA,uBAAxB,IAAwBA,CAAxB,GAXoB,KAYpB,uCAAuCA,uBAAvC,IAAuCA,CAAvC,GAZoB,KAAtB,qBAAsB,CAAtB;;AAgBA,YAAO;AACLoF,gBADK;AAELC,cAFK;AAGLC,aAHK;AAILC,aAJK;AAKLC,iBALK;AAMLC,oBAAa,uBAAW;AACtB,gBAAOtG,0BAEG+F,uBAAuB,CAF1B/F,eAE0B,CAAvB+F,CAFH/F,QAIHC,QACE,wDADFA,SACE,CADFA,EAUE,CAdN,oBAcM,CAVFA,CAJGD,CAAP;AAPG;;AA0BLuG,YAAK,mBAAe;AAClB,aAAI/C,KAAJ,YAAqB;AACnB,eAAIA,qBAAJ,GAA4B;AAC1B,oBAAOuC,gBAAgBvC,KAAvB,aAAOuC,CAAP;AACD;AACD,kBAAOA,gBAAP,CAAOA,CAAP;AACD;AACD,gBAAOA,gBAAP,CAAOA,CAAP;AACD;AAlCI,MAAP;AAlBFhC;;AAwDAA,gDAA6C;AAC3C;;AAEAyC,6BAAwB;AACtBP,gBADsB;AAEtBC,cAFsB;AAGtBC,aAAM,sBAHgB,QAGhB,CAHgB;AAItBC,aAJsB;AAKtBE,oBAAa,uBAAW;AACtB,gBAAOtG,0BAEG,gCAFHA,eAEG,CAFHA,QAGEC,QAAQmB,wBAARnB,CAAQmB,CAARnB,EAAoC,CAH7C,oBAG6C,CAApCA,CAHFD,CAAP;AANoB;;AAYtBuG,YAAK,mBAAe;AAClB,aAAIE,WAAW1C,yDAAf,IAAeA,CAAf;AAKA,aAAI0C,YAAJ,iBAAiC;AAC/B,eAAIA,YAAJ,KAAqB;AACnB;AACD;AACD,eAAIA,YAAJ,OAAuB;AACrB;AACD;AACD;AACD;AACD;AACD;AA5BqB,MAHmB;;AAkC3CC,mBAAc3C,KAlC6B;;AAoC3C4C,uBAAkB;AAChBV,gBADgB;AAEhBC,cAFgB;AAGhBE,aAHgB;;AAKhBG,YAAK,mBAAe;AAClB,gBAAO/C,KAAP;AACD;AAPe,MApCyB;;AA8C3CoD,aAAQ;AACNX,gBADM;AAENC,cAFM;AAGNC,aAAM,qDAHA,KAGA,CAHA;AAINC,aAJM;AAKNE,oBAAa,uBAAW;AACtB,gBAAOtG,0BAEG,4DAFHA,eAEG,CAFHA,QAYE,8EAZT,SAYS,CAZFA,CAAP;AANI;AA6BNuG,YAAK,mBAAe;AAClB,aAAIE,WAAW1C,sCAAf,KAAeA,CAAf;AACA,aAAI0C,YAAJ,QAAwB;AACtB;AACD;AACD;AACD;AAnCK,MA9CmC;;AAoF3CI,0BAAqB;AACnBZ,gBADmB;AAEnBC,cAFmB;AAGnBE,aAHmB;AAInBG,YAAK,mBAAe;AAClB,aAAI;AACF,eAAIpC,QAAQJ,kBACVA,sCADF,oBACEA,CADUA,CAAZ;AAGA,sBAAW;AACTI,qBAAQ,KAAKA,MAAbA,WAAaA,EAAbA;AADF,kBAEO;AACLA;AACD;AACD;AATF,WAUE,YAAY;AACZ;AACD;AAjBgB;AAmBnBmC,oBAAa,2BAAe;AAC1B,aAAIQ,wBAAwB7G,UAC1B8G,KAD0B9G,aAA5B,eAA4BA,CAA5B;AAIA,aAAIqG,cAAcrG,UAChBD,6BADgBC,SAChBD,CADgBC,EAEhBD,yBAEU,CACN8G,sBADM,CACNA,CADM,EAENA,sBAAsBA,+BAJ1B9G,CAII8G,CAFM,CAFV9G,QAMS,IARX,CAQW,CANTA,CAFgBC,CAAlB;AAUA,gBAAO,aAAY;AACjB,eAAI0E,KAAJ,iBAA0B;AACxB;AACD;AACD,kBAAO2B,YAAP,CAAOA,CAAP;AAJF;AAMD;AAxCkB;AApFsB,IAA7CvC;;AAgIA,OAAIC,WAAWA,QAAf,qBAAeA,CAAf,EAA+C;AAC7C/D,cACE8D,KADF9D,uCAEE+D,QAFF/D,qBAEE+D,CAFF/D;AAID;;AAED8D,uBAAoB,iBAAgB;AAClC,SAAII,iBAAJ,MAA2B;AACzB;AACD;AACD,SAAI6C,eAAJ;;AAEA,SAAIC,SAAS,2BAA2B,aAAY;AAClDD,sBAAeE,QAAfF,KAAeE,CAAfF;AACA;AAFF,MAAa,CAAb;;AAKA;;AAEA,iBAAY;AACV,WACEjD,kBACCiD,qCACCA,6BAHJ,wBACEjD,CADF,EAIE;AACA;AACD;AACD;AACD;;AAED;AAxBFA;;AA2BA;AACA,OAAIoD,uBAAuB,SAAvBA,oBAAuB,mBAA2B;AACpD,SAAIC,YAAYpH,UAAU+D,KAA1B,SAAgB/D,CAAhB;AACA,SAAIsF,KAAJ;AACA,SAAI+B,cAAcD,iBAAiB,MAAnC,EAAkBA,CAAlB;;AAEA,SAAIC,YAAJ,KAAIA,EAAJ,EAAyB;AACvBA,qBAAcD,kFAAdC,MAAcD,CAAdC;AAKD;;AAEDA;;AAEA,SAAIC,gBAAgB7C,WAAWA,iBAA/B;;AAEA,kBAAa;AACX4C,sGAKe,aAAY;AACvB5C;AACAV;AACAsD;AARJA;;AAWAA,wGAKe,aAAY;AACvB5C;AACA8C;AACAF;AARJA;;AAWAA,wEAIQ,aAAY;AAChB,aAAI5C,QAAJ,OAAmB;AACnB;AANJ4C,sBAQe,aAAY;AACvB5C,yBAAgB,CAACA,QAAjBA;AACA4C;AAVJA;;AAaAA,wEAIQ,aAAY;AAChB;AALJA,sBAOe,aAAY;AACvBtD,sCAA6BU,QAA7BV;AACAsD;AATJA;;AAYAA,mGAKe,aAAY;AACvBtD,sCACEU,QADFV,kBAGE,sBAAgB;AAAE,kBAAO,qBAAP;AAHpBA,YAIE,EAAC,kBAJHA,IAIE,EAJFA;AANJsD;;AAcA5C;;AAEA4C,+DAEiB,KAAKrH,SAAL,UAFjBqH,mBAGgB,KAAKrH,SAAL,UAHhBqH;AAhEF,YAqEO;AACL,oBAAa;AACXG;AACD;AACDH;AACD;;AAEDD,2BAEE,aAAY;AACVD,kCAA2BG,uBAA3BH;AAHJC;AA7FF;;AAsGArD,iCAA8B,wBAAuB;AACnD,SAAIA,KAAJ,oBAA6B;AAC3B0D,yBAAkB,2BAEhB,sBAAqB;AACnBpE,aAAIrD,UAAJqD,CAAIrD,CAAJqD;;AAEA,aAAI,CAACqE,QAAL,0BAAuC;AACrCA,8CAAmCA,2CAErB3D,kBAFqB2D,mCAGd,gBAAgBA,gBAAhB,OAHrBA,KAAmCA,CAAnCA;;AAKAA,0CAA+B,YAAW;AACxC,iBAAIX,OAAJ;AACA,iBAAIY,QAAJ;AACA,iBACED,oCACA,CAACA,kBAFH,YAEGA,CAFH,EAGE;AACA,mBAAIE,YACFF,sCACEA,kBAFJ,aAEIA,CADFA,CADF;AAIAX;AACAA,oBAAKW,kBAALX,aAAKW,CAALX,IAAyCa,UAAzCb,OAAyCa,CAAzCb;AACAY;AACAA,qBAAMC,UAAND,OAAMC,CAAND,IAA4BD,kBAA5BC,UAA4BD,CAA5BC;AACD;;AAED9H,mCACE6H,oCACE3D,KADF2D,oBADF7H,IACE6H,CADF7H,EAKE6H,QALF7H,iEAUE;AACEgI,0BADF;AAEErC,oBAAKkC,eAFP;AAGEjC,sBAAOiC,eAHT;AAIEhC,uBAAQ,IAJV;AAKEC,qBAAM,IALR;AAMEmC,0BANF;AAOEC,0BAPF;AAQEC,sBAAON,gBART;AASEO,uBAAQP,iBATV;AAUEQ,0BAVF;AAWEC,uBAAQT,QAXV;AAYEU,qBAAM;AACJC,oBAAGX,gBADC;AAEJY,oBAAG;AAFC;AAZR,cAVFzI;AAjBF6H;AA8CAA;AACArE;AArDF,gBAsDO;AACLA;AACAqE;AACAA;AACAA;AACD;AAhELD,QAAkB,CAAlBA;AAmED;AArEH1D;;AAwEAA,mCAAgC,oDAI9B;AACAwE,OAAE,MAAFA;AACAA,OAAE,MAAFA;AACAA,OAAE,MAAFA;AAPFxE;;AAUAA,kCAA+B,sEAK7B;AACA,SAAIU,UAAU,OAAOV,KAAP,UAAsB,aAAY;AAC9C,cAAOM,gBAAP;AADF,MAAc,CAAd;;AAIA,SAAI,CAAJ,SAAc;AACZ;AACD;;AAEDmE,0BAAqBA,sBAArBA;;AAEA,SAAIC,gBAAgBC,wBAClBC,gBACI1I,SAAS8D,UAAT9D,OADJ0I,aACI1I,CADJ0I,GAEIlE,QAHN,QAAoBiE,CAApB;;AAMA,SAAIvI,2BAAJ,MAAqC;AACnCsI;AACAG,2BAEEH,cAFFG,uBAEEH,CAFFG,EAGE9E,KAHF8E,uBAGE9E,CAHF8E;AAKD;;AAED,SAAInB,eAAe,CACjB,2BAEE,mBAAkB;AAChB3H,iCACEiE,mCACEA,0BADFA,UACEA,CADFA,EAEEA,KAHJjE,8BAGIiE,EAFFA,CADFjE;AAJN,MACE,CADiB,CAAnB;;AAcAiE;;AAEA,SAAI,gBAAJ,oBAAwC;AACtC9D,4BAAqB,gBAAe;AAClCuI;AADFvI;AADF,YAIO;AACLA,oCAA6B;AAC3B4I,qBAAY;AACVC,kBADU;AAEVC,kBAAOtB;AAFG;AADe,QAA7BxH;AAMD;;AAED,YAAO8D,gDAELiF,cAAcA,YAAdA,UAAcA,CAAdA,GAAwC,aAFnCjF,YAAP,kBAAOA,CAAP;AA5DFA;;AAmEAA,sCAAmC,+CAIjC;AACA,SAAIkF,YAAY,SAAZA,SAAY,mBAA2B;AACzC,WAAIC,IAAJ;AACA,YAAK,IAAI1G,IAAT,GAAgBA,IAAhB,aAAiC;AAC/B0G,cAAKjJ,SAALiJ,QAAKjJ,CAALiJ;AACD;AACD;AALF;;AAQA,SAAIC,UAAU,+BAAd,GAAc,CAAd;;AAEA,SAAIC,gBAAgBH,mBAApB,EAAoBA,CAApB;AACA,SAAII,gBAAgBD,gBAApB;AACA,SAAIE,oBAAoBF,gBAAxB;AACA,SAAIG,oBAAoBH,gBAAxB;;AAEA,YACEb,EAAE,MAAFA,yBACAA,EAAE,MAAFA,mBADAA,UAEAA,EAAE,MAAFA,mBAHF,QAIE;AACAa,uBAAgBH,mBAAhBG,EAAgBH,CAAhBG;AACAC,uBAAgBD,gBAAhBC;AACAC,2BAAoBF,gBAApBE;AACAC,2BAAoBH,gBAApBG;AACD;;AAED,SAAIC,gBAAJ;AACA,SAAIC,oBAAJ;AACA,SAAIC,sBAAJ;;AAEA;AACA,SAAIC,iBAAiBpB,0BAArB,aAAqBA,CAArB;AACA,SAAIqB,WAAWrB,0BACC,MADDA,mDAAf,KAAeA,CAAf;AAIAA,iJAIe,YAAW;AACtBxE;AALJwE;;AAYAqB;AACArB,OAAE,MAAFA;;AAEA,SAAIsB,kBAAkBtB,oFAGHuB,cAHnB,UAAsBvB,CAAtB;;AAKA,SAAIuB,sBAAJ,cAAwC;AACtCD,4DAEY,gBAAgBC,sCAF5BD,GAE4BC,CAF5BD;AAGD;;AAED;AACA,SAAIE,iBAAiBxB,mEAArB,IAAqBA,CAArB;AAGAwB;;AAMAA;AACAF,8BAAyB,MAAzBA;;AAEA;AACAtB;;AAEA,SAAIyB,kBAAkB;AACpBC,eAAQjG,WAAWA,QADC,QACDA,CADC;AAEpB,uBAFoB;AAGpBkG,kBAHoB;AAIpB/B,eAJoB;AAKpBU,mBACE7E,WAAW,gBAAXA,UAAqCA,QAArCA,YAAqCA,CAArCA,GANkB;AAOpB,sBACEA,WAAW,iBAAXA,UAAsCA,QAAtCA,aAAsCA,CAAtCA,GARkB;AASpB,yBAAkB;AATE,MAAtB;;AAYA,SAAI8F,cAAJ,gBAAkC;AAChCE;AACD;;AAED,wBAAmB;AACjB/J;AACD;;AAED,SAAIkK,eAAevK,uCAEjB,MAFiBA,kGAAnB,eAAmBA,CAAnB;;AAcA,SAAImE,eAAJ,aAAIA,CAAJ,EAAmC;AACjC,WAAIA,eAAJ,YAAIA,CAAJ,EAAkC;AAChCoG,kDAAyCpG,eAAzCoG,aAAyCpG,CAAzCoG;AADF,cAEO;AACLA,mDACEpG,eADFoG,aACEpG,CADFoG;AAGD;AACF;;AAED,SAAIpG,iBAAJ,IAAIA,CAAJ,EAA4B;AAC1BoG,6CAAsCpG,iBAAtCoG,IAAsCpG,CAAtCoG;AACD;;AAED,SAAIpG,eAAJ,YAAIA,CAAJ,EAAkC;AAChCoG,6CAAsCpG,eAAtCoG,YAAsCpG,CAAtCoG;AACD;;AAED,SAAIL,cAAJ,gBAAkC;AAChC;AACA9J,kEAA2D,uBAAsB;AAC/E,oBAAW;AACV,aAAIoK,YAAYC,uBAAuB5H,aAAvB4H,WAAhB;AACD,aAAIC,SAAStK,UAAU,sBAAvB,cAAaA,CAAb;AACA,aAAIuK,OAAOvK,yBAAX,aAAWA,CAAX;AACCsK;;AASDH,6CAAoCA,sBAApCA,CAAoCA,CAApCA;;AAEC;AAhBHnK;AAFF,YAoBO;AACL;AACD;;AAED;AACA;;;;;AAMA;;;;;AAtKF+D;;AA6KAA,0CAAuC,4BAA2B;AAChE,SAAIyG,cAAc,CAACzG,KAAnB,eAAuC;AACrC;AACD;AACD,YACE,CAACyG,kBAAkB,MAAMzG,KAAzB,8DADF;AAJFA;;AAYA;AACAwE;;AAEA,OAAIkC,oBAAoB,SAApBA,iBAAoB,OAAe;AACrC,SAAIrD,YAAYpH,UAAU+D,KAA1B,SAAgB/D,CAAhB;AACA,SAAIsF,KAAJ;AACA,SAAI+B,cAAcD,iBAAiB,MAAnC,EAAkBA,CAAlB;;AAEA,SAAIC,YAAJ,KAAIA,EAAJ,EAAyB;AACvBA,qBAAcD,kFAAdC,MAAcD,CAAdC;AAKD;;AAEDA;;AAEA,eAAU;AACR7D;AACA6D,wGAKe,aAAY;AACvB7D;AACAkH;AACArD;AARJA;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,+DAEiB,KAAKrH,SAAL,UAFjBqH,mBAGgB,KAAKrH,SAAL,UAHhBqH;AA1BF,YA+BO;AACLA;AACD;;AAEDD,2BAEE,aAAY;AACVqD;AAHJrD;AAlDF;;AA2DA,mCAAgC;AAC9B;AACA,SAAIuD,kBAAkBC,iBAAiB7G,KAAvC,KAAsB6G,CAAtB;;AAEA,SAAIC,aAAa;AACfvF,WADe;AAEfwF,iBAAU;AAFK,MAAjB;;AAKA;AACA,SAAI/G,KAAJ,qBAA8B;AAC5B4G,yBAAkB1K,wBAAwB8D,KAA1C4G,mBAAkB1K,CAAlB0K;AACD;;AAEDE,2BAAsB,uBAAuB,sBAAgB;AAC3D,cAAO;AACLE,qBADK;AAELD,mBAAU3G;AAFL,QAAP;AADF0G,MAAsB,CAAtBA;;AAOA,SAAIG,UAAU,SACV,sBAEQ,CAACjH,KAAD,OAAaA,KAFrB,MAEQ,CAFR;AAGE;AAHF,eAIY,aAAY;AACpB,cAAOsB,EAAP;AALJ,cAOS,aAAY;AACjB,cAAO4F,SAAS5F,kBAAT4F,QAAP,GAAOA,CAAP;AARJ,aAUQ,gBAAe;AACnB,cAAOC,UAAUC,EAAjB;AAXJ,gBADU,CACV,CADU,GAeV,yBAEQ,CAACpH,KAAD,OAAaA,KAFrB,MAEQ,CAFR;AAGE;AAHF,eAIY,aAAY;AACpB,cAAOsB,EAAP;AALJ,cAOS,aAAY;AACjB,cAAO4F,SAAS5F,kBAAT4F,QAAP,GAAOA,CAAP;AARJ,aAUQ,gBAAe;AACnB,cAAOE,UAAUD,EAAjB;AAXJ,cAfJ,CAeI,CAfJ;;AA8BA,SAAInI,WAAWiI,cAAf,UAAeA,CAAf;AACA/K,sBAAiB,aAAY;AAC3B;AADFA;AAGA;AACD;;AAED,oCAAiC;AAC/B,SAAImL,UAAJ;AACAA;AACAA;AACAA;AACAA;;AAEA,SAAIC,mBAAJ;AACA,SAAIC,aAAJ;;AAEAvH,2BAAsB,aAAY;AAChC,WAAIA,4BAAJ,CAAIA,CAAJ,EAAoC;AAClC;AACA,aAAIwH,cACF,gBAAgB,aAAY;AAC1B,kBAAOlH,EAAP;AADF,eAEMN,KAHR;AAIA,aAAI,CAAJ,aAAkB;AAChB,eAAIsE,EAAJ,WAAiB;AACf+C;AACAA;AAFF,kBAGO;AACLC,8BAAiBhD,EAAjBgD;AACD;AACF;AACF;AAfHtH;;AAkBAA,wBAAmB,gBAAe;AAChC,WAAIsH,iBAAiBhD,EAArB,OAAIgD,CAAJ,EAAiC;AAC/BC,yBAAgBF,uBAAuBA,iBAAvCE;AACAF;AACAA;AACD;AALHrH;;AAQAA,wBAAmB,aAAY;AAC7B,WAAI,EAAEsE,aAAatE,KAAnB,YAAI,CAAJ,EAAuC;AACrC,aACEuH,WAAWjD,EAAXiD,yBACAA,WAAWjD,EAAXiD,YAFF,WAGE;AACA,eAAIhD,IAAJ;AACA,gBAAK,IAAL,WAAoB;AAClBA,uBAAUD,EAAVC,IAAUD,CAAVC;AACD;;AAEDA,sBAAWgD,WAAWjD,EAAtBC,MAAWgD,CAAXhD;AACAA,sBAAWgD,WAAWjD,EAAtBC,MAAWgD,CAAXhD;AACA8C;AACD;AACF;AAfHrH;;AAkBA;AACD;;AAEDA,0BAAuB,+CAA8C;AACnE,SAAI0E,gBAAgB,wBAClBE,gBACI1I,SAAS8D,UAAT9D,OADJ0I,aACI1I,CADJ0I,GAEIlE,QAHc,UAIlB,aAAY;AACV,cAAOpB,WAAWU,KAAlB;AALJ,MAAoB,CAApB;;AASA9D,YAAOwI,cAAPxI,OAA4B,aAAY;AACtCiD;AADFjD;;AAIA,SAAIE,2BAAJ,MAAqC;AACnCsI;AACAG,2BAEEH,cAFFG,uBAEEH,CAFFG,EAGE9E,KAHF8E,uBAGE9E,CAHF8E;AAKD;;AAED,SAAI4C,mBAAmB,CACrB,CACE,yBAAwB;AACtB,WAAIC,YAAYC,yCAAhB,IAAgBA,CAAhB;AACA,WAAIxF,QAAQuF,iFAAZ,IAAYA,CAAZ;AAIA,WAAI3F,OAAO,2FAIM/E,6BAA6BgD,KAJnC,KAIMhD,CAJN,cAKIA,6BAA6BgD,KALjC,KAKIhD,CALJ,cAQP,6BACE,OAAO2G,QAAP,OAAsB,gBAAe;AACnC,gBAAOA,yCAAP,oBAAOA,CAAP;AAVG,QASL,CADF,CARO,cAiBI,aAAY;AACvB;AACA,aAAIiE,WAAW5K,mCAAmC,KAAlD,KAAeA,CAAf;AACA,aAAI,KAAJ,OAAgB;AACd2G;AAMA,eAAIkE,YAAYlE,yCAAhB,QAAgBA,CAAhB;AAIAA;AACAA,gDACEA,iDADFA,cACEA,CADFA;AAMAA;AACA+D;AAnBF,gBAsBO;AACLA;AAGD;AA9CL,QAAW,CAAX;AAPJ,QADqB,IACrB,CADqB,EA2DrB,2BAEE,mBAAkB;AAChB3L,iCACE4H,sCACEA,6BADFA,KACEA,CADFA,EAEEA,QAHJ5H,8BAGI4H,EAFFA,CADF5H;AA9DN,MA2DE,CA3DqB,CAAvB;;AAwEAiE;AACAA,qDAGIiF,eAAe,gBAAgBvE,QAHnCV,YAII;AACE;AACAqC,aAFF;AAGE2E,mBAAYtG,QAHd;AAIEoE,mBAAY;AACVC,gBADU;AAEVC,gBAAOyC;AAFG;AAJd,MAJJzH;;AAgBA,SAAI8H,WACF,iBACApH,gCADA,GACAA,CADA,GADF;AAIA,SAAIiH,OAAOnD,+FAGW9D,uBAHX8D,wBAAX,QAAWA,CAAX;;AAMAmD,sBAAiB,aAAY;AAC3B3H,oCAA6BwE,aAA7BxE,YAA6BwE,CAA7BxE;AADF2H;AA1HF3H;;AA+HA,kDAA+C;AAC7C,SAAI+H,YAAY,SAAhB,cAAgB,CAAhB;AACA,SAAIC,cAAcD,UAAlB,QAAkBA,EAAlB;AACA,SAAIE,YAAYf,WAAWgB,SAA3B,EAAgBhB,CAAhB;AACA,SAAIiB,YAAYD,SAASD,YAAzB;;AAEA,SAAIE,YAAJ,aAA6B;AAC3BJ,6BAAsBA,sCAAtBA;AACAA,0BAAmB,MAAMI,YAAzBJ,WAAmB,CAAnBA;AAFF,YAGO;AACLA,6BAAsBA,0BAAtBA;AACAA,0BAAmBC,cAAnBD;AACD;;AAED;AACA;AACD;;AAED/H,qCAAkC,8DAKhC;AACA,SAAI;AACFoI,oBAAaA,cAAcpI,KAA3BoI;;AAEA,WAAIC,iBAAiB,SAAjBA,cAAiB,eAAuB;AAC1C,aAAIC,UAAUtI,sCAAd,UAAcA,CAAd;AACA,aAAIsI,mBAAJ,MAA6B;AAC3B,kBAAOA,qBAAqBA,WAA5B;AADF,gBAEO;AACLA,qBAAUtI,kBACRA,sCADFsI,UACEtI,CADQA,CAAVsI;AAGA,eAAIA,mBAAJ,MAA6B;AAC3B,oBAAOA,qBAAqBA,WAA5B;AACD;AACF;AACD;AAZF;;AAeA,WAAIC,cAActG,0BAAlB,WAAkBA,CAAlB;AACA,WAAIuG,eAAevG,0BAAnB,aAAmBA,CAAnB;;AAEA;;AAEA,WAAImG,cAAcpI,KAAlB,OAA8B;AAC5ByI,yBAAgBzI,KAAhByI;AADF,cAEO;AACL,aAAIC,oBAAoB,IAAxB,IAAwB,EAAxB;AACAA;AACAD;AACAvM,gBAAO8D,KAAP9D,OAAmB,gBAAe;AAChC,eAAImM,kCAAJ,IAAIA,CAAJ,EAA6C;AAC3C5I;AACAgJ;AAFF,kBAGO;AACLhJ;AACD;AANHvD;AAQD;;AAED,WAAIyM,qBAAqB,SAArBA,kBAAqB,SAAiB;AACxC;AACA,aAAIC,WAAW5I,oCAAf,UAAeA,CAAf;AACA,aAAI6I,WAAW7I,oCAAf,UAAeA,CAAf;;AAEA,aAAI4I,YAAJ,UAA0B;AACxB,kBAAOE,QAAQC,GAARD,KAAgB,CAAhBA,IAAP;AADF,gBAEO;AACL,kBAAOF,sBAAsB,CAAtBA,IAAP;AACD;AACD;AAVF;;AAaA;;AAEA,WAAII,iBAAJ;AACA,WAAIC,2BAAJ;;AAEA;;AAEA/M,6BAAsB,gBAAe;AACnC,aAAIuD,KAAJ,SAAkB;AAChB,eAAI,EAAEA,gBAAN,cAAI,CAAJ,EAAuC;AACrCuJ,4BAAevJ,KAAfuJ,WAA+B,EAAEE,OAAF,IAAaC,OAA5CH,EAA+B,EAA/BA;AACD;AACDC,oCAAyBxJ,KAAzBwJ,MACED,eAAevJ,KAAfuJ,kBADFC;AAEAD,0BAAevJ,KAAfuJ;AACD;AARH9M;;AAWAA,cAAO8D,KAAP9D,OAAmB,gBAAe;AAChC,aAAIkN,eAAepJ,KAAnB,sBAA8C;AAC5C,eAAIqJ,eAAetJ,WAAWqJ,KAAXrJ,QAAnB;;AAEA,eAAIuJ,YAAYvJ,WAAWqJ,KAAXrJ,QAAhB;AAAA,eACEwJ,YAAYxJ,WAAWqJ,KAAXrJ,QADd;;AAGA,eACEuJ,yCACAC,aAFF,0BAGE;AACA,iBAAIC,cAActN,QAAlB,IAAkBA,CAAlB;;AAEAsN,kCAAqBP,yBAArBO,SAAqBP,CAArBO;AACAA,kCAAqBP,yBAArBO,SAAqBP,CAArBO;;AAEAR;AACD;AACF;AAlBH9M;;AAqBAA,8BAAuB,wCAAuC;AAC5D;AACA;;AAEA;;AAEA,aAAIuN,cAAczJ,qBAAlB,aAAkBA,CAAlB;;AAEAA;;AAEA;AACA,aAAIZ,QAAJ;;AAEA,aAAIsK,cAAc,SAChB3K,qCACE4K,cADF5K,OAEE4K,cAFF5K,aADgB,KAChBA,CADgB,EAOhB,cAAa;AACX,kBAAO6K,YAAP;AARJ,UAAkB,CAAlB;;AAYAxK,iBAAQ,gBAAgB,cAAa;AACnC,kBAAOyK,YAAP;AADFzK,UAAQ,CAARA;;AAIA;;AAEAlD,6BAAoB,gBAAe;AACjCoE;AADFpE;;AAIAwN,0BAAiB,kBAAiB;AAChC,kBAAOf,mBAAmBmB,GAAnBnB,CAAmBmB,CAAnBnB,EAA0BoB,GAAjC,CAAiCA,CAA1BpB,CAAP;AADFe;;AAIAA,uBAAc,mBAAmB,gBAAe;AAC9C,eAAIvH,QAAQnC,+CAA+CvB,IAA3D,CAAYuB,CAAZ;;AAEA9D,qBAAU,aAAY;AACpBiD;AACAA;AACAA;AAHFjD;;AAMA,kBAAO;AACL6K,uBAAU7K,QADL,CACKA,CADL;AAEL8N,6BAAgBhK,cAFX,WAEWA,CAFX;AAGLgH,yBAHK;AAILiD,wBAAW,wBACT,MAAM7K,MAAN,CAAMA,CAAN,EAAgB,aAAY;AAC1B,sBAAOE,EAAP;AAFO,cACT,CADS;AAJN,YAAP;AATFoK,UAAc,CAAdA;;AAqBAxN,6BAAoB,aAAY;AAC9BgO;AADFhO;;AAIA8D;;AAEA;;AAEA;;;;;;;;AAQA9D,6BAAoB,eAAc;AAChC;AACA,eAAIiO,kBAAkBxF,wBACpBzI,SAASkO,IAATlO,UAAuBA,0BADHyI,WACGzI,CAAvBA,CADoByI,cAAtB,aAAsBA,CAAtB;AAMA,eAAI0F,aAAa,SACf,qCACEF,gBADF,OAEE,SAASA,gBAAT,OAAgC,aAAY;AAC1C,oBAAO7K,YAAYU,KAAnB;AAJW,YAGb,CAFF,CADe,EAOf,cAAa;AACX,oBAAO4J,YAAP;AARJ,YAAiB,CAAjB;;AAYAQ,0BAAeC,WAAfD;;AAEAC,2BAAgB,gBAAe;AAC7B,oBAAOlD,WAAWC,EAAlB;AADFiD;;AAIAD;AACAA;;AAEAlO,8BAAmB,0BAAyB;AAC1C,iBAAIoO,iBAAiBpO,0BAEnBA,0BAFF,YAEEA,CAFmBA,CAArB;AAIAkO,mCAAsBG,eAAtBH;AACA,iBAAI,QAAJ,gBAA4B;AAC1BA,uCAAwBE,qBAAxBF;AACAlO,sBAAOoO,eAAPpO,IAAOoO,CAAPpO,EAA6B,aAAY;AACvCiD,mCAAkBkJ,oCAAlBlJ;AACA,qBAAImL,+BAAJ,GAAsC;AACpCnL;AACA,uBAAIA,mBAAJ,GAA0B;AACxBA;AACD;AACF;AAPHjD;AASD;AACD,iBAAI,SAAJ,gBAA6B;AAC3BA,sBAAOoO,eAAPpO,KAAOoO,CAAPpO,EAA8B,aAAY;AACxCiD;AADFjD;AAGD;AAtBHA;;AAyBA;;AAEA8D,uDAA4CoK,IAA5CpK;AAxDF9D;AA5EFA;AA3FF,OAkOE,YAAY;AACZqD;AACA;AACD;AA3OHS;;AA8OA,mCAAgC;AAC9B;;AAEA,SAAIwK,cAAcC,eAAlB,MAAkBA,CAAlB;;AAEA,SAAIzK,wBAAJ,GAA+B;AAC7BA,uBAAgB,mBAAmB,qBAAoB;AACrD,gBAAO,EAAE,OAAOY,EAAP,eAAT,WAAO,CAAP;AADFZ,QAAgB,CAAhBA;AADF,YAIO;AACL,WAAI0K,oBAAJ;AACAxO,cAAO8D,KAAP9D,UAAsB,aAAY;AAChCwO,2BAAkBpK,EAAlBoK;AADFxO;AAGAA,2BAAoB,aAAY;AAC9B,aAAI,gBAAJ,GAAuB;AACrBA,uBAAYwO,kBAAkBpK,EAA9BpE,UAAYwO,CAAZxO;AACD;AAHHA;AAKD;;AAED;;AAEA,SAAIyO,kBAAkB,SAClB,aAAY;AACVxL,cAAOA,MAAPA;AACAA,cAAOA,MAAPA;AAHgB,SAKlB,aAAY;AACVA,cAAOA,OAAPA;AACAA,cAAOA,OAAPA;AAPN;;AAUAjD,YAAO,CAAC8D,KAAD,OAAaA,KAApB9D,QAAO,CAAPA,EAAoC,gBAAe;AACjDA;AADFA;;AAIA8D;AACD;;AAED,kCAA+B;AAC7BA,8BAAyBA,yBAAzBA;AACA4K;AACD;;AAED,+CAA4C;AAC1C,gBAAW;AACT,WAAIC,UAAU,CAAC7K,aAAa8K,QAAd,KAA2B9K,KAAzC;AACA,WAAI+K,UAAU,CAAC/K,cAAc8K,QAAf,KAA4B9K,KAA1C;;AAEAA;AACAA;;AAEA,WAAIgL,YAAY,yBACd,UAAUJ,eAAV,KAAUA,EAAV,EAAkC,gBAAe;AAC/C,gBAAOnL,KAAP;AAFJ,QACE,CADc,CAAhB;AAKAuL,uBACE,MAAMA,UAAN,MAAMA,EAAN,EAA0B,aAAY;AACpC,gBAAOpK,IAAP;AAFJoK,QACE,CADFA;AAKA;AACA,WAAIC,YAAY,yBACd,UAAUL,eAAV,KAAUA,EAAV,EAAkC,gBAAe;AAC/C,gBAAOnL,KAAP;AAFJ,QACE,CADc,CAAhB;AAKAwL,uBACE,MAAMA,UAAN,MAAMA,EAAN,EAA0B,aAAY;AACpC,gBAAOrK,IAAP;AAFJqK,QACE,CADFA;;AAMA/O,cAAO0O,eAAP1O,KAAO0O,EAAP1O,EAA+B,gBAAe;AAC5CuD,kBAASuL,UAAUvL,KAAnBA,CAASuL,CAATvL;AACAA,kBAASwL,UAAUxL,KAAnBA,CAASwL,CAATxL;AAFFvD;AAID;;AAED8D,kBAAakH,SAASA,SAASlH,KAATkH,OAATA,GAASA,CAATA,EAAblH,IAAakH,CAAblH;AACAA,mBAAckH,SAASA,SAASlH,KAATkH,QAATA,GAASA,CAATA,EAAdlH,IAAckH,CAAdlH;;AAEA4K,yBAAoB,CAAC5K,KAAD,OAAaA,KAAjC4K,MAAoB,CAApBA;AACA5K,oCAA+BA,KAA/BA,sBAA0DA,KAA1DA;;AAEA,kBAAa;AACX4K;AADF,YAEO;AACL,kBAAW;AACT5K;AACD;AACF;AACF;;AAEDA,iCAA8B,OAAO,YAAW;AAC9CA,wBAAmB,aAAY;AAC7Bb,qBAAclD,GAAdkD,GAAclD,EAAdkD;AADFa;;AAIAA,wBAAmB,aAAY;AAC7BA,kBAAWV,EAAXU,sBAAmCV,EAAnCU;AACAA,kBAAWV,EAAXU,sBAAmCV,EAAnCU;AAFFA;AALFA,IAA8B,CAA9BA;;AAWAA,gDAA6C,OAAO,YAAW;AAC7DA;;AAEAA,wBAAmB,aAAY;AAC7B9D,eAAQ,kBAAiB;AACvBgP,6BAAoBC,iBAApBD,IAAoBC,EAApBD;AACA,aAAIA,oBAAJ,GAA2B;AACzBC,wBAAarP,KAAbqP;AADF,gBAEO;AACL,eAAID,oBAAJ,KAA6B;AAC3BC,0BAAarP,KAAbqP;AADF,kBAEO;AACL;AACAC,4BAAeD,iBAAfC,MAAeD,EAAfC;AACAC;AACA,kBAAKvC,KAAL,GAAaA,KAAb,mBAAqCA,MAArC,GAA8C;AAC5C,oBAAKC,KAAKD,KAAV,GAAkBC,KAAlB,mBAA0CA,MAA1C,GAAmD;AACjD,qBACE/I,WAAWoL,aAAXpL,EAAWoL,CAAXpL,gBAA2CoL,aAD7C,EAC6CA,CAA3CpL,CADF,EAEE;AACAqL;AACD;AACF;AACF;;AAEDF,0BACE,mCAAmCD,oBADrCC,CACE,CADFA;AAED;AACF;AAxBHjP;AADF8D;AAHFA,IAA6C,CAA7CA;;AAiCAA,yBAAsB,cAAa;AACjC,YAAO,kBAAkB,aAAY;AACnC,cAAOb,QAAP;AADK,QAAP,CAAO,CAAP;AADFa;;AAMAA,uDAAoD,OAAO,YAAW;AACpE,SAAIsL,SAAS,WAAb,gBAAa,CAAb;;AAEAA,wBAAmB,iBAAgB;AACjC,WAAIjM,QAAQkM,WAAZ;;AAEAlM,qBAAc,aAAY;AACxBmM,0BAAiBxL,oBAAoBb,EAArCqM,EAAiBxL,CAAjBwL;AACAA,8BAAqBrM,QAAQA,EAARA,MAAgBrD,KAArC0P;AAFFnM;AAHFiM;;AASA,SAAIG,aAAJ;AACAA,2BAAsBzL,KAAtByL;AACAA,2BAAsBzL,KAAtByL;AACAH;AAfFtL,IAAoD,CAApDA;;AAkBA,OAAI0L,8BAA8B,UAChC,aAAY;AACV1L;AACA,YAAO,SACL9D,QAAQA,QAAQoE,EAARpE,yBAAmCD,GAA3CC,UAAQA,CAARA,EADK,CACLA,CADK,EAEL,uBAAsB;AACpB,cAAOyP,OAAP;AAHG,QAAP,CAAO,CAAP;AAH8B,MAWhC,aAAY;AACV,YAAOrL,EAAP;AAZJ,IAAkC,CAAlC;;AAgBAN,iDAA8C,OAAO,YAAW;AAC9DA;;AAEAA,2BAAsB,aAAY;AAChC9D,eAAQ,qBAAoB;AAC1B0P,wBAAeC,mBAAfD;AACA,aAAIA,eAAJ,GAAsB;AACpBC,0BAAe/P,KAAf+P;AADF,gBAEO;AACL,eAAIH,gDAAJ,SAA6D;AAC3DG,4BAAe/P,KAAf+P;AADF,kBAEO;AACL;AACAC;;AAEA,iBAAIC,SAAJ;AACA,iBAAIC,YAAJ;;AAEAhM,gCAAmB,gBAAe;AAChC,mBAAIb,aAAa0M,UAAjB,YAAuC;AACrCC;AACD;AAHH9L;AAKA8L,kCAAqB,gBAAe;AAClCG,8BAAe,wCAER,aAAY;AACf,wBAAO,CAAP;AAHW,uBAKPhQ,GALRgQ,SAAe,CAAfA;AAMA,oBAAKnD,KAAL,GAAaA,KAAKmD,aAAlB,QAAuCnD,MAAvC,GAAgD;AAC9C,sBAAKC,KAAKD,KAAV,GAAkBC,KAAKkD,aAAvB,QAA4ClD,MAA5C,GAAqD;AACnDgD;AACA,uBACE/L,WAAWiM,aAAXjM,EAAWiM,CAAXjM,gBAA2CiM,aAD7C,EAC6CA,CAA3CjM,CADF,EAEE;AACAgM;AACD;AACF;AACF;AAhBHF;;AAmBAD,4BAAeG,YAAfH;AACD;AACF;AAxCH3P;AADF8D;AAHFA,IAA8C,CAA9CA;;AAiDAA,mCAAgC,oBAAmB;AACjDA,wBAAmB,aAAY;AAC7Bb,qBAAcrD,KAAdqD;AADFa;AADFA;;AAMAA,8BAA2B,YAAW;AACpC/D,mEAA8D;AAC5D,wBAD4D;AAE5D,iBAF4D;AAG5D,kBAAW;AAHiD,MAA9DA;AAKA+D;AACAA;AACAA;AACA/D;AATF+D;;AAYA;AACA,gCAA6B;AAC3B,SAAIkM,kBAAJ;AACA,SAAIC,QAAJ;AACAnM;AACAA;AACAA;;AAEAoM,8BAAyB,aAAY;AACnC,WAAI,OAAOpM,mBAAmBsB,YAA1B,CAAOtB,CAAP,KAAJ,aAA8D;AAC5DA,4BAAmBsB,YAAnBtB;AADF,cAEO;AACLA,4BAAmBsB,YAAnBtB;AACD;AACD,WAAI,aAAJ,GAAoB;AAClBsB,qBAAYA,aAAZA;AACD;;AAED,WAAIA,uCAAJ,GAA8C;AAC5CtB,+BAAsBsB,gBAAtBtB;AACD;AAZHoM;;AAeA;AACA;;AAEApM;;AAEAA,0CAAqC,+BAA8B;AACjE,WAAIqM,SAAS,CACX,oBAAoB,aAAY;AAC9B,gBAAO/L,EAAP;AAFJ,QACE,CADW,CAAb;AAKApE,qBAAc,aAAY;AACxBmQ,qBACE,oBAAoB,aAAY;AAC9B,kBAAOrM,mCAAmCM,EAA1C,iBAAON,CAAP;AAFJqM,UACE,CADFA;AADFnQ;AAOA;AAbF8D;;AAgBAA,2CAAsC,YAAW;AAC/C,WAAIsM,gBAAgB;AAClBC,iBADkB;AAElBC,eAFkB;AAGlBC,iBAAQ;AAHU,QAApB;;AAMA,cAAO,SAASzM,UAAT,uBAASA,CAAT,EAA6C,aAAY;AAC9D,gBAAOsB,UAAP;AADF,QAAO,CAAP;AAPFtB;;AAYAA,iCAA4B,cAAa;AACvC,WAAI0M,YAAYnL,GAAhB,QAAgBA,EAAhB;AACA,cAAO,SAASvB,KAAT,OAAqB,aAAY;AACtC,gBAAOb,mBAAmBA,gBAA1B;AADF,QAAO,CAAP;AAFFa;;AAOAA,sCAAiC,oDAI/B;AACA2M;AACA,WAAIC,aAAa5M,KAAjB,8BAAiBA,EAAjB;AACA,WAAI2J,gBAAgB3J,0BAApB,UAAoBA,CAApB;;AAEA/D,iBAEI+D,iEAFJ/D,IAEI+D,CAFJ/D,cAIe,aAAY;AACvBF,mCACEiE,kDADFjE,UACEiE,CADFjE;AALJE;;AAUA,+BAAwB;AACtBC,4BAAmB,kBAAiB;AAClC,eAAI2Q,SAAS,yBAAyB,aAAY;AAChD,oBAAO7M,mCAAmC8M,OAA1C,iBAAO9M,CAAP;AADF,YAAa,CAAb;AAGA,eAAI+M,cAAc7Q,eAAlB,IAAkBA,EAAlB;AACA,eAAI8Q,mBAAmBL,gBAAvB,IAAuBA,CAAvB;AACAK,gDAAqCF,OAArCE;AACA,eAAIC,iBAAiBD,uDAArB,IAAqBA,CAArB;AAGA9Q,+BAAoB,eAAc;AAChC+Q;AACAA,8CACE,MAAMJ,OAAN,GAAMA,CAAN,EAAmB,aAAY;AAC7B,sBAAO1N,EAAP;AADF,qBADF8N,IACE,CADFA;AAFF/Q;AAVFA;AADF,cAoBO;AACLA,+BAAsB,gBAAe;AACnC,eAAIgR,iBAAiBP,gBAArB,IAAqBA,CAArB;AACAO,8CAAmCzN,KAAnCyN;AACA,eAAIC,eAAeD,qDAAnB,IAAmBA,CAAnB;AAGAhR,8BAAmB,kBAAiB;AAClCiR,4CAA+BL,OAA/BK;AACAA,4CAGInN,sCAAsC8M,OAH1CK,iBAGInN,CAHJmN;AAFFjR;AANFA;AAeD;AAvDH8D;;AA0DAA,qCAAgC,YAAW;AACzC/D,iBAEI+D,iEAFJ/D,IAEI+D,CAFJ/D,cAIe,YAAW;AACtBA;AACA,aAAImR,cAAJ;;AAEA,aAAIC,iBAAiB7I,EAArB,IAAqBA,CAArB;AACA,aAAI6I,+BAAJ,MAAyC;AACvCA;AACAA;AACAD;AAHF,gBAIO;AACLC;AACAA;AACAD;AACD;AACDpN,wCACEqN,+BADFrN,QACEqN,EADFrN,EAEE,CAFFA,aAGE/D,UACE+D,6DAJJA,IAIIA,CADF/D,CAHF+D;AAlBJ/D;;AA2BAuI,SACExE,qDADFwE,IACExE,CADFwE,sBAEsB,iBAAgB;AACpC,aAAI8I,eAAe9I,EAAE+G,MAArB,aAAmB/G,CAAnB;AACA,aAAIwC,aAAasG,kBAAjB,SAAiBA,CAAjB;AACA,aAAIC,QAAQtR,UACV+D,qDADF,IACEA,CADU/D,CAAZ;AAGAsR,8CAEQ,8BAFRA;AAGA/I,WACExE,iEADFwE,IACExE,CADFwE;;AAIAxE,oDAEEwE,EACExE,iEADFwE,IACExE,CADFwE,kBAFFxE,MAQEuN,aACEvN,6DATJA,IASIA,CADFuN,CARFvN;AAfFwE;AA5BFxE;;AA0DA,wBAAmB;AACjBA;;AAEA,WAAIwN,uBAAuBvR,UACzB+D,qCADF,8BACEA,CADyB/D,CAA3B;;AAIAuR;;AAEA,WAAIC,cAAc,SAAdA,WAAc,SAAiB;AACjCvR,gBAAO,CAAC8D,KAAD,UAAgBA,KAAvB9D,KAAO,CAAPA,EAAoC,gBAAe;AACjDA,wBAAa,eAAc;AACzBwR;AADFxR;AADFA;AADF;;AAQA,WAAIyR,uBAAuB,SAAvBA,oBAAuB,SAAiB;AAC1C,aAAIC,QAAJ;AACA1R,gBAAO8D,KAAP9D,UAAsB,eAAc;AAClC,eAAIwR,IAAJ,OAAe;AACbE;AACD;AACDF;AAJFxR;AAMA2R;AACAjD;AACA5K;AACA9D,uBAAc,eAAc;AAC1BwR;AADFxR;AAXF;;AAgBA,WAAI4R,mBAAmB,CACrB,eAEE,YAAW;AACT,gBAAO9N,KAAP,oBAAOA,EAAP;AAHJ,gBADqB,qBACrB,CADqB,EASrB,iBAEE,YAAW;AACT,gBAAOA,KAAP,sBAAOA,EAAP;AAHJ,gBATqB,uBASrB,CATqB,EAiBrB,oBAEE,YAAW;AACT,gBAAO,0BACL,0BAA0B,aAAY;AACpC,kBAAOb,EAAP;AAFJ,UACE,CADK,CAAP;AAHJ,gBAjBqB,0BAiBrB,CAjBqB,EA6BrB,sBAEE,YAAW;AACT,gBAAO,4BACL,0BAA0B,aAAY;AACpC,kBAAOA,EAAP;AAFJ,UACE,CADK,CAAP;AAHJ,gBA7BqB,4BA6BrB,CA7BqB,EAyCrB,6BAEEjD,uBAFF,IAEEA,CAFF,QAzCqB,uBAyCrB,CAzCqB,EA+CrB,+BAEEA,uBAFF,KAEEA,CAFF,QA/CqB,yBA+CrB,CA/CqB,EAqDrB,0BAEEA,gCAFF,IAEEA,CAFF,QArDqB,uBAqDrB,CArDqB,EA2DrB,yBAEEA,gCAFF,KAEEA,CAFF,QA3DqB,uBA2DrB,CA3DqB,EAiErB,8BAEE,gBAAe;AACbD,8BAGI+D,+CAHJ/D;AAOA+D;AAVJ,UAYEA,KAZF,gBAjEF,oCAiEE,CAjEqB,CAAvB;;AAkFA,WAAI,CAACA,KAAL,UAAoB;AAClB8N,+BAAsB,uBAEpB,gBAAe;AACb9N,+BAAoB,CAACA,KAArBA;AACA/D,gCAGI+D,2CAHJ/D;AAKA+D;AATkB,YAWpB,YAAW;AACT,kBAAO,OAAOA,KAAP,OAAmB,aAAY;AACpC,oBAAOsB,EAAP;AADF,YAAO,CAAP;AAZkB,YAAtBwM,6BAAsB,CAAtBA;AAkBD;;AAEDA,gCAAyB,uBAAsB;AAC7C,aAAIC,mBAAmBpG,KAAvB,CAAuBA,CAAvB;AACA,aAAIA,KAAJ,CAAIA,CAAJ,EAAa;AACX,8CAEQA,KAFR,CAEQA,CAFR;AAIE;AAJF,wBAKe,aAAY;AACvBoG;AACA9R;AAPJ;AASD;AAZH6R;;AAeA,WAAIE,eAAe/R,UACjB+D,qCADF,cACEA,CADiB/D,CAAnB;;AAIA,WAAI,CAAC+R,aAAL,KAAKA,EAAL,EAA2B;AACzBA;AACAA,2HAIe,aAAY;AACvBC,0BAAe,IAAfA;AALJD;AASAA,6HAIe,aAAY;AACvBC,0BAAe,IAAfA;AALJD;AASAA,2HAIe,aAAY;AACvBE;AALJF;AASAA,0HAIe,aAAY;AACvBE,8BAAmB,CAAnBA;AALJF;;AAUA,aAAI,CAAChO,KAAL,UAAoB;AAClBgO,uLAKe,aAAY;AACvB9R,oBAAO8D,KAAP9D;AANJ8R;AAUD;;AAEDA;AAIE;AAJFA,sBAKe,aAAY;AACvBjS,qCAA0B,MAAMiE,KAAN,aAA1BjE;AANJiS;AAUD;;AAEDxJ,SAAExE,qCAAFwE,QAAExE,CAAFwE,6BAEE,WAAW,aAAY;AACrB,aAAI2J,eAAe3J,QAAnB,GAAmBA,EAAnB;AACAxE,qBACE,+BAEU,aAAY;AAClB,kBAAOsB,WAAP;AAHJ,gBAKO,aAAY;AACf,eAAIA,WAAJ,GAAkB;AAChB,iBAAIA,eAAeA,EAAEA,WAAFA,MAAnB,KAA2C;AACzC,sBAAO;AACLe,uBADK;AAELjC,wBAAO,WACL,MAAMkB,YAAYA,WAAlB,CAAMA,CAAN,GADK;AAFF,gBAAP;AAOD;AACD,iBAAIA,QAAJ,KAAiB;AACf,mBAAI8M,qBAAqBC,WAAW/M,SAApC,CAAoCA,CAAX+M,CAAzB;AACA,mBAAID,qBAAJ,GAA4B;AAC1B,wBAAO;AACL/L,yBADK;AAELjC,0BAAOgO;AAFF,kBAAP;AAID;AACF;AACF;AACD,kBAAO;AACL/L,mBADK;AAELjC,oBAAO;AAFF,YAAP;AA3BNJ,UACE,CADFA;AAFF,UAFFwE,GAEE,CAFFA;;AAwCAA,SAAExE,qCAAFwE,aAAExE,CAAFwE,eAEE,WAAW,aAAY;AACrBxE,gCAAuB,CAACA,KAAxBA;AACAA;AACAA;AAHF,UAFFwE,GAEE,CAFFA;;AASAA,SAAExE,qCAAFwE,qBAAExE,CAAFwE,eAEE,WAAW,aAAY;AACrB,aAAI,UAAUxE,KAAd,6BAAgD;AAC9C,kBAAOA,iCAAP,MAAOA,CAAP;AADF,gBAEO;AACLA,sDAA2CA,KAA3CA;AACD;;AAEDA;AAPF,UAFFwE,GAEE,CAFFA;;AAaAA,SACExE,iEADFwE,IACExE,CADFwE,eAIE,WAAW,aAAY;AACrBxE,+CAAsC,CAACA,KAAvCA;AACAsO,gDAEEtO,eAFFsO,cAEEtO,CAFFsO,EAGEtO,eAHFsO,mBAGEtO,CAHFsO;AAFF,UAJF9J,GAIE,CAJFA;AAaD;;AAED,SAAIpI,2BAAJ,MAAqC;AACnCmS,oBAAaxO,KAAbwO,uBAAaxO,CAAbwO;AADF,YAEO;AACL,WAAIA,cAAc,cAAlB,YAA4C;AAC1CA,sBAAaA,WAAbA,UAAaA,CAAbA;AACD;AACF;;AAED;AACAC,kBAAa,wBAAwB,gBAAe;AAClD,cAAO5N,cAAP;AADW,QAAb4N;AAGAxO,kBAAa,wBAAwB,gBAAe;AAClD,WACEY,aACA,OAAOZ,yBAAyBY,EAAhC,OAAOZ,CAAP,KAFF,aAGE;AACAkM;AACA;AACD;AACD;AARFlM,MAAa,CAAbA;AAUAA,kBAAa,wBAAwB,gBAAe;AAClD,cACEkM,gBAAgBtL,EAAhBsL,wBACAA,gBAAgBtL,EAAhBsL,WAFF;AADFlM,MAAa,CAAbA;AAMAA,kBAAa,eAAe,gBAAe;AACzCY,kBAAWsL,gBAAgBtL,EAA3BA,MAAWsL,CAAXtL;AACAA,kBAAWsL,gBAAgBtL,EAA3BA,MAAWsL,CAAXtL;AACAA;AACA;AAJFZ,MAAa,CAAbA;;AAOAyO,0BAAqBzO,KAArByO,OAAiCzO,KAAjCyO;;AAEAZ,oBAAe7N,KAAf6N;AACA7N,2BAAsB,gBAAe;AACnCA,4BAAqBsB,EAArBtB;AACAsB,uBAAgB,gBAAgB,aAAY;AAC1C,gBAAOhB,EAAP;AADFgB,QAAgB,CAAhBA;AAGA4I;AACA5I;AANFtB;;AASA,SAAI;AACF,WAAIC,WAAWA,QAAf,YAAeA,CAAf,EAAsC;AACpC,aAAIyO,qBAAqBzS,UACvB+D,qCADF,4BACEA,CADuB/D,CAAzB;;AAIAA,mBAEI+D,qCAFJ/D,4BAEI+D,CAFJ/D,2BAKQgE,sBALRhE,OAKQgE,CALRhE;AAQA;AACAyS;;AAEAzO,gDAAuC,uBAAsB;AAC3D;AACA,eAAI8N,mBAAmBpG,KAAvB,CAAuBA,CAAvB;AACA,eAAIzL,aAAayL,KAAjB,CAAiBA,CAAbzL,CAAJ,EAA2B;AACzByL,2BAAc,YAAdA,IAAc,CAAdA;AADF,kBAEO;AACL,gDAEQA,KAFR,CAEQA,CAFR,gCAIe,aAAY;AACvBoG;AACA9R;AANJ;AAQD;AAdHgE;;AAiBAhE,mBAEI+D,qCAFJ/D,4BAEI+D,CAFJ/D;AAKD;AAvCH,OAwCE,YAAY;AACZsD;AACD;;AAEDS,yCAAoC,YAAW;AAC7C,0BAAmB;AAAA,aA0HjB,eA1HiB,GA0HjB,4BAA4B;AAC1B,kBACE,CAACsB,kBAAkB,MAAMA,EAAN,YAAMA,CAAN,GAAlBA,OAAD,MAAwDA,EAD1D,OAC0DA,CAD1D;AAGD,UA9HgB;;AAgIjB;AACA;;AAhIA;;AAEA;AACA,aAAIqN,aAAa,SACfzS,MACEkQ,WADFlQ,uBACEkQ,CADFlQ,EAEE8D,KAHa,6BACf9D,CADe,EAKf,aAAY;AACV;AACA,kBACEoF,cACA,iBADAA,KAEAA,2BAHF;AAPJ,UAAiB,CAAjB;;AAeA,aAAIsN,eAAe,qBAAqB,aAAY;AAClD,kBACGtN,cAAcA,eAAf,CAACA,IACDA,0BAFF;AADF,UAAmB,CAAnB;;AAOA;;AAEApF,gBAAO,aAAPA,YAAO,CAAPA,EAAmC,gBAAe;AAChDA,wBAAa8D,KAAb9D;AADFA;;AAIA,aAAI2S,eAAe,SACjB,MAAMzC,WAAN,uBAAMA,CAAN,EAA2C,gBAAe;AACxD,yDAA8C;AAC5C,iBAAI0C,UAAJ;;AAEA5S,4BAAe,eAAc;AAC3BoF,kCAAmBrF,UAAnBqF,MAAmBrF,CAAnBqF;AACA,mBAAIyN,OAAO,MACT7S,QADS,4BACTA,CADS,EAET,YAAW;AACT;AAHJ,gBAAW,CAAX;AAMA8S,yBACS,IAAIvS,+BADbuS,CACS,CADTA,SAEU1N,EAFV0N,aAEU1N,CAFV0N;AAGA9S,8BAAe,aAAY;AACzB6S,sBAAK7H,WAAW8H,IAAhBD,CAAgBC,CAAX9H,CAAL6H;AADF7S;;AAIA,mBAAI+S,OAAOC,gBAAX;AACA,mBAAIC,OAAO,eAAe,gBAAe;AACvC,wBAAOC,IAAI,CAAC9O,IAAD,SAAcA,IAAzB,IAAW,CAAX;AADF,gBAAW,CAAX;;AAIA;;AAEA,mBAAI6O,OAAJ,SAAoB;AAClBL;AACAxN;AACD;AAzBHpF;AA2BD;;AAEDoF;AACA,eAAIA,UAAJ,UAAwB;AACtB,iBAAI4N,SAAS,SACX,MAAM9C,WAAN,OAAwB,cAAa;AACnC,sBAAOpM,uCAAP,IAAOA,CAAP;AAFS,cACX,CADW,EAIX,aAAY;AACV,sBAAOY,KAAP;AALJ,cAAa,CAAb;AAQA;AACAyO,0CAA6B,CAC3BpT,SAD2B,MAC3BA,EAD2B,EAE3BA,SAF2B,GAE3BA,EAF2B,EAG3BA,wBAAwB,IAHG,CAG3BA,CAH2B,EAI3BA,wBAJ2B,IAI3BA,CAJ2B,EAK3BA,wBAL2B,GAK3BA,CAL2B,EAM3BA,wBAAwB,IANG,CAM3BA,CAN2B,EAO3BA,wBAAwB,IAP1BoT,EAOEpT,CAP2B,CAA7BoT;AAVF,kBAmBO;AACL,iBAAI/N,UAAJ,QAAsB;AACpB,mBAAI4N,SAAS,SACX,MAAM9C,WAAN,OAAwB,cAAa;AACnC,qBAAI;AACF,uBAAIkD,SAAStP,oCAAb,CAAaA,CAAb;AACA;AACAuP,4DAGEvP,kBAHFuP,MAGEvP,CAHFuP;AAHF,mBAQE,YAAY;AACZA;AACD;AACD,wBAAOvP,oCAAP,CAAOA,CAAP;AAbS,gBACX,CADW,EAeX,aAAY;AACV,wBAAOY,8BAAP;AAhBJ,gBAAa,CAAb;AAmBA;AACA,mBAAIsO,iBAAJ,GAAwB;AACtB;AACA;AACD;AACDG,4CAA6B,CAACpT,QAA9BoT,KAA8BpT,EAAD,CAA7BoT;AACD;AACF;AACD;AAnFe,UACjB,CADiB,EAqFjB,aAAY;AACV,kBAAO/N,sBAAsBA,UAA7B;AAtFJ,UAAmB,CAAnB;;AAmGA,UACErF,UAAU+D,qCADZ,YACYA,CAAV/D,CADF,EAEEA,UACE+D,uDAHJ,IAGIA,CADF/D,CAFF,UAKU,aAAY;AACpB;;AAEA,eAAIuT,EAAJ,KAAIA,EAAJ,EAAe;AACb;AACD;AACDA;;AAEA,eAAIC,aAAa,CACf,CACE,eAAevT,UAAU8D,KAAV9D,8BAFF,IAEEA,CAAf,CADF,CADe,EAIf,CAAC,2BAJc,IAId,CAAD,CAJe,SAMf,eAAe,gBAAe;AAC5B,oBAAO,CACL,CACEwT,gBADF,CACEA,CADF,EAEEpO,EAFF,mBAEEA,CAFF,EAGEpF,UACE8D,KADF9D,8BAEEoF,EANN,mBAMMA,CAFFpF,CAHF,CADK,CAAP;AAPJ,YAME,CANe,CAAjB;;AAoBA,eAAI2S,aAAJ,QAAyB;AACvBY,0BAAa,kBACH,CAAC,CAAC,0BADC,IACD,CAAD,CAAD,CADG,SAGT,iBAAiB,gBAAe;AAC9B,sBAAO,CACL,CACEC,gBADF,CACEA,CADF,EAEEpO,EAFF,mBAEEA,CAFF,EAGEpF,UACE8D,KADF9D,6BAEEoF,EANN,mBAMMA,CAFFpF,CAHF,CADK,CAAP;AAJNuT,cAGI,CAHS,CAAbA;AAgBD;;AAED,eAAIE,WAAWH,uBAAf,UAAeA,CAAf;;AAEAG,6DAGuB,aAAY;AAC/B,oBAAOrO,WAAP;AAJJqO,oCAMyB,aAAY;AACjC,oBAAOrO,UAAU,CAAVA,mBAAP;AAPJqO;;AAUAA,wCAEQ,aAAY;AAChB;AAHJA,uCAOQ,mBAAkB;AACtB,oBAAOrO,EAAP,CAAOA,CAAP;AARJqO,4BAUiB,mBAAkB;AAC/B,iBAAIrO,QAAJ,WAAuB;AACvB,iBAAIsO,KAAJ,GAAY;AACV;AACD;AACD;AAfJD,4CAkBe,aAAY;AACvB,iBAAIrO,EAAJ,CAAIA,CAAJ,EAAU;AACRA;AACD;AArBLqO;AAhEF;;AAyFA,UACE1T,UAAU+D,qCADZ,QACYA,CAAV/D,CADF,UAEU,aAAY;AACpBuT;AACA,eAAIG,WAAW,uBACb,CACE,CAAC,eAAezT,UAAU8D,KAAV9D,0BADlB,IACkBA,CAAf,CAAD,CADF,SAGE,iBAAiB,gBAAe;AAC9B,oBAAO,CACL,CACEwT,gBADF,CACEA,CADF,EAEEpO,EAFF,mBAEEA,CAFF,EAGEpF,UACE8D,KADF9D,0BAEEoF,EANN,mBAMMA,CAFFpF,CAHF,CADK,CAAP;AALN,YAII,CAHF,CADa,CAAf;;AAmBAyT,+DAAoD,aAAY;AAC9D,oBAAOrO,UAAU,CAAVA,mBAAP;AADFqO;;AAIAA,wCAEQ,aAAY;AAChB;AAHJA,uCAOQ,mBAAkB;AACtB,oBAAOrO,EAAP,CAAOA,CAAP;AARJqO,4BAUiB,mBAAkB;AAC/B,iBAAIC,KAAJ,GAAY;AACV;AACD;AACD;AAdJD,4CAiBe,aAAY;AACvB,iBAAIrO,EAAJ,CAAIA,CAAJ,EAAU;AACRA;AACD;AApBLqO;AA3BF;;AAmDAnL,WACExE,qCADFwE,gBACExE,CADFwE,cAEc,aAAY;AACxB,eAAIxE,eAAJ,eAAIA,CAAJ,EAAqC;AACnCA,mDACEA,wCADFA,OACEA,EADFA;AAGAA;AACAA;AACD;AACDwE;AAVFA;;AAaAA,WACExE,qCADFwE,mBACExE,CADFwE,cAEc,aAAY;AACxB,eAAIxE,eAAJ,aAAIA,CAAJ,EAAmC;AACjCoM,iDAAoCpM,eAApCoM,aAAoCpM,CAApCoM,iBAGEA,oCACEpM,eADFoM,aACEpM,CADFoM,mBAHFA,OAGEA,EAHFA;AASApM,mCAAsB,uBAAsB;AAC1C6P,yCAA0BC,sCAExB9P,eAFF6P,aAEE7P,CAFwB8P,CAA1BD;AADF7P;AAMAA;AACAA;AACD;AACDwE;AAtBFA;;AAyBA,UACEvI,UAAU+D,qCADZ,SACYA,CAAV/D,CADF,UAEU,aAAY;AACpBuT;AACA,eAAIG,WAAW,uBACb,CACE,CAAC,eAAezT,UAAU8D,KAAV9D,0BADlB,IACkBA,CAAf,CAAD,CADF,SAGE,iBAAiB,gBAAe;AAC9B,oBAAO,CACL,CACEoF,EADF,OACEA,CADF,EAEEA,EAFF,mBAEEA,CAFF,EAGEpF,UACE8D,KADF9D,0BAEEoF,EANN,mBAMMA,CAFFpF,CAHF,CADK,CAAP;AALN,YAII,CAHF,CADa,CAAf;;AAmBAyT,+DAAoD,aAAY;AAC9D,oBAAOrO,UAAU,CAAVA,mBAAP;AADFqO;AAGAA,wCAEQ,aAAY;AAChB;AAHJA,uCAOQ,mBAAkB;AACtB,oBAAOrO,EAAP,CAAOA,CAAP;AARJqO,4BAUiB,mBAAkB;AAC/B,iBAAIC,KAAJ,GAAY;AACV;AACD;AACD;AAdJD,4CAiBe,aAAY;AACvB,iBAAIrO,EAAJ,CAAIA,CAAJ,EAAU;AACRA;AACD;AApBLqO;AA1BF;AAiDD;AAvWH3P;;AA0WA,qBAAgB;AACd;;;;;AAKA,WAAI,mBAAJ,YAAmC;AACjC,aAAI+P,gBAAgBxB,WAApB,eAAoBA,CAApB;;AAEA,aAAI,0BAA0BwB,8BAA9B,GAA+D;AAC7D3D,iDAAsC,yBAEhC,gBAAe;AACnB,oBAAO;AACLjK,sBADK;AAELE,qBAFK;AAGL6M,uBAHK;AAILc,sBAJK;AAKLC,sBAAO;AALF,cAAP;AAHF7D,YAAsC,CAAtCA;;AAYAA,oCAAyB,aAAY;AACnCjN,0CAA6BA,WAAW4Q,cAAxC5Q,WAAwC4Q,CAAX5Q,CAA7BA;AACAA,gDAAmC,gBAAe;AAChD,mBAAIV,IAAI2N,oCAAR,QAAoD;AAClD,qBAAI,EAAExL,KAAKwL,uCAAX,QAAWA,CAAP,CAAJ,EAA8D;AAC5DA,yEACEA,uCADFA,OACEA,CADFA;AAEAA;AACD;AACF;AACD;AARFjN;AAFFiN;;AAcAA,uDAA4C,aAAY;AACtD,iBACE9K,aAAa8K,iBAAb9K,UACAA,aADAA,KAEAA,cAHF,IAIE;AACAA;AACD;AAPH8K;AASD;AACF;;AAEDlQ,cAAO8D,KAAP9D,uCAAmD,yBAGjD;AACA,aAAIA,aAAJ,QAAIA,CAAJ,EAA4B;AAC1BgU,sBAAWA,SAAXA,IAAWA,CAAXA;AACD;;AAED,aACE,CAACA,SAAD,SAACA,CAAD,IACAhU,MAAMkQ,WAANlQ,uBAAMkQ,CAANlQ,EAA2CgU,SAF7C,SAE6CA,CAA3ChU,CAFF,EAGE;AACA,eAAIiU,YAAJ;AACAA;AACAjU,oBAASkQ,WAATlQ,uBAASkQ,CAATlQ;AACA8D;AACA9D,kBAAOkQ,WAAPlQ,OAAyB,gBAAe;AACtCqT,0DAGEW,sBAHFX,IAGEW,CAHFX;AADFrT;AAOD;AAvBHA;;AA0BA8D;;AAEA;AACD;;AAED,SAAIA,4BAAJ,sBAAsD;AACpD,WAAIoQ,eAAe,uBACZ,gBAAe;AAClB,gBAAO,IAAI3R,IAAX,CAAO,CAAP;AAFe,eAIX,gBAAe;AACnB,gBAAO2I,OAAOD,EAAd,CAAcA,CAAd;AALJ,QAAmB,CAAnB;;AAQA,YAAK,IAAIkJ,IAAT,GAAgBA,IAAID,sBAApB,2BAAqE;AACnEpQ,kCAAyBoQ,gBAAzBpQ,CAAyBoQ,CAAzBpQ;AACD;;AAEDsQ,wBACE,eACCF,sBADD,qDAGAA,aAAaC,IAAbD,GAHA,CAGAA,CAHA,oDADFE;AAQD;;AAEDtQ,wBAAmB,gBAAe;AAChCA,qBACEA,qBAAqBA,WAAWV,EAAXU,QADvBA,OACEA,CADFA,iBAEiBV,EAFjBU;AADFA;;AAMAA,2BAAsB,gBAAe;AACnCsB,qBAAcvF,wBAAwBuF,EAAtCA,SAAcvF,CAAduF;AADFtB;AAGA;;AAEAA;AACD;;AAED,mDAAgD;AAC9C,gBAAW;AACTwE;AACAvI,wEAGkCmE,SAHlCnE,sCAIiCmE,SAJjCnE,0BAKsBmE,SALtBnE;AAFF,YAQO;AACL,WAAIsU,eAAe/L,gBAAnB,QAAmBA,CAAnB;AACAgM,uCAAgCD,iCAAhCC;AACA,cAAOD,wBAAwBtU,GAAxBsU,aAAwCtU,GAA/C;AACD;AACF;;AAED,iDAA8C;AAC5CA;AACA,SAAIwU,gBAAgBjM,mBAApB,OAAoBA,CAApB;AACA,SAAIiM,cAAJ,QAA0B;AACxB,WAAIC,UAAUC,SAASnM,gBAAvB,WAAuBA,CAATmM,CAAd;AACA,WAAIC,WAAWC,MAAf;AACA,WAAIN,eAAe/L,gBAAnB,QAAmBA,CAAnB;AACA,WAAIsM,kBAAkBN,uBAAtB,OAAsBA,CAAtB;;AAEA;;AAEA,qBAAc;AACZ,aAAItU,aAAJ,QAAIA,CAAJ,EAA4B;AAC1B6U,2BAAgB,0BAAY;AAC1B,oBAAOH,SAAP,CAAOA,CAAP;AADFG;AADF,gBAIO;AACLA,2BAAgB,0BAAY;AAC1B,iBAAIC,MAAM1M,EAAV,QAAUA,CAAV;AACA,iBAAIpI,aAAJ,GAAIA,CAAJ,EAAuB;AACvB;AAHF6U;AAKD;AAXH,cAYO;AACLA,yBAAgB,0BAAY;AAC1B;AADFA;AAGD;;AAED9U,iBACUwU,cADVxU,CACUwU,CADVxU,uCAIQ,gBAAe;AACnB,gBAAO6U,gBACLC,cAAc3J,EADT0J,OACS1J,CAAd2J,CADKD,EAELC,cAAc5J,EAFhB,OAEgBA,CAAd4J,CAFKD,CAAP;AALJ7U;;AAWA;;AAEAuI,8DAEU,YAAW;AACjB,gBAAOmM,SAASnM,aAATmM,WAASnM,CAATmM,KAAP;AAHJnM,eAKQ,YAAW;AACfgM;AANJhM;AAQD;AACF;;AAED,6CAA0C;AACxC,SAAIyM,WAAWhV,UAAf,IAAeA,CAAf;AACA,SAAIiV,gBACF,OAAOxS,KAAP,uBAAmCA,KAAnC,KAAmCA,EAAnC,GAAkDA,KADpD;;AAGA,SAAI,cAAJ,MAAwB;AACtBA;AADF,YAEO;AACL,WAAIyS,OAAO,mBAAmBzS,YAAnB,aAAmBA,CAAnB,GAAX;AACA,WAAI,UAAJ,MAAoBuS,cAApB,IAAoBA,EAApB,KACKA;AACL,WAAI,UAAJ,MAAoB;AAClB,aAAIG,UAAU,uDAGC,aAAY;AACvBC;AAJU,mEAAd,KAAc,CAAd;AAQAD;AAID;AACF;AACD,SAAI,UAAJ,MAAoB;AAClBH,8BAAuBvS,KAAvBuS;AACD;AACF;;AAED,yEAAsE;AACpE,SAAIK,QAAQjO,oBAAZ,OAAYA,CAAZ;AACA,SAAIiO,iBAAJ,WAAgC;AAC9BA;AACAA,eAAQjO,iBAARiO,OAAQjO,CAARiO;AACAA,qFAMQ,aAAY;AAChB;AAPJA,oCAWQ,qBAAoB;AACxB,gBAAO,eAAe,gBAAe;AACnCC;AADF,UAAO,CAAP;AAZJD;AAgBD;;AAED,SAAIE,QAAQnO,oBAAZ,OAAYA,CAAZ;AACA,SAAImO,iBAAJ,WAAgC;AAC9BA;AACAA,eAAQnO,iBAARmO,OAAQnO,CAARmO;AACAA,qFAMQ,aAAY;AAChB;AAPJA,oCAWQ,qBAAoB;AACxB,gBAAO,eAAe,gBAAe;AACnCpO;AACAmO;AAFF,UAAO,CAAP;AAZJC;AAiBD;AACF;;AAED,qDAAkD;AAChD,SAAIzQ,YAAY9E,UAAhB,OAAgBA,CAAhB;AACA8E;AACA,SAAI0Q,iBAAiBxQ,QAArB,CAAqBA,CAArB;AACA,SAAI+F,aAAa/F,QAAjB,CAAiBA,CAAjB;;AAEA,yBAAoB;AAClB;AACA;;AAEA,WAAIA,WAAJ,UAAyB;AACvBF;AAID;AACDA;;AAEAA,8GAIe,aAAY;AACvBf,8BAAqBiB,QAArBjB,CAAqBiB,CAArBjB;AALJe;AAZF,YAmBO;AACLA;AACAA,8GAIe,aAAY;AACvBf;AALJe;AAOD;AACDA,qIAOIf,qDAPJe,IAOIf,CAPJe;AAUD;;AAED,0DAAuD;AACrD,SAAIA,YAAY9E,UAAhB,OAAgBA,CAAhB;AACA,SAAIyV,SAAS,CAAC,CAACzQ,wBAAD,YAAd,CAAc,CAAD,CAAb;AACA,SAAIA,QAAJ,CAAIA,CAAJ,EAAgB;AACdyQ,mBAAY,gBAAZA,CAAY,CAAZA;AACD;AACD,SAAIzQ,QAAJ,CAAIA,CAAJ,EAAgB;AACdyQ,mBAAY,UAAZA,CAAY,CAAZA;AACD;AACD,SAAIxQ,UAAUH,mCAAd,MAAcA,CAAd;AACAG;AACAA;AACAA,0DAEQ,aAAY;AAChB,cAAOI,EAAP,CAAOA,CAAP;AAHJJ,yBAKoB,aAAY;AAC5B,cAAOI,oBAAP;AANJJ,oBAQe,aAAY;AACvB,WAAII,QAAJ,GAAe;AACb,aAAIL,QAAJ,CAAIA,CAAJ,EAAgB;AACd0Q,0BACE3R,cAAciB,QAAQA,iBAARA,KADhB0Q,CACE3R,CADF2R;AADF,gBAKO;AACLC,4BAAiB5R,cAAciB,QAAQA,iBAARA,KAA/B2Q,CAAiB5R,CAAjB4R;AACD;AACD5R,uCAA8BA,KAA9BA;AACA,aAAIA,KAAJ,kBAA2B;AACzBA,yCAA8BA,KAA9BA;AACD;AACF;AAtBLkB;AAwBD;;AAED,yEAAsE;AACpE;;;;;;;;;;AAUA,SAAI2Q,eAAJ;AACA,SAAIC,YAAJ;;AAEAD,0BAAqB,aAAa,gBAAe;AAC/CC,iBAAUxR,EAAVwR;AACA,qBAAc;AACZ;AACD;AACD,WAAIlI,KAAK1N,QAAT,CAASA,CAAT;AACA0N;AACA;AAPFiI,MAAqB,CAArBA;;AAUAE,kBAAaA,cAAbA;;AAEAF,0BAAqB,SAASE,WAAT,OAA2B,aAAY;AAC1D,cACEA,iBAAiBzS,EAAjByS,2BACAA,iBAAiBzS,EAAjByS,cAFF;AADFF,MAAqB,CAArBA;;AAOA,iBAAY;AACVA,4BAAqB3V,SAAS2V,aAAT3V,OAArB2V,MAAqB3V,CAArB2V;AACD;;AAEDA,0BAAqB,MAAMA,aAAN,OAA0B,aAAY;AACzD,WAAIG,KAAK9V,QAAT,CAASA,CAAT;AACA8V,mBAAYF,UAAUC,iBAAiBzS,EAAjByS,QAAtBC,EAAYF,CAAZE;AACAA,mBAAYF,UAAUC,iBAAiBzS,EAAjByS,QAAtBC,EAAYF,CAAZE;AACA;AAJFH,MAAqB,CAArBA;;AAOA;AACD;;AAED,uDAAoD;AAClD,SAAI9Q,YAAY9E,UAAhB,OAAgBA,CAAhB;AACA,SAAIyV,SAAS,CACXzQ,sBACI/E,WAAW+E,QAAX/E,CAAW+E,CAAX/E,IACE,CAAC+E,QAAD,CAACA,CAAD,KADF/E,aACE,CADFA,GAEE,mBAHN+E,CAGM,CAHNA,GAII,CAACA,sBAAD,QALN,CAKM,CALO,CAAb;;AAQA,SAAIA,uBAAuBA,cAA3B,GAA4C;AAC1CyQ,mBAAY,iBAEV,YAAW;AACT1R,sCAA6BiB,QAA7BjB,CAA6BiB,CAA7BjB;AAHJ0R,QAAY,CAAZA;AAMD;;AAED,SAAIxQ,UAAUH,mCAAd,MAAcA,CAAd;AACAG;AACAA;AACAA;AAGE;AAHFA,WAIQ,aAAY;AAChB,cAAOI,EAAP,CAAOA,CAAP;AALJJ,yBAOoB,aAAY;AAC5B,cAAOI,QAAQ,CAACpF,aAAaoF,EAAtBA,CAAsBA,CAAbpF,CAAToF,gBAAP;AARJJ,oBAUe,aAAY;AACvB,WAAIhF,aAAaoF,EAAjB,CAAiBA,CAAbpF,CAAJ,EAAwB;AACtBoF;AADF,cAEO;AACL,aAAIA,QAAJ,GAAe;AACb,eAAIL,QAAJ,CAAIA,CAAJ,EAAgB;AACd2Q,8BACE5R,cAAciB,QAAQA,iBAARA,KADhB2Q,CACE5R,CADF4R;AADF,kBAKO;AACLD,4BAAe3R,cAAciB,QAAQA,iBAARA,KAA7B0Q,CAAe3R,CAAf2R;AACD;AACD;AACA3R,yCAA8BA,KAA9BA;AACD;AACF;AA1BLkB;AA4BAA,kBAAa,gBAAe;AAC1B,WAAII,YAAJ,GAAmB;AACjBrF,+DAAsDqF,EAAtDrF,CAAsDqF,CAAtDrF;AACD;AAHHiF;AAKD;;AAEDlB,mCAAgC,qBAAoB;AAClDqD,sCAEU,gBAAe;AACrB,cAAO,cAAP;AAHJA,aAKQ,gBAAe;AACnBkO;AANJlO;AADFrD;;AAWAA,0BAAuB,oCAAmC;AACxD,SAAIA,KAAJ,YAAqB;AACnBiS,mBAAYA,aAAajS,KAAzBiS;;AAEA,WAAIC,UAAU,CACZ,CACE;AACE9R,gBADF;AAEEC,eAFF;AAGEE,eAAM;AAHR,QADF,EAME;AACEH,gBADF;AAEEC,eAAM;AAFR,QANF,EAUE;AACED,gBADF;AAEEC,eAFF;AAGEE,eAAM;AAHR,QAVF,EAeE;AACEH,gBADF;AAEEC,eAFF;AAGEE,eAAM;AAHR,QAfF,CADY,CAAd;;AAwBA,0BAAmB;AACjBrE,+BAAsB,aAAY;AAChCgW,2BAAgB5Q,EAAhB4Q;AADFhW;AAGD;;AAED,WAAIiW,OAAO,cAAc,gBAAe;AACtC,aAAIC,WAAW,CACb;AACEhS,kBAAOjB,EADT;AAEEoB,iBAAM;AAFR,UADa,EAKb;AACEH,kBAAO,iBAAW;AAChB,iBAAIjB,gBAAJ,YAAgC;AAC9B,mBAAI;AACF,qBAAIa,yBAAyBb,EAA7B,OAAIa,CAAJ,EAAyC;AACvC;AACA;AACA,0BAAO,CAACb,EAAR,OAAO,CAAP;AACD;AACD,wBAAO,CACL,CAACa,cAAcA,qBAAqBb,EAAnCa,OAAcA,CAAdA,EADI,WAELb,EAFF,OAAO,CAAP;AANF,iBAUE,YAAY;AACZ,wBAAO,CAAC,CAAR,CAAO,CAAP;AACD;AAbH,oBAcO;AACL,sBAAO,CAACA,EAAR,eAAO,CAAP;AACD;AAlBL;AAoBE2B,qBApBF;AAqBEwB,qBAAU;AArBZ,UALa,EA4Bb;AACElC,kBAAO,gBAAgBjB,EAAhB,SADT;AAEEoB,iBAAM;AAFR,UA5Ba,EAgCb;AACEH,kBAAO,iBAAiBjB,EAAjB,UADT;AAEEoB,iBAAM;AAFR,UAhCa,CAAf;;AAsCA,4BAAmB;AACjBrE,iCAAsB,cAAa;AACjCkW,2BAAcC,gBAAdD,IAAcC,CAAdD;AADFlW;AAGD;AACD;AA5CF,QAAW,CAAX;;AA+CAoW,4BACEtS,KADFsS,2BAIE;AACA;AALFA;AAOD;AAxFHtS;;AA2FAA,6BAA0B,mEAKxB;AACAuS,eAAUA,WAAWvS,KAArBuS;AACA,kBAAa;AACX,WAAIL,UAAU,CACZ,CACE;AACE9R,gBADF;AAEEC,eAAM,iBAAY;AAChB,kBAAO,MAAMC,iBAAN,GAAMA,CAAN,EAA6B,cAAa;AAC/C,oBAAOrD,wBAAwB,CAA/B,EAAOA,CAAP;AADK,mBAAP,GAAO,CAAP;AAHJ;AAOEsD,eAAM;AAPR,QADF,EAUE;AACEH,gBADF;AAEEC,eAFF;AAGEE,eAAM;AAHR,QAVF,EAeE;AACEH,gBADF;AAEEC,eAFF;AAGEE,eAAM;AAHR,QAfF,CADY,CAAd;;AAwBA,WAAI,CAACP,KAAL,SAAmB;AACjBkS,sBAAa;AACX9R,kBADW;AAEXK,iBAAM;AAFK,UAAbyR;;AAKAA,sBAAa;AACX9R,kBADW;AAEXG,iBAFW;AAGXE,iBAAM;AAHK,UAAbyR;AAKD;;AAED,0BAAmB;AACjBhW,+BAAsB,aAAY;AAChCgW,2BAAgB5Q,EAAhB4Q;AADFhW;AAGD;;AAED,WAAIiW,OAAJ;;AAEAjW,cAAO8D,KAAP9D,UAAsB,mBAAkB;AACtC,aAAIsW,WAAW,SAAXA,QAAW,mBAA2B;AACxC,eAAIJ,WAAW,CACb;AACEhS,oBAAO,CAACkB,EAAD,2BADT,CACS,CADT,EAC2C;AACzCR,uBAAU2R;AAFZ,YADa,EAKb;AACErS,oBAAO,iBAAW;AAChB,mBAAIsS,iBAAiBC,gBAAgBrR,EAAhBqR,iBAArB;;AAEA,sBAAO,CACLD,eADK,WAELA,eAFK,aAGLA,eAHK,cAILA,eAJF,UAAO,CAAP;AAJJ;AAWE5R,uBAXF;AAYEwB,uBAAU;AAZZ,YALa,EAmBb;AACElC,oBAAOkB,WAAWsR;AADpB,YAnBa,CAAf;;AAwBA,eAAI,CAAC5S,KAAL,UAAoB;AAClBoS,2BAAc;AACZhS,sBAAOkB,EADK;AAEZX,uBAAQ,mBAAY;AAClB,qBAAI;AACF,0BACEhE,oBAAoB2E,EAApB3E,MAAoB2E,CAApB3E,WAEAA,oBAAoB2E,EAFpB3E,QAEoB2E,CAApB3E,CAFAA,UAIAA,oBAAoB2E,EAJpB3E,IAIoB2E,CAApB3E,CAJAA,WAMAA,oBAAoB2E,EANpB3E,IAMoB2E,CAApB3E,CANAA,GADF;AADF,mBAWE,UAAU;AACV;AACD;AACF;AAjBW,cAAdyV;AAmBAA,2BAAc;AACZhS,sBAAOkB,EADK;AAEZX,uBAAQ,mBAAY;AAClB,qBAAI;AACF,0BACEhE,oBAAoB2E,EAApB3E,MAAoB2E,CAApB3E,WAEAA,oBAAoB2E,EAFpB3E,QAEoB2E,CAApB3E,CAFAA,UAIAA,oBAAoB2E,EAJpB3E,IAIoB2E,CAApB3E,CAJAA,WAMAA,oBAAoB2E,EANpB3E,IAMoB2E,CAApB3E,CANAA,GADF;AADF,mBAWE,UAAU;AACV;AACD;AACF;AAjBW,cAAdyV;AAmBD;AACD,8BAAmB;AACjBlW,mCAAsB,cAAa;AACjCkW,6BAAcC,gBAAdD,IAAcC,CAAdD;AADFlW;AAGD;;AAED;AAvEF;;AA0EA,aAAI,CAAJ,eAAoB;AAClBiW,qBAAUK,kBAAVL,KAAUK,CAAVL;AACD;;AAED,aAAI,CAAJ,kBAAuB;AACrBjW,kBAAOwE,QAAPxE,aAA4B,uBAAsB;AAChDiW,uBAAUK,sBAAVL,IAAUK,CAAVL;AADFjW;AAGD;AAnFHA;;AAsFAoW;AACD;AA5IHtS;;AA+IA;AACA,0DAAuD;AACrD,gCAA2B;AACzB,WAAI6S,iBAAiB,SAAS7S,KAAT,UAAwB,aAAY;AACrD,gBAAO,CAACM,EAAR;AADiB,UAArB;AAAA,WAGEwS,mBAAmB9S,4BAA4BA,cAHjD;AAAA,WAIE+S,gBACE3G,uCAAuCpM,WAL3C;;AAOA,WAAIgT,oBAAoB,SAAShT,KAAT,UAAwB,aAAY;AAC1D,gBACE,CAACM,EAAD,aAAgBA,mBAAhB,aAAgDA,iBADlD;AADsB,UAAxB;;AAMA,WAAI2S,iBAAiB,SAASjT,KAAT,OAAqB,aAAY;AACpD,gBAAOb,kBAAkB,CAACA,EAA1B;AADmB,UAArB;;AAIA;;;;;;;AAOA,WAAIgG,IACF,2BACAnF,cADA,oKAOAA,WAPA,uJAaAA,WAbA,uBAeCA,0BAfD,kEADF;;AAqBA/D;AACD;AACF;;AAED,yCAAsC;AACpC,eAAU;AACRoH,mBAAYpH,UAAZoH,SAAYpH,CAAZoH;;AAEA,WAAI6P,cACFzT,oBAAoB,CAACA,KAArBA,oBAEIA,iCAAiCO,2BAHvC,IAGuCA,CAHvC;;AAKAP,4BAAqByH,UAAUiM,UAAVjM,IAAUiM,CAAVjM,QAArBzH;;AAEA4D,2BACavH,8BAA8BqX,UAD3C9P,IAC2C8P,CAA9BrX,CADbuH,mDAG8B,aAAY;AACtC,gBAAO/B,EAAP;AAJJ+B,qCAM8B,aAAY;AACtC,gBAAO/B,gBAAP;AAPJ+B,4BASqB,aAAY;AAC7B,gBAAO,eAAe/B,EAAf,UAA2BA,EAA3B,IAAP;AAVJ+B,wBAYiB,aAAY;AACzB,gBAAO+P,WAAP,CAAOA,CAAP;AAbJ/P,2BAeoB,aAAY;AAC5B,gBAAOgQ,aAAP,CAAOA,CAAP;AAhBJhQ,2BAkBoB,aAAY;AAC5B,aAAI/B,EAAJ,WAAiB;AACjB;AApBJ+B,wGAyBQuH,sCAzBRvH,YAyBQuH,CAzBRvH;AA0BD;AACF;;AAED,mDAAgD;AAC9C,SAAIiQ,kBAAkBrX,UAAtB,SAAsBA,CAAtB;;AAEA,SAAIsX,YAAY,mCACZ,qCAAqC,aAAY;AAC/C,cAAOjS,SAAS,CAAhB,CAAgB,CAATA,CAAP;AAFU,MACZ,CADY,GAIZ,CAAC,UAJL,CAIK,CAAD,CAJJ;;AAMA,SAAIuO,YAAJ,cAA8B;AAC5B0D,mBAAYA,iBAAiB,CAC3B,aAAa1D,YAAb,cAD2B,CAC3B,CAD2B,EAE3B,iBAEEA,8BAA8BA,YAFhC,cAFF0D,CAEE,CAF2B,CAAjBA,CAAZA;AAQD;;AAED,SAAIC,OAAO,CACT,OACE,iBAAiB,aAAY;AAC3B,cAAOlS,QAAP;AAFJ,MACE,CADF,EAIE,aAAY;AACV,cAAOA,EAAP,CAAOA,CAAP;AANK,MACT,CADS,EAST,OACE,iBAAiB,aAAY;AAC3B,cAAOA,QAAP;AAFJ,MACE,CADF,EAIE,aAAY;AACV,cAAOA,EAAP,CAAOA,CAAP;AAdN,MASE,CATS,CAAX;;AAmBA,SAAImS,iBAAiB,IAArB,CAAqB,CAArB;;AAEAF,iBAAY,cAAc,aAAY;AACpC,WAAIvD,QAAQ1O,EAAZ,CAAYA,CAAZ;AACA,WAAIV,IAAI;AACNyC,oBADM;AAEN3C,kBAFM;AAGNgT,qBAAYD,wBAAwBD,KAAxBC,KAAwBD,CAAxBC,OAA0CvM,KAHhD;AAINyM,mBAAU,CAACF,wBAAwBnS,EAAzB,CAAyBA,CAAzB,IAAiCkS,KAAjC,KAAiCA,CAAjC,OAAmDtM,KAJvD;AAKN0M,eAAMtS,EALA,CAKAA,CALA;AAMNuS,cAAK7D,QAAQ;AANP,QAAR;AAQAyD,gCAAyBnS,EAAzBmS,CAAyBnS,CAAzBmS;AACA;AAXFF,MAAY,CAAZA;;AAcA,SAAIO,aAAaC,gCAAjB;AACAlE,iCAA4BiE,aAA5BjE;AACA,SAAImE,QAAQV,uCAAZ,SAAYA,CAAZ;AACAU;AACAA;;AAEAA,qEAEoC,aAAY;AAC5C,cAAOnE,2BAA2B,CAACvO,EAAnC;AAHJ0S,sCAKiC,aAAY;AACzC,cAAO1S,EAAP;AANJ0S,kBAQa,aAAY;AACrB,cAAO,CAAC1S,QACJrF,yBAAyB6X,aAAzB7X,eAAqD6X,aADjDxS,CACJrF,CADIqF,GAEJrF,wCAFG,UAEHA,CAFG,EAAP,CAAO,CAAP;AATJ+X,sBAaiB,gBAAe;AAC5B,cAAO1S,QACHtB,2BAA2BsB,EADxBA,IACHtB,CADGsB,GAEHuO,0BACE,UAAUA,YAAV,UAAUA,CAAV,GADFA,MAEEoE,2BAA2B3S,EAJjC,IAIM2S,CAJN;AAdJD,iCAoB4B,gBAAe;AACvC,cAAOT,iCAAP;AArBJS,yBAuBoB,aAAY;AAC5B,WAAInE,YAAJ,WAA2B;AAC3B;AAzBJmE;AA2BD;;AAED,gDAA6C;AAC3C;;AAEA,SAAIE,UAAJ,4BAA0C;AACxC,WAAIC,SAASjY,WAEXkQ,2DAFF,MAAalQ,CAAb;;AAKA,cAAO;AACLiY,iBADK;AAELlE,gBAAO,cAAc,aAAY;AAC/B,kBAAOnS,mCAELsO,2DAFF,CAEEA,CAFKtO,CAAP;AADK;AAFF,QAAP;AANF,YAcO;AACL,cAAO;AACLqW,iBAAQjY,WAENkQ,4CAHG,SACGlQ,CADH;AAKL+T,gBAAOvT;AALF,QAAP;AAOD;AACF;;AAEDsD,mCAAgC,kBAAiB;AAC/C,SAAIoU,WAAJ;;AAEA,wBAAmB,eAAc;AAC/BnY,iBACU+D,qCADV/D,GACU+D,CADV/D,+CAIiB,gBAAe;AAC5B,aAAIqF,QAAJ,QAAoB;AAClB8S,sBAAW9S,EAAX8S,CAAW9S,CAAX8S;AACA;AACD;AACD;AATJnY;AAWAA,iBACU+D,qCAAqCqU,MAD/CpY,QACU+D,CADV/D,OAEQ,uBAFRA;AAZF;;AAiBA,iBAAY;AACV,WAAIqY,eAAeC,4BAAnB,MAAmBA,CAAnB;;AAEA,WAAIC,eAAevY,0BAETqY,aAFSrY,QAETqY,CAFSrY,QAGVqY,aAHT,OAGSA,CAHUrY,CAAnB;AAIA+D;AACAA,oCAA6B,aAAY;AACvC,gBAAOwU,aACLpI,yDACEpM,mCAFJ,MAEIA,CADFoM,CADKoI,CAAP;AADFxU;AAOAA,0CACEoM,4CADFpM,WACEoM,CADFpM;AAfF,YAiBO;AACLA;AACAA,iCAA0B,YAAW;AACnC;AADFA;AAGAA;AACD;AACD;AACAA;AACAA;AACA/D;AA/CF+D;;AAkDAA,gCAA6B,YAAW;AACtCA;;AAEA,SAAIyU,SAAJ;;AAEA,SAAIzU,KAAJ,gBAAyB;AACvBA,qDAEqB,0BAFrBA,2DAKQA,KALRA;AAOAyU;AACD;;AAED,SAAIzU,KAAJ,aAAsB;AACpBA,qDAEqB,0BAFrBA,2DAKQA,iBALRA,SAKQA,CALRA;AAOAyU;;AAEAvY,cAAO8D,iBAAP9D,OAAO8D,CAAP9D,EAAkC,sBAAqB;AACrD8D,yFAGqB,2BAHrBA;;AAOAI,oBACEJ,gFAGqB,0BAHrBA,yGADFI,IACEJ,CADFI;;AAaAqU;AArBFvY;AAuBD;;AAED,SAAI8D,eAAJ,aAAIA,CAAJ,EAAmC;AACjC;AACA;;AAEAA,qDAEqB,0BAFrBA,2DAKQ,YAAYA,eALpBA,aAKoBA,CALpBA;AAOAyU;;AAEA,WAAIzU,eAAJ,YAAIA,CAAJ,EAAkC;AAChC,aAAI0U,gBACFtI,oCAAoCpM,eAApCoM,aAAoCpM,CAApCoM,oDAIInQ,UALN,MAKMA,CALN;AAMA,aAAI0Y,QACFvI,oCAAoCpM,eAApCoM,aAAoCpM,CAApCoM,EADF,OACEA,CADF;;AAKAlQ,gBAAOA,QAAPA,4BAAOA,CAAPA,EAA8C,iBAAgB;AAC5D,eAAIoI,IAAIqQ,aAAR,KAAQA,CAAR;AACA3U,2FAGqB,2BAHrBA,yBAKQ0U,cALR1U,CAKQ0U,CALR1U;AAMAA,2FAGqB,0BAHrBA,4GASiBA,2BATjBA,CASiBA,CATjBA;;AAWAyU;AAnBFvY;;AAsBA8D,yFAGqB,2BAHrBA;AAMAA,yFAGqB,0BAHrBA;;AAWAyU;AAnDF,cAoDO;AACLvY,gBAAO8D,qCAAP9D,KAAO8D,CAAP9D,EAAoD,sBAGlD;AACA8D,2FAGqB,2BAHrBA;AAMAA,2FAGqB,0BAHrBA,4GASiBA,2BATjBA,GASiBA,CATjBA;;AAWAyU;AArBFvY;AAuBD;AACF;;AAED,SAAI8D,iBAAJ,IAAIA,CAAJ,EAA4B;AAC1BA,qDAEqB,0BAFrBA,2DAKQ,YAAYA,iBALpBA,IAKoBA,CALpBA;AAOAyU;;AAEA,WAAIH,eAAeC,4BAA4BvU,iBAA/C,IAA+CA,CAA5BuU,CAAnB;AACA,WAAIC,eAAevY,0BAETqY,aAFSrY,QAETqY,CAFSrY,QAGVqY,aAHT,OAGSA,CAHUrY,CAAnB;;AAKAC,cAAO8D,uCAAP9D,KAAO8D,CAAP9D,EAAsD,sBAGpD;AACA8D,yFAGqB,2BAHrBA;;AAOAA,yFAGqB,0BAHrBA,mEAMalE,YAAY0Y,aAAZ1Y,KAAY0Y,CAAZ1Y,OANbkE,GAMalE,CANbkE;;AAUAyU;AArBFvY;AAuBD;;AAED,SAAI8D,eAAJ,YAAIA,CAAJ,EAAkC;AAChCA,qDAEqB,0BAFrBA,2DAKQ,cAAcA,eALtBA,YAKsBA,CALtBA;AAOAyU;;AAEA,WAAIC,gBACFtI,oCAAoCpM,eAApCoM,YAAoCpM,CAApCoM,oDAIInQ,UALN,MAKMA,CALN;AAMA,WAAI0Y,QACFvI,oCAAoCpM,eAApCoM,YAAoCpM,CAApCoM,EADF,OACEA,CADF;;AAKAlQ,cAAOA,QAAPA,4BAAOA,CAAPA,EAA8C,iBAAgB;AAC5D,aAAIoI,IAAIqQ,aAAR,KAAQA,CAAR;AACA3U,yFAGqB,2BAHrBA,yBAKQ0U,cALR1U,CAKQ0U,CALR1U;AAMAA,yFAGqB,0BAHrBA,sIAUoBA,0BAVpBA,CAUoBA,CAVpBA;;AAYAyU;AApBFvY;;AAuBA8D,uFAGqB,2BAHrBA;AAMAA,uFAGqB,0BAHrBA;;AAYAyU;AACD;AAvPHzU;;AA0PA,sDAAmD;AACjD,iBAAY;AACV,WAAIuB,KAAKvB,yCAAyCA,KAAlD,WAAkDA,EAAlD;AACA,WAAI4U,WAAW5U,uEAAf,EAAeA,CAAf;AAIA,WAAIkP,SAAS,MAAMxO,QAAN,UAAwB,gBAAe;AAClD,aAAIN,QAAQJ,sCAAZ,MAAYA,CAAZ;AACA,gBAAOI,sCAAP;AAFW,eAGL,gBAAe;AACrB,gBAAO,SAAS,IAAhB,CAAO,CAAP;AAJF,QAAa,CAAb;AAMA,WAAIyU,SAAS,iBAAiB,aAAY;AACxC,gBAAOvT,IAAP;AADF,QAAa,CAAb;AAGA,WAAIwT,WAAW5F,gBAAgB2F,OAA/B;;AAEA,qBAAc;AACZD;AAIAA,gDAEkB,KAAKE,WAAW5F,OAAX4F,SAAL,MAFlBF;AAID;;AAED1Y,sBAAe,wBAAuB;AACpC0Y,gDAII,KAAK,CAAC,YAAD,kBAA+B1F,OAApC,SAJJ0F,wBAMsB5U,2BANtB4U,KAMsB5U,CANtB4U;AADF1Y;AASA;;AAEA;AACD;AACD;AACD;;AAED8D,mCAAgC,kBAAiB;AAC/C,SAAIoU,WAAJ;;AAEA,yBAAoB,eAAc;AAChCnY,iBACU+D,qCADV/D,GACU+D,CADV/D,+CAIiB,gBAAe;AAC5B,aAAIqF,QAAJ,QAAoB;AAClB8S,sBAAW9S,EAAX8S,CAAW9S,CAAX8S;AACA;AACD;AACD;AATJnY;AAWAA,iBACU+D,qCAAqCqU,MAD/CpY,QACU+D,CADV/D,OAEQ,yBAFRA;AAZF;;AAiBAA,eACU+D,qCADV/D,gBACU+D,CADV/D,mBAEoBmY,8BAFpBnY;;AAMA+D;AACA,iBAAY;AACV,WAAI2U,QAAQvI,4CAAZ,OAAYA,CAAZ;AACApM,yCAAkC/D,yBAExB,IAAIQ,+BAFoBR,CAExB,CAFwBA,QAGzB,OAHT+D,CAGS,CAHyB/D,CAAlC+D;AAIAA,mCAA4B,aAAY;AACtC,aAAIY,KAAJ,iBAA0B;AACxB;AACD;AACD,gBAAOZ,gCAAgC2U,MAAvC,CAAuCA,CAAhC3U,CAAP;AAJFA;AANF,YAYO;AACLA;AACAA;AACD;;AAEDA;AACAA;AACA/D;AA9CF+D;;AAiDAA,sCAAmC,kBAAiB;AAClD,SAAIoU,WAAJ;;AAEAW;AACAzG;;AAEAtO;;AAEAA,2BAAsB,uBAAsB;AAC1C,cAAO6P,YAAP,mBAAOA,CAAP;AACA,cAAOA,YAAP,UAAOA,CAAP;AAFF7P;;AAKA,MAAC,eAAD,KAAC,CAAD,EAAwB,mBAAxB,IAAwB,CAAxB,UAA0D,eAAc;AACtE/D,iBACU+D,qCAAqCqU,IAArCrU,CAAqCqU,CAArCrU,EAA6CqU,IADvDpY,CACuDoY,CAA7CrU,CADV/D,+CAIiB,gBAAe;AAC5B,aAAIqF,QAAJ,QAAoB;AAClB8S,sBAAW9S,EAAX8S,CAAW9S,CAAX8S;AACA;AACD;AACD;AATJnY;AAWAA,iBACU+D,qCAAqCqU,SAArCrU,UAAwDqU,IADlEpY,CACkEoY,CAAxDrU,CADV/D,OAEQ,uBAFRA;AAZF;;AAiBAA,eACU+D,qCADV/D,mBACU+D,CADV/D,mBAEoBmY,8BAFpBnY;;AAMA,iBAAY;AACV;;AAEA+D,oCAA6B,OAC3B/D,wBAES,yFAFTA,SAES,CAFTA,SAaUC,QAdiB,4BAcjBA,CAbVD,CAD2B,EAe3B,qBAAoB;AAClB,gBAAO+Y,KACL5I,qDADF,GACEA,CADK4I,CAAP;AAnBM,QAGmB,CAA7BhV,CAHU,CAuBP;;AAEH;;AAEAA;AACAA;AACAA,6BAAsB,uBAAsB;AAC1C6P,mCAA0BC,sCAA1BD,MAA0BC,CAA1BD;AADF7P;;AAIA,WAAIiV,SAAJ;;AAEA/Y,cAAO8D,KAAP9D,OAAmB,aAAY;AAC7B,aAAIgZ,MAAMlV,gCACNA,WAAWV,EADLU,MACNA,CADMA,UAAV,IAAUA,CAAV;AAAA,aAKEmV,MAAMnV,gCACJA,WAAWV,EADPU,MACJA,CADIA,UALR,IAKQA,CALR;;AAWA,aAAIkV,0BAA0BC,OAA9B,iBAAsD;AACpDF,uBAAY;AACV3Q,gBADU;AAEVC,gBAFU;AAGVQ,oBACE/E,WAAWV,EAAXU,oCAIAA,WAAWV,EAAXU,QAJAA,kBAOA;AAXQ,YAAZiV;AAaD;AA1BH/Y;AA4BAD,iBAEI+D,gEAFJ/D,IAEI+D,CAFJ/D;;AAMAE,iDAIE6D,uDAJF7D,IAIE6D,CAJF7D,EAKE;AACEmI,YADF;AAEEC,YAAG;AAFL,QALFpI,EASEiQ,uDATFjQ;AArEF,YAgFO;AACL6D;AACAA;AACAA;AACAA;AACAA;AACD;;AAEDA;AACAA;AACA/D;AA9HF+D;;AAiIAA,uCAAoC,kBAAiB;AACnD,SAAIoU,WAAJ;AACAnY,eACU+D,qCADV/D,mBACU+D,CADV/D;;AAIA+D;;AAEA,MAAC,eAAD,KAAC,CAAD,EAAwB,mBAAxB,IAAwB,CAAxB,UAA0D,eAAc;AACtE/D,iBACU+D,qCAAqCqU,IAArCrU,CAAqCqU,CAArCrU,EAA6CqU,IADvDpY,CACuDoY,CAA7CrU,CADV/D,+CAIiB,gBAAe;AAC5B,aAAIqF,QAAJ,QAAoB;AAClB8S,sBAAW9S,EAAX8S,CAAW9S,CAAX8S;AACA;AACD;AACD;AATJnY;AAWAA,iBACU+D,qCAAqCqU,SAArCrU,UAAwDqU,IADlEpY,CACkEoY,CAAxDrU,CADV/D,OAEQ,uBAFRA;AAZF;;AAiBA+D,2BAAsB,uBAAsB;AAC1C,cAAO6P,YAAP,UAAOA,CAAP;AACAA,0CAAmCuF,SACjCC,4CADFxF,MACEwF,CADiCD,CAAnCvF;AAFF7P;;AAOAA;;AAEA,iBAAY;AACV,WAAIkU,UAAJ,4BAA0C;AACxC,aAAIC,SAAJ;AAAA,aACElE,QADF;AAEA/T,gBAAOoB,2BAAPpB,MAAOoB,CAAPpB,EAA2C,sBAAqB;AAC9DiY;AACAlE;AAFF/T;AAIA8D,sCAA6B/D,wCAA7B+D,KAA6B/D,CAA7B+D;AAPF,cAWO;AACL,aAAIoM,4CAAJ,aAAIA,CAAJ,EAAgE;AAC9DpM,wCAA6BoM,2DAEZA,oCAFYA,MAEZA,CAFYA,EAA7BpM,IAA6BoM,CAA7BpM;AADF,gBAIO;AACLA,wCAA6B/D,yBAA7B+D,mBAA6B/D,CAA7B+D;AAGA,eAAIsV,iBAAiBpZ,QAAQ8D,2BAA7B,KAA6BA,EAAR9D,CAArB;AACAoZ;;AAEAtV,6CACE9D,QAAQkB,6BADV4C,CACE9D,CADF8D;AAGAA;;AAEA,eAAIoM,4CAAJ,kBAAIA,CAAJ,EAAqE;AACnEpM,0CAA6B,OAC3BA,eAD2B,UAC3BA,CAD2B,EAE3B,qBAAoB;AAClB,mBAAIuV,OAAJ,iBAA4B;AAC1B,wBAAOP,KAAP,0BAAOA,CAAP;AACD;AACD,sBAAOA,KACL5I,gEADF,GACEA,CADK4I,CAAP;AANJhV,cAA6B,CAA7BA;AAaA;AACD;AACF;AACF;AACDA;AACAA,wCACEoM,4CADFpM,WACEoM,CADFpM;;AAGA;AACA;;AAEA;AACAA,6CAAsCwV,wCAEpCpJ,4CAFoCoJ,WAGpCxV,eAHFA,cAGEA,CAHoCwV,CAAtCxV;AAKA;AACA;AACA;;AAEA+U,8CAEE/U,eAFF+U,cAEE/U,CAFF+U,EAGE/U,eAHF+U,mBAGE/U,CAHF+U;AAKAzG,8CAEEtO,eAFFsO,cAEEtO,CAFFsO,EAGEtO,eAHFsO,mBAGEtO,CAHFsO;AArEF,YA0EO;AACLtO;AACAA;AACAA;AACAA;AACA+U;AACAzG;AACD;AACD,SAAItO,KAAJ,sBAA+B;AAC7BA;AACD;;AAEDA;AACAA;AACA/D;AA1HF+D;;AA6HAA,4BAAyB,YAAW;AAClCA,2BAAsB,aAAY;AAChCM,qBAAcN,wBAAwB,CAACM,EAAvCA;AADFN;AAGAA,wBAAmB,aAAY;AAC7Bb,qBAAca,wBAAwB,CAACb,EAAvCA;AADFa;AAJFA;;AASAA,iBAAc,mCAAkC;AAC9C,SAAIyV,mBAAJ;;AAEAC,kBAAa,MAAM,OAAN,UAAM,CAAN,EAA0B,eAAc;AACnD,cAAO,MACL,qBAAqB,aAAY;AAC/B,gBAAO9U,UAAP;AAFG,QACL,CADK,EAIL,aAAY;AACV,gBAAOA,EAAP;AALJ,QAAO,CAAP;AADF8U,MAAa,CAAbA;;AAWA,SAAIA,cAAJ,QAA0B;AACxB1V,0BAAmB,aAAY;AAC7Bb;AADFa;;AAIA9D,cAAO8D,KAAP9D,OAAmB,aAAY;AAC7B,aAAIyZ,YAAY,OAAOD,WAAP,CAAOA,CAAP,EAAsB,aAAY;AAChD,kBAAOpW,YAAP;AADF,UAAgB,CAAhB;;AAIA,wBAAe;AACbU,sBAAWV,EAAXU;AACAA,sBAAWV,EAAXU;AACD;AARH9D;AALF,YAeO;AACL8D,0BAAmB,aAAY;AAC7Bb;AADFa;AAGD;;AAEDA,2BAAsB,aAAY;AAChCM;AADFN;;AAIAA,wBAAmB,aAAY;AAC7B,WAAI2V,YAAY,OAAOD,WAAP,CAAOA,CAAP,EAAsB,kBAAiB;AACrD,gBACEE,YAAYzW,EAAZyW,OACA,OAAOzW,EAAP,uBAAOA,CAAP,EAAmC,gBAAe;AAChD,kBAAOyW,YAAP,IAAOA,CAAP;AAHJ,UAEE,CAFF;AADF,QAAgB,CAAhB;;AASAD,mBAAYA,aAAaxW,EAAzBwW;;AAEA,WAAIA,aAAaxW,EAAjB,cAAiC;AAC/BA;AACAsW;AACD;;AAED,WAAItW,EAAJ,cAAoB;AAClBA;AACD;AAnBHa;;AAsBA,SAAIyV,oBAAoB,CAAxB,aAAsC;AACpC,WAAIzV,KAAJ,iBAA0B;AACxBA;AACD;;AAEDA;AACD;AAnEHA;;AAsEAA,mBAAgB,YAAW;AACzB,YAAOA,6BAAP;AADFA;;AAIAA,0BAAuB,mCAAkC;AACvD,8BAAyB;AACvB,WAAIsQ,eAAJ,QAA2B;AACzB,aAAIuF,cAAc5Z,UAAlB,mBAAkBA,CAAlB;AACA4Z;AACA,sBAAa;AACXA;AADF,gBAEO;AACLA;AACD;AACDA;AACAvF;AATF,cAUO;AACLrU;AACD;AACF;AAfH+D;;AAkBAA,kCAA+B,aAAY;AACzC,SAAI8V,OAAOxU,UAAX;AACA;;AAEA,SAAIwU,QAAJ,KAAiB;AACf,WAAIC,SAASzU,aAAaA,SAA1B;AACA,WAAI0U,SAAS1U,aAAaA,SAA1B;AACA,WAAIwU,OAAOA,OAAO5O,UAAU6O,kBAAkBC,SAA9C,MAAkB9O,CAAlB;;AAEA,WAAI+O,QAAQ/O,UALG,CAKf,CALe,CAKU;;AAEzB,WAAIgP,QAAQH,SAAS7O,UAAU,UAAnB6O,MAAS7O,CAAT6O,GAAuC7O,UAPpC,CAOf,CAPe,CAOiD;;AAEhE,WAAI4O,OAAJ,GAAc;AACZG,iBAAQ,CAARA;AACAH,gBAAO,CAAPA;AACD;;AAED,WAAIK,KAAKjP,SAAS+O,QAAT/O,SAAT;AAAA,WACEkP,MAAMlP,SAAS+O,QAAT/O,SADR;;AAGA,WAAImP,KAAKnP,SAAS+O,QAAT/O,SAAT;AAAA,WACEoP,MAAMpP,SAAS+O,QAAT/O,SADR;;AAGA;AACA,WAAI5F,cAAcA,SAAlB,GAA8B;AAC5BiV,cAAK,KAAK,CAAVA,EAAK,CAALA;AACAC,cAAK,CAAC,CAAD,KAAO,CAAZA,GAAK,CAALA;AAFF,cAGO;AACLD,cAAK,CAAC,CAAD,KAAO,CAAZA,GAAK,CAALA;AACAC,cAAK,KAAK,CAAVA,EAAK,CAALA;AACD;;AAEDhQ,cACE,MACAlF,SADA,UAGAA,SAHA,aAKCA,aAAaiV,GALd,CAKcA,CALd,WAOCjV,aAAaiV,GAPd,CAOcA,CAPd,YASCjV,aAAakV,GATd,CAScA,CATd,WAWClV,aAAakV,GAXd,CAWcA,CAXd,WAaAlV,SAbA,UAeAA,SAhBFkF;AA7BF,YA8CO;AACLA,cACE,MACAlF,SADA,UAGAA,SAHA,YAKAA,SALA,UAOAA,SARFkF;AASD;;AAEDvK;AA9DF+D;;AAiEAA,iBAAc,0BAAyB;AACrCA;;AAEA,mBAAc;AACZ4K;AACD;AACD5K;;AAEA;;AAEA,SAAI,CAAJ,MAAW;AACT,WAAIyW,UAAJ;;AAEA7L,4BAAqB6L,QAArB7L,WAAwC6L,QAAxC7L;AACA8L,6BAAsBD,cAAtBC,QAA4CD,cAA5CC;;AAEA,WAAIC,WAAJ;;AAEAza,cAAOua,QAAPva,OAAsB,aAAY;AAChCoF;AACA,aAAIsV,MAAJ;;AAEA,aAAItV,WAAWA,EAAf,QAAyB;AACvBsV,iBAAM,KAAKtV,EAAL,eAAsBA,EAA5BsV;AADF,gBAEO;AACLA,iBAAM,KAAKtV,EAAL,eAAsBA,EAA5BsV;AACD;AACD,aAAIA,OAAJ,UAAqB;AACnBD;AADF,gBAEO;AACLA,2BAAgB,CAAhBA,CAAgB,CAAhBA;AACD;AAbHza;;AAgBAA,wBAAiB,aAAY;AAC3B,aAAI0E,WAAJ,GAAkB;AAChB,eAAIiW,OAAO,KAAKjW,WAAhB,CAAW,CAAX;AACA1E,qBAAU,uBAAsB;AAC9BkN,yBAAY,OAAO4G,QAAnB5G;AADFlN;AAGD;AANHA;;AASA4a,cAAO,yCAECL,QAFD,OAEgB,aAAY;AAC/B,gBAAOnV,EAAP;AAHJwV,QAAO,CAAPA;;AAMA;AACAA;AACAA;;AAEAA,+BACsB,aAAY;AAC9B,gBAAOxV,EAAP;AAFJwV,iCAI0B,aAAY;AAClC,gBAAO,kBAAkBxV,eAAzB;AALJwV,+BAOwB,aAAY;AAChC;AACA,gBAAOxV,eAAetB,KAAtB;AACA;AAVJ8W;;AAaAA,6EAGU,aAAY;AAClB,gBAAOxV,EAAP;AAJJwV,6BAMsB,UAAU9W,KAAV,aANtB8W;;AAQAC,wBAAiB,yCAETN,QAFS,OAEM,aAAY;AAC/B,gBAAOnV,EAAP;AAHJyV,QAAiB,CAAjBA;;AAMAA;AACAA;;AAEAC,2BAAoB,kDAGhB,qBAAqB,aAAY;AAC/B;AAJc,QAGhB,CAHgB,EAMhB,aAAY;AACV,gBAAO1V,EAAP;AAPN0V,QAAoB,CAApBA;;AAWAA;AACAA,8FAIqB,aAAY;AAC7B,gBAAO,eAAe1V,EAAf,UAA2BA,EAA3B,IAAP;AALJ0V,iHAUQpM,sCAVRoM,eAUQpM,CAVRoM;;AAYAhX,+BACEA,KADFA,6BAEEA,KAFFA,sBAIEA,KAJFA;;AAOA,WAAIA,iBAAiB,EAAEC,WAAWA,QAAlC,gBAAkCA,CAAb,CAArB,EAA8D;AAC5DD;AACD;;AAED,WAAIA,KAAJ,kBAA2B;AACzBA,iCACEA,KADFA,gCAEEA,KAFFA;AAMD;AACDA,4BAAqBA,KAArBA;AApHF,YAqHO;AACL+W,wBAAiB/W,2BAAjB+W,OAAiB/W,CAAjB+W;AACAC,2BAAoBhX,2BAApBgX,gBAAoBhX,CAApBgX;AACAF,cAAO9W,2BAAP8W,OAAO9W,CAAP8W;AACAJ,6BAAsBK,eAAtBL,IAAsBK,EAAtBL,EAA6CI,KAA7CJ,IAA6CI,EAA7CJ;AACD;;AAEDK,yBAAoB,aAAY;AAC9BE;AADFF;;AAIAC,4BAAuB,aAAY;AACjCE;AADFF;;AAIAF,2BAAsB,aAAY;AAChC,cAAO5P,SAASmM,aAAa/R,EAAtB4F,MAASmM,CAATnM,EAAiCmM,aAAa/R,EAArD,MAAwC+R,CAAjCnM,CAAP;AADF4P;;AAIA,SAAI9W,KAAJ,wBAAiC;AAC/B8W,iBAAU,aAAY;AACpB9W;AADF8W;AAGD;;AAEDA,2BAAsB,aAAY;AAChC,WAAIxV,sBAAsBA,SAAtBA,aAA4CA,EAAhD,WAA6D;AAC3D;AACD;AACD;AAJFwV;;AAQA,SAAI,CAAJ,MAAW;AACTK,qCACEH,8BAA8BD,kBADhCI;;AAGAvM,iCAA0B,YAAW;AACnC,aAAIwM,QAAQxM,eAAZ,IAAYA,EAAZ;;AAEAmM,0CAAiC,aAAY;;AAE3C;AACA,eAAIM,cAAJ;AACA,eAAIC,cAAcF,WAAlB;AACA,eAAIG,cAAJ;AACA,eAAIC,cAAcJ,WAAlB;;AAEA,eAAIpX,KAAJ,gBAAyB;AACvB,iBAAMyX,wCAAN;AACA;AACA,iBAAInW,gCAAJ,sBAA0D;AACxD,mBAAIoW,SAASlZ,qBAAqB8C,qBAAlC,OAAa9C,CAAb;AACA6Y,6BAAcK,WAAdL;AACAC,6BAAcI,WAAdJ;AACAC,6BAAcG,WAAdH;AACAC,6BAAcE,WAAdF;AACD;AACF;;AAED,kBACE,gBACClW,MAAM4F,sBAELA,sBAAsB5F,EAHxB,CAGE4F,CAFKA,CADP,WAMC5F,MAAM4F,sBAELA,sBAAsB5F,EARxB,CAQE4F,CAFKA,CANP,IADF;AApBF6P;AAkCAC,6CAAoC,aAAY;AAC9C,kBACE,gBACC1V,MAAM4F,SACL5F,EADK4F,eAELA,SAASkQ,WAAW9V,EAApB4F,eAAqC5F,EAHvC,CAGE4F,CAFKA,CADP,WAMC5F,MAAM4F,SACL5F,EADK4F,eAELA,SAASkQ,WAAW9V,EAApB4F,eAAqC5F,EARvC,CAQE4F,CAFKA,CANP,IADF;AADF8P;;AAgBAF,mBAAU9W,KAAV8W;AArDFlM;;AAwDAA;AA5DF,YA6DO;AACLkM,iBAAU9W,KAAV8W;AACD;AA/NH9W;;AAkOA,mBAAgB;AACd,SAAIoX,QAAQxM,eAAZ,IAAYA,EAAZ;;AAEAnL,qBACc,aAAY;AACtB,cAAQ6B,MAAM4F,aAAaA,SAASkQ,WAATlQ,IAAwB5F,EAAnD,CAA2B4F,CAAbA,CAAd;AAFJzH,mBAIc,aAAY;AACtB,cAAQ6B,MAAM4F,aAAaA,SAASkQ,WAATlQ,IAAwB5F,EAAnD,CAA2B4F,CAAbA,CAAd;AALJzH;;AAQAqX,qBACc,aAAY;AACtB,cAAOxV,SAAP;AAFJwV,mBAIc,aAAY;AACtB,cAAOxV,SAAP;AALJwV,mBAOc,aAAY;AACtB,cAAOxV,SAAP;AARJwV,mBAUc,aAAY;AACtB,cAAOxV,SAAP;AAXJwV;AAaD;;AAED;AACA,+CAA4C;AAC1C,UAAK,IAAL,YAAqB;AACnBzX;AACD;;AAED,UAAK,IAAL,YAAqB;AACnBA,aAAMD,SAANC;AACAA,aAAMD,SAANC;AACD;AACF;;AAEDW,qCAAkC,yBAAwB;AACxD,SAAI;AACF,WAAI3D,gCAAJ,IAAwC;AACtC,aAAIkF,MAAMD,EAAV,uBAAUA,CAAV,EAAsC;AACpC;;AAEA,eAAItB,uCAAJ,UAAqD;AACnDY,iBAAIZ,8CAAJY,IAAIZ,CAAJY;AADF,kBAEO;AACLA,iBAAIU,2BAAJV,EAAIU,CAAJV;AACD;;AAED,eAAI1E,WAAJ,CAAIA,CAAJ,EAAmB;AACjB,iBAAI0E,YAAJ,GAAmB;AACjB;AADF,oBAEO;AACL,2BAAY;AACVA,qBAAI,CAAJA;AACA,wBAAO1E,+BAAP;AACD;AACF;AACF;AACD;AACD;AACF;AAvBH,OAwBE,UAAU;AACVqD;AACD;AACD;AA5BFS;;AA+BA,4DAAyD;AACvD;AACA,SAAI3D,gCAAJ,IAAwC;AACtCiF;AACD;AACF;;AAEDtB,uCAAoC,kBAAiB;AACnD,SAAI5D,2BAA2B4D,KAA/B,MAA0C;AACxC,WAAI2X,WAAJ;AACAA;AACAzb,gBAAS8D,UAAT9D,uBAAS8D,CAAT9D;AACA;AACD;AANH8D;AAQA,yBAAsB;AACpB,SAAIA,KAAJ,gBAAyB;AACvB;AACD;AACD,SAAI4X,IAAI,IAAI1Q,UAAU5F,EAJF,MAIR4F,CAAZ,CAJoB,CAIa;AACjC,YAAO,QAAP;AACD;;AAED,0BAAuB;AACrB;;;;AAIA,SAAIlH,eAAJ,aAAIA,CAAJ,EAAmC;AACjC,WAAIY,IAAIZ,mCAAmCA,eAA3C,aAA2CA,CAAnCA,CAAR;AACA,WAAIA,eAAJ,YAAIA,CAAJ,EAAkC;AAChC,aAAIY,KAAJ,iBAA0B;AACxB;AACD;AACD;AACD;AACD,cAAOZ,2BAAP,CAAOA,CAAP;AACD;AACD,YAAOsB,0BAA0BA,oBAAjC;AACD;;AAED,4BAAyB;AACvB,SAAItB,eAAJ,SAAIA,CAAJ,EAA+B;AAC7B,cAAOA,0BACLA,mCAAmCA,eAAnCA,YAAmCA,CAAnCA,EADF,IACEA,CADKA,CAAP;AAGD;AACD;AACD;;AAED,mCAAgC;AAC9B,SAAIsB,EAAJ,mBAAIA,CAAJ,EAA4B;AAC1B,cAAOtB,2BAAP,IAAOA,CAAP;AACD;AACD;AACD;;AAED,+BAA4B;AAC1B;AACD;;AAED,gCAA6B;AAC3B;;AAEA,SAAI,CAACA,KAAL,UAAoB;AAClBa,aACE,gBACA1B,EADA,mDAGArD,kBAAkBqD,EAAlBrD,KAHA,mBAGAA,CAHA,GADF+E;AADF,YAOO;AACLA,aAAM,iBAAiB1B,EAAjB,SAAN0B;AACD;;AAED3E,YACEA,QAAQ8D,KAAR9D,6BAA0C,CACxC8D,eADwC,aACxCA,CADwC,EAExCA,iBAFwC,IAExCA,CAFwC,EAGxCA,eAJJ9D,YAII8D,CAHwC,CAA1C9D,CADFA,EAME,eAAc;AACZ,gBAAS;AACP,aAAI2b,OAAOzL,WAAX,uBAAWA,CAAX,EAAgD;AAC9C,eAAI0L,YAAY9X,mCAAhB,GAAgBA,CAAhB;;AAEA,eAAIoM,oDAAJ,QAAgE;AAC9D,iBAAI;AACF0L,2BAAYhb,uBAAZgb,SAAYhb,CAAZgb;AADF,eAEE,YAAY,CAAE;AACjB;AACD,0BAAe;AACbjX,oBAAO,qCAAPA;AACD;AACF;AACF;AApBL3E;;AAwBA;AACD;;AAED,gCAA6B;AAC3B,SAAI2E,MAAM,gBAAgBlE,oBAAoBwC,EAApC,MAAgBxC,CAAhB,GAAV;AACA,SAAI,aAAJ,GAAoB;AAClBkE,cACE,+CACAlE,oBAAoBwC,EADpB,OACAxC,CADA,GADFkE;AAID;;AAED,SAAIiX,YAAY9X,mCAEdA,eAFF,aAEEA,CAFcA,CAAhB;;AAKA;AACD;;AAED,2BAAwB;AACtB+X,gCAGE,CAAC/X,gCAAD,WAA4CsB,EAH9CyW,IAIEC,iBAJFD,CAIEC,CAJFD,EAKE/X,KALF+X;AAOD;;AAED,4BAAyB;AACvBA;AACD;;AAED,2BAAwB;AACtBA,gCAGEzY,sBAAsBA,SAHxByY,IAIEE,iBAJFF,CAIEE,CAJFF,EAKE/X,KALF+X;AAOD;;AAED,4BAAyB;AACvBA;AACD;;AAED;;AAEA;;;;AAIA,oCAAiC;AAC/B,SAAIG,aAAahc,iBAAjB,SAAiBA,CAAjB;AACA;AACD;;AAED,gDAA6C;AAC3C,UAAK,IAAL,eAAwB;AACtB,WAAIic,MAAMnZ,SAAV,CAAUA,CAAV;AACAmZ;AACAA;AACA,WAAIjc,WAAJ,UAAIA,CAAJ,EAA4B;AAC1Bic,8BAAqB,aAAY;AAC/BA,oBAAS7T,EAAT6T;AACAA,oBAAS7T,EAAT6T;AAFFA;AAIAA,kBAASA,aAATA;AACAA,kBAASA,aAATA;AACD;AACF;AACF;;AAED,2CAAwC;AACtCnY;AACAsE;AACA6S,oCAA+BnX,mBAAmBsE,eAAnBtE,KAA/BmX;AACA,SAAI,CAAJ,WAAgB;AACd,WAAIiB,MAAMC,2BAA2B/T,EAArC,UAAU+T,CAAV;AACA,WAAID,OAAJ,GAAc;AACZC;AACD;AACF;AACDC,+BAA0B,CAA1BA,CAA0B,CAA1BA;AACA,YAAOhU,WAAP;AACD;;AAED,0CAAuC;AACrCtE;AACAsE;AACA6S,oCAA+BnX,mBAAmBsE,eAAnBtE,KAA/BmX;AACAkB,6BAAwB/T,EAAxB+T;;AAEA,qBAAgB;AACd/T,0BAAmB,aAAY;AAC7BnF,eAAMmF,MAAM,CAAC4C,gBAAD,OAAwB5C,WAApCnF;AACAA,eAAMmF,MAAM,CAAC4C,gBAAD,OAAwB5C,WAApCnF;AAFFmF;AADF,YAKO;AACLA,0BAAmB,aAAY;AAC7BnF,eAAMa,oBAAoB,CAACkH,gBAAD,OAAwB5C,WAAlDnF;AACAA,eAAM,OAAOa,KAAP,SAAqB,CAACkH,gBAAD,OAAwB5C,WAAnDnF;AAFFmF;AAID;AACF;;AAED,qDAAkD;AAChD,SAAIiU,YAAYtc,UAAU+D,yCAA1B,IAA0BA,CAAV/D,CAAhB;AACA,SAAIsc,UAAJ,KAAIA,EAAJ,EAAuB;AACrB;AACD;;AAEDA;AACAA;;AAEAtc,eACU+D,qCAAqCuB,KAArCvB,aADV/D,IACU+D,CADV/D,mBAEoBuc,gBAFpBvc;;AAIA,iBAAY;AACV,WAAIwc,OAAOzY,eAAX,UAAWA,CAAX;AACA,WAAI0Y,SAASC,cAAb,QAAaA,CAAb;;AAEA,WAAIzG,UAAU,4DACZ,YACE,cAAc,gBAAe;AAC3B,gBAAOwG,OAAP,CAAOA,CAAP;AAHN,QAEI,CADF,CADY,CAAd;;AAQAxG;AACAA,oBACQ,aAAY;AAChB,gBAAO,qBAAP;AAFJA,eAIQ,gBAAe;AACnB,gBAAO;AACLjW,oGAIkB,YAAW;AACzB,oBAAOwc,KAAP,CAAOA,CAAP;AALJxc;AAOD;AAbLiW;;AAgBA,WAAIlS,KAAJ,gCAAyC;AACvC,aAAI4Y,MAAM,cAAc,eAAc;AACpC,kBAAO,cAEL,gBAAe;AACb,oBAAOxJ,IAAP;AAHG,cAAP,CAAO,CAAP;AADF,UAAU,CAAV;;AAUAoJ,kBAAS,cAAc,0BAAyB;AAC9C,kBAAO,WAAW,aAAY;AAC5B,oBAAOlY,IAAIsY,IAAX,SAAWA,CAAX;AADF,YAAO,CAAP;AADFJ,UAAS,CAATA;AAKD;;AAED,WAAIrG,OAAO,+CACT,WAAW,gBAAe;AACxB,gBAAO,CAACuG,OAAD,CAACA,CAAD,SAAP,CAAO,CAAP;AAFJ,QACE,CADS,CAAX;;AAMAvG;AACAA,iCAEQ,aAAY;AAChB;AAHJA,oCAOQ,gBAAe;AACnB,gBAAO1T,SACH,qBADGA,YAEHuB,sCACEpD,sBADFoD,CACEpD,CADFoD,GAFJ;AARJmS,eAcQ,gBAAe;AACnB,aAAI1T,KAAJ,GAAY;AACVxC,oGAIkB,YAAW;AACzB,oBAAOwc,KAAP,CAAOA,CAAP;AALJxc;AAOD;AAvBLkW;AAyBD;AACF;;AAED,sDAAmD;AACjD,SAAI9O,YAAYpH,UAAU+D,yCAA1B,IAA0BA,CAAV/D,CAAhB;;AAEA,SAAIoH,UAAJ,KAAIA,EAAJ,EAAuB;AACrB;AACD;;AAEDA;;AAEApH,eACU+D,qCAAqCuB,KAArCvB,aADV/D,IACU+D,CADV/D,mBAEoBuc,gBAFpBvc;;AAIA,iBAAY;;AAwEV;AAxEU,WAyEV,IAzEU,GAyEV,0BAA0B;AACxB,gBAAO,gBAAe;AACpB4c,2BAAgBC,IAAIJ,OAAJI,CAAIJ,CAAJI,GAAhBD;AACAE,+CAEU,aAAY;AAClB,oBAAOzX,uBAAuBA,kBAA9B;AAHJyX;AAFF;AAUD,QApFS;;AACV,WAAIL,SAASC,cAAb,QAAaA,CAAb;;AAEA,WAAII,MAAM1V,iBAAV,KAAUA,CAAV;;AAEA,WAAI2V,QAAQ/c,8CAGKA,GAHLA,mBAAZ,MAAYA,CAAZ;;AAMA,WAAIgd,cAAJ;AAAA,WACEhV,QADF;AAAA,WAEEC,SAFF;AAAA,WAGEgV,cAAchS,gBAAgBhD,SAAhBgD,eAHhB;AAAA,WAIEiS,cAAcD,cAJhB;;AAMA,WAAIT,OAAOzY,eAAX,UAAWA,CAAX;AAAA,WACE+D,YADF;;AAGA,WAAI8U,aAAaE,kCAIb,eAAe9U,QAAf,WAAkCC,SAAlC,eAJa6U,oFAAjB,EAAiBA,CAAjB;;AAWAA,aAAMA,wCAEY7U,SAFZ6U,2CAMF,eAAe9U,QAAf,UAAiC,CAACC,SAAD,eAAjC,IANJ6U,GAAMA,CAANA;;AASAA,8CAGQC,MAHRD,6CAMiB,aAAY;AACzB,gBAAON,KAAKC,OAAOpX,EAAnB,KAAYoX,CAALD,CAAP;AAPJM,0BASmB,aAAY;AAC3B,gBAAON,KAAKC,OAAOpX,EAAnB,KAAYoX,CAALD,CAAP;AAVJM,oBAcI9c,kDAdJ8c,WAcI9c,CAdJ8c,kBAgBmBK,UAhBnBL,IAgBmBK,CAhBnBL,iBAiBkBK,QAjBlBL,KAiBkBK,CAjBlBL;;AAmBAA,qEAIQC,MAJRD,yCAOa9c,sBAPb8c,WAOa9c,CAPb8c,gBAQiB,aAAY;AACzB,gBAAON,KAAKnX,SAAZ,KAAOmX,CAAP;AATJM;AA0BD;AACF;;AAED,6EAA0E;AACxE,SAAIM,YAAYC,gBAAgB7C,QAAhB6C,QAAgCtZ,KAAhD;AACA,SAAIuZ,aAAJ;AACA,UAAK,IAAI9a,IAAT,GAAgBA,IAAhB,KAAyBA,KAAzB,GAAiC;AAC/B8a;AACA,YAAK,IAAI3J,IAAT,GAAgBA,IAAhB,KAAyBA,KAAzB,GAAiC;AAC/B2J;AACD;AACF;;AAEDrd,uBAAkB,gBAAe;AAC/B;AACAqd,kBACEZ,QAAQ3Y,gCAAgCA,WAAWoJ,KAA3CpJ,MAAgCA,CAAhCA,EADVuZ,EACUvZ,CAAR2Y,CADFY,EAGEZ,QAAQ3Y,gCAAgCA,WAAWoJ,KAA3CpJ,MAAgCA,CAAhCA,EAHVuZ,EAGUvZ,CAAR2Y,CAHFY;AAFFrd;AAQA;;AAEA,SAAIsd,WAAW,gBAAgB,gBAAe;AAC5C,WAAI/a,KAAKgb,MAAT,GAAkB;AAChB,gBAAO,OAAO,cAAa;AACzB,kBAAOC,KAAP;AADF,UAAO,CAAP;AAGD;AACD,cAAOpY,EAAEmY,MAAFnY,KAAP;AANF,MAAe,CAAf;AAQA,SAAI,CAAJ,UAAe;AACbiY;AACA,YAAK9a,IAAL,GAAYA,IAAIgb,MAAhB,GAAyBhb,KAAzB,GAAiC;AAC/B8a;AACD;AACF;;AAED;;AAEAE,WAAMF,WAANE;;AAEA,UAAKhb,IAAL,GAAYA,IAAZ,KAAqBA,KAArB,GAA6B;AAC3B,YAAKmR,IAAL,GAAYA,IAAZ,KAAqBA,KAArB,GAA6B;AAC3B2J,6BAAoBA,cAApBA,CAAoBA,CAApBA;AACAA,4BAAmBA,cAAnBA,CAAmBA,CAAnBA;AACD;AACF;;AAED;AACD;;AAEDvZ,wCAAqC,gBAAe;AAClDsB;AACAA;AACA,SAAIA,aAAJ,UAA2B;AACzBA;AACAA,0BAAmB,OACjB,UAAU8K,WAAV,OAA4B,cAAa;AACvC,gBAAOpM,oCAAP,CAAOA,CAAP;AAFJsB,QACE,CADiB,CAAnBA;AAKAA,wBAAiBA,iBAAjBA;AAPF,YAQO;AACL,WAAI,UAAJ,GAAiB;AACfA;AACAA,4BAAmBpF,QAAQoF,EAA3BA,MAA2BA,CAARpF,CAAnBoF;AACA,aAAI,EAAEhF,mBAAmBgF,EAAzB,aAAyBA,CAArB,CAAJ,EAA4C;AAC1CA;AACD;AACDA,0BAAiBA,iBAAjBA;AACAA;AACD;AACF;AACD;AAtBFtB;;AAyBAA,uCAAoC,aAAY;AAC9C;AACA,SAAIsB,EAAJ,SAAIA,CAAJ,EAAkB;AAChB4N,gBAAS5N,EAAT4N,aAAS5N,CAAT4N;AADF,YAEO;AACL,WAAI5N,aAAJ,UAA2B;AACzB4N,kBAAS5N,iBAAT4N,IAAS5N,EAAT4N;;AAEA,aAAI5N,eAAJ,4BAA+C;AAC7C,eAAIqY,cAAc,SAAdA,WAAc,MAAc;AAC9B,iBAAIC,OAAJ;AACA,kBAAK,IAAIC,KAAT,GAAiBA,KAAKhZ,IAAtB,cAAwC;AACtC,mBAAIiZ,WAAWjZ,eAAf,EAAeA,CAAf;AACA+Y,sBAAO,CAACA,QAAS,IAAV,QAAPA;AACD;AACD;AANF;;AASA,eAAIG,SAAS7d,cAAb,WAAaA,CAAb;AACA,eAAI8d,iBAAJ;AACA,eAAIC,YAAJ;;AAEA,gBAAK,IAAIxb,IAAT,GAAgBA,IAAhB,iCAAqD;AACnDub;AACD;;AAED9d,0BAAe,wBAAuB;AACpC,iBAAIkE,QAAJ,GAAe;AACbA,uBAAQ,CAARA;AACD;;AAED,iBAAI8Z,YAAY9Z,QAAhB;AACA,iBAAI8Z,aAAJ,gBAAiC;AAC/BD,yBAAU/K,OAAV+K,KAAU/K,CAAV+K;AACA,sBAAOD,eAAP,SAAOA,CAAP;AACA;AACD;;AAED,iBAAIG,aACFjT,WAAW9G,QAAX8G,8BADF;AAGA,iBAAIiT,cAAJ,gBAAkC;AAChCF,yBAAU/K,OAAV+K,KAAU/K,CAAV+K;AACA,sBAAOD,eAAP,UAAOA,CAAP;AACA;AACD;;AAED,iBAAII,cAAczJ,SAASzU,8BAA3B,CAA2BA,CAATyU,CAAlB;AACAsJ,uBAAU/K,OAAV+K,KAAU/K,CAAV+K;AACA,oBAAOD,eAAP,WAAOA,CAAP;AAvBF9d;;AA0BAoF;AACD;AACD;AAjDF,cAkDO;AACL4N,kBAAS5N,iBAAT4N,IAAS5N,EAAT4N;AACD;AACF;;AAED,SAAI1M,MAAM,IAAV,MAAU,EAAV;;AAEAtG,oBAAe,iBAAgB;AAC7BsG;AADFtG;;AAIAoF,sBAAiB,kBAAiB;AAChC,cAAOuW,MAAOA,kBAAkB3b,SAAlB2b,GAAkB3b,CAAlB2b,GAAPA,MAAgDrV,IAAvD,CAAuDA,CAAvD;AADFlB;AAGA;AArEFtB;;AAwEA,sEAAmE;AACjE,SAAIqa,gBAAJ,aAAiC;AAC/B,cAAO,yBAAyB,aAAY;AAC1C,gBAAOra,mCAAP,YAAOA,CAAP;AADF,QAAO,CAAP;AAGD;AACD;AACD;;AAED,oCAAiC;AAC/B,SAAI6P,cAAc7P,cAAcA,qBAAhC,EAAgCA,CAAdA,CAAlB;AAAA,SACEsa,YAAYzK,YADd,mBACcA,CADd;;AAGA;;AAEA,SAAI7P,KAAJ,UAAmB;AACjBa,aACE,aACAb,mBAAmBuB,KADnB,CACAvB,CADA,oEAIArD,oBAAoBkT,oBAJpB,MAIoBA,CAApBlT,CAJA,kDAOAkT,oBAPA,KAOAA,CAPA,GADFhP;AADF,YAWO;AACLA,aACE,aACAb,mBAAmBuB,KADnB,CACAvB,CADA,iDAIArD,oBAAoBkT,oBAJpB,MAIoBA,CAApBlT,CAJA,qCAOAkT,oBAPA,KAOAA,CAPA,kDAUA/T,kBAAkB+T,YAAlB/T,IAVA,mBAUAA,CAVA,GADF+E;AAaD;;AAED,oBAAe;AACbyZ,yBAAkB,aAAY;AAC5BzZ,gBAAO,SAASS,EAAT,CAASA,CAAT,aAA0BA,EAA1B,CAA0BA,CAA1B,GAAPT;AADFyZ;AAGD;;AAED;AACD;;AAED,8BAA2B;AACzBvC,gCAGE,aAAazW,EAHfyW,YAIEwC,oBAAoBjZ,EAJtByW,UAIEwC,CAJFxC,EAKE/X,KALF+X;AAOD;;AAED,+BAA4B;AAC1BA;AACD;;AAED/X,iCAA8B,kCAAiC;AAC7D,SAAIsB,EAAJ,WAAiB;AACf,WAAIkZ,YAAYxa,mBAAmBsB,eAAnBtB,KAAhB;;AAEA,WAAIwa,YAAJ,sBAAsC;AACpClK;AADF,cAEO;AACL,aAAImK,WACFD,0CADF;AAEA,aAAIC,WAAJ,GAAkB;AAChB,eAAIpK,IAAJ;AACA,kBAAOA,IAAIgI,mBAAJhI,UAAiCoK,WAAxC,QAA2D;AACzD,iBAAI/Z,UACFV,cAAcA,qBAAqBqY,mBADrC,CACqCA,CAArBrY,CAAdA,CADF;AAEAya,yBAAY/Z,0BAAZ+Z;AACA7I;AACD;AACD,eAAIvB,KAAKgI,mBAAT,QAAoC;AAClCA;AACD;AACF;;AAED,aAAIoC,YAAJ,GAAmB;AACjB9I,6BAAkB,CAAlBA;AACD;AACF;;AAED,sBAAe;AACb3R;AACD;AACF;AACD;AA/BFA;;AAkCA,yCAAsC;AACpC,SAAI0a,YAAY,IAAhB,MAAgB,EAAhB;AACAxe,YACEyI,wBACE3E,cAAcA,qBAAqBsB,EAAnCtB,OAAcA,CAAdA,EADF2E,sBADFzI,OAME,aAAY;AACVA,cAAOoD,EAAPpD,WAAoB,aAAY;AAC9B,aAAI,EAAEiJ,KAAN,SAAI,CAAJ,EAAuB;AACrBuV;AACD;AAHHxe;AAPJA;AAcA;AACD;;AAED,wCAAqC;AACnC,SAAIye,UAAU,eAAe,aAAY;AACvC,cAAOra,EAAP;AADF,MAAc,CAAd;AAGAqa,kBAAa1e,GAAb0e;AACArZ,iBAAYvF,wBAAZuF,OAAYvF,CAAZuF;AACD;;AAED,mDAAgD;AAC9CsQ,sBAAiB5R,cAAcA,qBAAqBsB,EAApDsQ,OAA+B5R,CAAdA,CAAjB4R;AACA,oBAAe;AACb5R;AACD;AACF;;AAED,sCAAmC;AACjCsB,WAAMtB,aAANsB;AACAA,WAAMtB,cAANsB;AACAtB;AACD;;AAED,gCAA6B;AAC3B,YAAO,IAAIkH,UAAU5G,WAArB,MAAW4G,CAAX;AACD;;AAEDlH,sCAAmC,oDAIjC;AACA,SAAI4a,kBAAkBC,cAClB3e,SAAS8D,KAAT9D,OADkB2e,WAClB3e,CADkB2e,GAElB7a,KAFJ;;AAIA,SAAIqM,SAAS,uBAAuB,gBAAe;AACjD,WAAIyO,SAAS;AACXC,eAAM/a;AADK,QAAb;AAGA,6BAAsB;AACpB9D,kCAAyB,qBAAoB;AAC3C4e,0BAAe9a,sCAAf8a,GAAe9a,CAAf8a;AADF5e;AAGD;AACD;AATF,MAAa,CAAb;;AAYAmQ,iBAAY,gBAAe;AACzB,WAAIjF,SAASD,EAAb,MAAqB,OAAO,CAAP;AACrB,WAAIC,UAAUD,EAAd,MAAsB;AACtB;AAHFkF;;AAMA;AA3BFrM;;AA8BAA,+BAA4B,kBAAiB;AAC3Cgb,cAASA,UAAUhb,KAAnBgb;AACAA,oBAAe,aAAY;AACzB,WAAI,CAAC1W,EAAL,WAAkB;AAChBtE;AACD;AAHHgb;AAKAhb;AAPFA;;AAUAA,+BAA4B,qBAAoB;AAC9C,YAAO,qBAAqB,gBAAe;AACzC,cAAO,OAAOM,EAAP,UAAmB,aAAY;AACpC,gBAAO2a,UAAP,CAAOA,CAAP;AADF,QAAO,CAAP;AADF,MAAO,CAAP;AADFjb;;AAQAA,iCAA8B,kBAAiB;AAC7Cgb,cAASA,UAAUhb,KAAnBgb;AACAA,oBAAe,aAAY;AACzB,WAAI,CAAC1W,EAAL,WAAkBsN;AADpBoJ;AAGAhb;AALFA;;AAQAA,sBAAmB,YAAW;AAC5BA,sBAAiB,CAACA,KAAlBA;AACAA;AAFFA;;AAKA,4BAAyB;AACvB,gBAAW;AACT,WAAIkb,OAAJ;AAAA,WACEC,aADF;;AAGAC,qBAAc,aAAY;AACxB,aAAI9Z,KAAJ,MAAe;AACb4Z;AADF,gBAEO;AACLA;AACD;AALHE;AAOA,YAAK,IAAL,YAAqB;AACnBD,yBAAgB,KAAKD,KAArBC,EAAqBD,CAAL,CAAhBC;AACD;AACD,cAAO,gBAAgB,gBAAe;AACpC,gBAAO/T,OAAOD,EAAd,CAAcA,CAAd;AADF,QAAO,CAAP;AAGD;AACD;AACD;;AAED;;AAEAnH,2BAAwB,4EAKtB;AACAqb,kBAAaA,cAAbA;AACA;;;;;;;;;;;;AAYA,SAAIb,YAAJ;AACA,SAAIc,kBAAJ;AACA,SAAIC,iBAAJ;AACA,SAAI;AACF,WAAIC,wBAAwBA,qBAA5B,QAAyD;AACvD,aAAIC,iBAAJ;AACA,aAAIC,kBAAJ;;AAEA,aAAI,EAAEC,YAAYH,qBAAlB,CAAkBA,CAAd,CAAJ,EAA4C;AAC1C,iBAAMG,WAAN;AAED;;AAEDzf,gBAAOsf,qBAAPtf,CAAOsf,CAAPtf,EAAgC,gBAAe;AAC7C,eAAIuC,KAAJ,UAAmB;AACjB,iBAAImd,uBAAuB;AACzBzZ,sBADyB;AAEzBE,qBAFyB;AAGzBgZ,2BAAYA;AAHa,cAA3B;AAKArb;AACD;AARH9D;;AAWA,aAAI2f,yBAAJ;AAAA,aACEC,iBADF;;AAGA5f,gBAAO8D,UAAP9D,OAAwB,gBAAe;AACrC2f,kCAAuB1c,EAAvB0c;AACAC,0BAAe3c,EAAf2c;AAFF5f;;AAKAA,sCAA6B,aAAY;AACvC,mDAAwC;AACtCA,uBAAU,0CAAyC;AACjD,mBAAI6f,iBAAJ,UAA+B;AAC7BxM;AAKD;AAPHrT;AASD;;AAED,eAAIiD,eAAJ,wBAA2C;AACzC6c,oCAAuBH,uBAAuB1c,EAA9C6c,QAA8C7c,CAAvB0c,CAAvBG;AACAT;AAFF,kBAGO;AACL,iBAAIU,WAAW;AACb5f,wCADa;AAEb6f,2BAFa;AAGbC,gCAHa;AAIb5N,2BAJa;AAKb6N,uBAAQ;AALK,cAAf;AAOAH,2BAAc9c,EAAd8c,QAAc9c,CAAd8c;AACAD;AACAF,4BAAeG,SAAfH,MAA8B9b,gBAA9B8b;AACA9b;AACAwa;AACD;AA7BHte;;AAgCAA,sCAA6B,aAAY;AACvC,eAAI;AACF,iBAAI,gBAAgB,aAAhB,KAAkC,aAAtC,GAAsD;AACpD,mBAAI,CAACoD,EAAD,OAACA,CAAD,IAAJ,gBAAmC;AACjC;AACD;AACD,mBAAI,CAACA,EAAD,SAACA,CAAD,IAAJ,gBAAqC;AACnC;AACD;;AAEDgc,+BAAgBhc,EAAhBgc,SAAgBhc,CAAhBgc,IACE,CAACA,gBAAgBhc,EAAhBgc,SAAgBhc,CAAhBgc,IACGA,gBAAgBhc,EADnBgc,SACmBhc,CAAhBgc,CADHA,GAAD,KADFA;;AAKA,mBAAIe,WAAW;AACbC,yBAAQR,eAAexc,EADV,OACUA,CAAfwc,CADK;AAEbS,yBAAQT,eAAexc,EAFV,SAEUA,CAAfwc,CAFK;AAGbU,4BAAWld,EAHE,SAGFA,CAHE;AAIbsT,yBAJa;AAKb6J,2BAAU;AALG,gBAAf;;AAQAzc;AArBF,oBAsBO;AACL;AACD;AAzBH,aA0BE,YAAY;AACZ,mBAAM,+CAGJ0c,eAHF,CAGEA,CAHF;AAID;AAhCHxgB;;AAmCA8D;AACAA;AACAA,8BAAqBA,KAArBA,0BAAoDA,UAApDA;AACA,aAAI,CAACA,KAAL,6BAAuC;AACrCA;AACD;AACD,aAAI,CAACA,KAAL,gCAA0C;AACxCA;AACD;;AAED,aAAI2c,wBAAJ;AACAzgB,gBAAO8D,UAAP9D,OAAwB,aAAY;AAClC,eAAI0gB,gBAAgB1gB,QAClBA,OAAO8D,gBAAgBV,EAAhBU,QADW9D,gBAClBA,CADkBA,EAElBA,OAAO8D,gBAAgBV,EAAhBU,QAFT,gBAEE9D,CAFkBA,CAApB;AAIAA,iCAAsB,aAAY;AAChC,iBAAI,EAAEoE,KAAN,qBAAI,CAAJ,EAAmC;AACjCqc;AACD;AACD,iBAAIrd,EAAJ,WAAiB;AACfqd,wCAAyBrd,EAAzBqd;AACD;AANHzgB;AALFA;;AAeA,aAAI2gB,+BAAJ;AACA3gB,uCAA8B,gBAAe;AAC3C,eAAI4gB,UAAU5gB,OAAd,CAAcA,CAAd;AACA4gB;AACAD;AAHF3gB;;AAMA,aAAI6gB,aAAa7gB,OAAjB,eAAiBA,CAAjB;AACA6gB;AACA,aAAIC,kBAAkB/gB,yDAAtB,UAAsBA,CAAtB;;AAKA,aAAIghB,kBAAkB,CACpB;AACE9c,wBAAa;AACXC,oBAAOib,aADI;AAEXhb,mBAAM,iBAAY;AAChB,sBAAOC,QAAP,CAAOA,CAAP;AAHS;AAKXC,mBAAM,6CAA6C8a;AALxC,YADf;AAQE7a,sBAAW,4BAAkB;AAC3B,oBAAO;AACLJ,sBAAO,CACLM,iBADK,UACLA,CADK,EAELA,QAFK,iBAGLA,QAJG,UACE,CADF;;AAOLI,yBAAU,oCAA2B;AACnC,qBAAIC,YAAY9E,UAAhB,OAAgBA,CAAhB;AACA8E,gCAAe,CAACE,QAAD,CAACA,CAAD,sBAAfF;AACA,qBAAImc,iBAAJ;AACA,qBAAIjc,QAAJ,CAAIA,CAAJ,EAAgB;AACdic,oCAAiBhhB,UAAUA,OAAO+E,QAAjB/E,CAAiB+E,CAAP/E,CAAVA,EAA8B+E,QAA/Cic,CAA+Cjc,CAA9B/E,CAAjBghB;AACA,uBAAIA,eAAJ,QAA2B;AACzBA;AACAnc,qFAII,gBAAgBmc,eAAhB,SAJJnc,2BAMiBmc,oBANjBnc,IAMiBmc,CANjBnc;AAOD;AACF;;AAED,qBAAIoc,gBAAgBjhB,QAClB2gB,6BAA6B5b,QAD/B,CAC+BA,CAA7B4b,CADkB3gB,CAApB;;AAIA,qBACE+E,kBACAic,eADAjc,UAEC4b,6BAA6B5b,QAA7B4b,CAA6B5b,CAA7B4b,KACCM,cAJJ,QAKE;AACAA;;AAEA,uBAAIC,cAAJ;AACAlhB,yCAAsB,aAAY;AAChCkhB;AADFlhB;;AAIA6E,sGAGQ,UAHRA,wBAIe,aAAY;AACvBf,kDACEiB,QADFjB,CACEiB,CADFjB,EAEE,aAAY;AACV,8BACEb,sBACA8B,cAAc9B,EAFhB;AAHJa,wBAQE,cAAa;AACX,8BAAO,6BAAP;AATJA,wBAWE;AACE,sCAAe,yCAA8B;AAC3C,6BAAI9D,SAAJ,WAAIA,CAAJ,EAA2B;AACzBD,8DAII0H,wBAAwBrC,EAJ5BrF,WAI4BqF,CAAxBqC,CAJJ1H;AAMAqF,yCAAc,CAACqC,oBACbrC,EADFA,WACEA,CADaqC,CAAfrC;AAPF,gCAUO;AACLA,yCAAc,CAACqC,oBAAfrC,EAAeqC,CAAfrC;AACD;AAdL;;AAiBE+b,kCAAW,4BAAkB;AAC3B,mDAA0B;AACxB;AACA,+BAAIhb,KAAJ,QAAiB;AACf,kDAEEsB,wBAFF,IAEEA,CAFF;AADF,kCAKO;AACL;AACA,iCAAI2Z,YAAY,WAAhB,QAAgB,CAAhB;AACA;AACA;AACD;AACF;AACD3Z;AACAA,+CAAsBzH,QAAtByH,WAAsBzH,CAAtByH;AACAA,+CAAsB;AACpB4Z,oCADoB;AAEpBC,kCAAO;AAFa,0BAAtB7Z;;AAKAzH,gCAAOyH,QAAPzH,aAA4B,qBAAoB;AAC9C,+BAAI4c,EAAJ,QAAc;AACZnV,4DAA+BzH,sBAA/ByH,CAA+BzH,CAA/ByH;AADF,kCAKO;AACLA,4EAEIzH,sBAFJyH,CAEIzH,CAFJyH;AAGD;AAVHzH;AAvCJ;;AAqDE4I,mCAAY;AACVC,gCADU;AAEVC,gCAAO,qBAAqB,sBAAqB;AAC/C,kCAAO,CACL,4BAA2B;AACzB,uDAA0B;AACxBrB,iEAAkC,CAACA,oBAAnCA,UAAmCA,CAAnCA;AAEA8Z,wDAEE9Z,uCAFF8Z;AAMA9Z;AACD;;AAED;;AAEA,iCAAI+Z,WAAJ,QAAuB;AACrB5G,sCAAOvE,yBAECmL,aAFDnL,yBAKH5O,wBALG4O,UAKH5O,CALG4O,cAAPuE,cAAOvE,CAAPuE;AADF,oCASO;AACLA,sCAAOvE,wDAAPuE,cAAOvE,CAAPuE;AAID;AACD,iCAAI2G,WAAW3G,8DAAf,EAAeA,CAAf;AA/BJ,4BAAO,CAAP;AADK;AAFG;AArDd,sBAXF9W;AALJe;AAkHD;AACF;AA7JI,cAAP;AA+JD;AAxKH,UADoB,CAAtB;;AA6KAf,4CAAmCA,wCAAnCA,eAAmCA,CAAnCA;AAGAA,iCACEA,KADFA,6BAEEA,KAFFA,sBAIEA,KAJFA;AAMD;AA9TH,OA+TE,UAAU;AACV;AACD;;AAED,YAAO;AACLX,cADK;AAELkc,uBAFK;AAGLnc,cAAOkc;AAHF,MAAP;AAzVFtb;;AAgWAA,8CAA2C,gDAIzC;AACA,SAAI2d,iBAAJ;;AAEA,SAAI;AACF9C,qBACEA,eACA,YAAW;AACT;AAHJA;AAKA+C,qBACEA,eACA,YAAW;AACT;AAHJA;;AAMA,WAAI5U,iBAAJ;AACA,WAAIC,2BAAJ;;AAEA,WAAI4U,sBAAsB9e,qCACxB7C,SAAS8D,UAAT9D,OADwB6C,WACxB7C,CADwB6C,EAExBiB,UAFwBjB,aAA1B,KAA0BA,CAA1B;;AAOA7C,mCAA4B,aAAY;AACtC,aAAI4hB,cAAJ;AACA,aAAIC,iBAAJ;;AAEA7hB,mBAAU,aAAY;AACpB4hB,uBAAY3e,EAAZ2e;AACAC,6BAAkB5e,gBAAlB4e;AAFF7hB;;AAKA;;AAEA;;AAEA;;AAEA,6BAAoB;AAClB,kBAAO4hB,YAAP,SAAOA,CAAP;AACD;;AAED,aAAIE,gBAAgB9hB,oBAApB;;AAEAA,mBAAU,aAAY;AACpB,eAAI,sBAAJ,GAA6B;AAC3BA,sBAASiD,EAATjD,kBAASiD,CAATjD;AADF,kBAEO;AACLiD;AACD;AALHjD;;AAQAA,6BAAoB,gBAAe;AACjC;AACA,eAAI+hB,mBAAmBje,cAAcqQ,IAArC,CAAuBrQ,CAAvB;AACA,eAAI,CAACie,iBAAL,UAAgC;AAC9BA;AACD;AACDA;AACA,eAAI,qBAAJ,kBAA2C;AACzC/hB,sBAAS+hB,iBAAT/hB,iBAAS+hB,CAAT/hB;AADF,kBAEO;AACL+hB;AACD;AAXH/hB;AA7BFA;AAtBF,OAiEE,YAAY;AACZqD;AACA;AACD;;AAED;AA7EFS;AA+EA;AACA,oEAAiE;AAC/D;;AAEA,SAAIke,WAAW,CAAC3L,QAAhB,SAAiC;AAC/B;AACA/N,kCAA2B,aAAY;AACrCA;AADFA;;AAIA,WAAI2Z,WAAW3Z,EAAf,OAAeA,CAAf;AACA,WAAI4Z,YAAYniB,mBAAhB,KAAgBA,EAAhB;AACAsW,yBAAkB,iBAAiB;AACjCxN,gBAAOA,iBAD0B;AAEjCtE,eAFiC;AAGjC4C,oBAAWA,wBAAwB;AAHF,QAAjB,CAAlBkP;;AAMA;;AAEArW,eAAQA,OAAOqW,gBAAPrW,SAAgCqW,QAAxCrW,OAAQA,CAARA;AAhBF,YAiBO;AACL,WAAIgiB,oBAAoB3L,QAAxB,SAAyC;AACvCA;AACAA;AACD;AACF;AACF;;AAED;;AAEA,OAAI8L,UAAJ;;AAAoB;AAClBjS,gBAAapM,KADf;;AAC0B;AACxBse,0BAFF;AAAA,OAGEhO,iBAHF;AAAA,OAIE9B,aAJF;AAAA,OAKE6J,qBALF;AAAA;AAAA,OAOEkG,gBAAgBtiB,oCAGN,IAHMA,MAGN,CAHMA,QAIP,MAXX,IAWW,CAJOA,CAPlB;;AAaA;;AAEA,OAAI2O,iBAAiB,0CAGX,aAAY;AAClB,SAAI5K,KAAJ,gBAAyB;AACvB,cAAO,CAAP;AACD;AACD,SAAIsB,EAAJ,YACE,OACEtB,0BAA0B,MAAM,IAAIkH,SAAS5F,WAAT4F,QADtC,GACsCA,CAApClH,CADF;AAGF,YAAOA,0BAA0B,KAAK,KAAKkH,UAAU5F,EAArD,MAA2C4F,CAApClH,CAAP;AAXiB,mBAaL,aAAY;AACxB,YAAOkH,SAAS5F,EAAT4F,iBAAP;AAdiB,mBAgBL,aAAY;AACxB,SAAIlH,KAAJ,gBAAyB;AACvB;AACD;AACD,SAAIsB,cAAJ,WAA6B;AAC3B,cAAO,KAAK,MAAMA,EAAlB,OAAO,CAAP;AACD;AACD;AAvBiB,qBAyBH+c,UAzBG,cA0BVre,0BAA0Bue,cAAcxe,WA1B9B,MA0BgBwe,CA1BhB,WAArB,IAAqB,CAArB;;AA6BAtiB,aAAU+D,KAAV/D;AACAA,aAAU+D,KAAV/D;AACA+D;AACAA;;AAEAA,sBAAmB,UACTA,KADS;AAGjB;AAHiB,eAILA,kBAJK,8BAKFA,aAAaA,YAAbA,OAAgCA,YAL9B,sBAMDA,cAAcA,YAAdA,MAAgCA,YANlDA,MAAmB,CAAnBA;;AAQAA;;AAEA;AACA;;AAEA;AACAA,yBAAsBwe,yBAAtBxe,MAAqDwe,yBAArDxe;AACAA,qBAAkBA,+CAEG,0CAFrBA,GAAkBA,CAAlBA;;AAIAA,+DAGcA,kBAHdA,8BAImB;AAJnBA,qKAr2LA,kBAq2LAA,EAr2LA,CAi3LkC;;AAElCkO;;AAEAuQ;;AAEAxiB,aAAU+D,KAAV/D;;AAEA,gBAAa;AACX,SAAIC,WAAW+D,QAAf,QAAeA,CAAX/D,CAAJ,EAAmC;AACjC8D,gCAAyBC,QAAzBD,QAAyBC,CAAzBD;AACD;;AAED,SAAI,eAAJ,SAA4B;AAC1BA,wBAAiBC,QAAjBD,WAAiBC,CAAjBD;AACD;;AAED,SAAI,iBAAJ,SAA8B;AAC5BA,0BAAmBC,QAAnBD,aAAmBC,CAAnBD;AACD;;AAED,SAAI,eAAJ,SAA4B;AAC1BC;AACD;;AAEDD;AACA4K;;AAEA,SAAI1O,UAAU+D,QAAd,QAAcA,CAAV/D,CAAJ,EAAkC;AAChC8D,iCACE,SAASA,KAAT,UAAwB,aAAY;AAClC,gBAAOC,0BAA0BK,EAA1BL,eAAP;AAFJD,QACE,CADFA;AAKD;AACF;AACD;AAj6LF;;AAo6LA,KAAI0e,iCAAiC,SAAjCA,8BAAiC,aAAqB;AACxD,OAAIC,gBAAgB1iB,UAApB,GAAoBA,CAApB;;AAEA0iB,mBAAgB1iB,sBAAhB0iB,OAAgB1iB,CAAhB0iB;AACA,OAAIA,cAAJ,KAAIA,EAAJ,EAA2B;AACzBA,qBAAgB1iB,sBAAhB0iB,OAAgB1iB,CAAhB0iB;AACD;;AAED,OAAIC,aAAJ;;AAEA,OAAI,CAACD,cAAL,KAAKA,EAAL,EAA4B;AAC1BziB,YAAO2iB,MAAP3iB,iBAAO2iB,CAAP3iB,EAAiC,sBAAqB;AACpD,WAAI8D,iBAAiB6X,OAArB,SAAqC;AACnCA;AACD;AACD,WAAI3b,WAAJ,KAAIA,CAAJ,EAAuB;AACrB0iB,yBAAgB,MAAhBA,KAAgB,CAAhBA;AACD;AANH1iB;AAQD;;AAED,OAAIye,UAAJ;AACAze,UAAO2iB,iBAAP3iB,cAAO2iB,CAAP3iB,EAAyC,wBAAuB;AAC9D,UAAK,IAAImU,IAAT,GAAgBA,IAAhB,YAAgC;AAC9BsK,oBAAa3K,QAAb2K;AACD;AAHHze;AAKAye,aAAU5e,wBAAV4e,OAAU5e,CAAV4e;AACAiE,mBAAgB,eAAhBA,EAAgB,CAAhBA;AACAA,mBAAgB,4BAEdjiB,oBAAoBge,QAFtBiE,MAEsBjE,CAApBhe,CAFc,CAAhBiiB;AAIAA,mBAAgB,8BAEdjiB,oBAAoBge,QAFtBiE,QAEsBjE,CAApBhe,CAFc,CAAhBiiB;AAIAA,mBAAgB,6BAEdjE,yBAAyBA,QAF3BiE,KAE2BjE,CAFX,CAAhBiE;AAIAA,mBAAgB,2CAEdjE,wBAAwBA,QAF1BiE,IAE0BjE,CAFV,CAAhBiE;;AAKAjE,aAAU5e,wBAAwB8iB,MAAlClE,eAAkCkE,CAAxB9iB,CAAV4e;AACAiE,mBAAgB,kBAAhBA,EAAgB,CAAhBA;AACAA,mBAAgB,4BAEdjiB,oBAAoBge,QAFtBiE,MAEsBjE,CAApBhe,CAFc,CAAhBiiB;AAIAA,mBAAgB,8BAEdjiB,oBAAoBge,QAFtBiE,QAEsBjE,CAApBhe,CAFc,CAAhBiiB;AAIAA,mBAAgB,6BAEdjE,yBAAyBA,QAF3BiE,KAE2BjE,CAFX,CAAhBiE;AAIAA,mBAAgB,2CAEdjE,wBAAwBA,QAF1BiE,IAE0BjE,CAFV,CAAhBiE;;AAKA,OAAI5e,KAAJ,UAAmB;AACjB2a,eAAU,wBACR,MAAMkE,MAAN,OAAMA,CAAN,EAAsB,aAAY;AAChC,cAAOvf,EAAP;AAFJqb,MACE,CADQ,CAAVA;AAKAiE,qBAAgB,mCAAhBA,EAAgB,CAAhBA;AACAA,qBAAgB,4BAEdhiB,sBAAsB+d,QAFxBiE,MAEwBjE,CAAtB/d,CAFc,CAAhBgiB;AAIAA,qBAAgB,8BAEdhiB,sBAAsB+d,QAFxBiE,QAEwBjE,CAAtB/d,CAFc,CAAhBgiB;AAIAA,qBAAgB,6BAEdhiB,sBAAsB+d,QAAtB/d,KAAsB+d,CAAtB/d,YAEEA,sBAAsB+d,QAJ1BiE,KAI0BjE,CAAtB/d,CAJY,CAAhBgiB;AAMAA,qBAAgB,2CAEdhiB,sBAAsB+d,QAAtB/d,IAAsB+d,CAAtB/d,YAEEA,sBAAsB+d,QAJ1BiE,IAI0BjE,CAAtB/d,CAJY,CAAhBgiB;AAMD;;AAED,OAAIzM,OAAOwM,mCAAX,UAAWA,CAAX;AACAxM;AACAA;AACA,OAAI2M,UAAU,0BAA0B,aAAY;AAClD;AADF,IAAc,CAAd;AAGAA;AACAA;AACAA,gBAAa,aAAY;AACvB;AADFA;AAtGF;;AA2GA9iB;AACAA;AACAA,8D;;;;;;;;;;AC7wMA,KAAIC,KAAK,mBAAAL,CAAT,EAASA,CAAT;AAAA,KACEM,IAAI,mBAAAN,CADN,EACMA,CADN;AAAA,KAEEG,UAAU,mBAAAH,CAFZ,EAEYA,CAFZ;;AAIA,+CAA8C;AAC5C,OAAIyD,QAAQqO,IAAZ;AAAA,OACEtO,QAAQsO,IADV;;AAGA,OAAIqR,iBAAJ;;AAEA3f,iBAAc,gBAAe;AAC3B,8BAAyB;AACvB,cAAOD,QAAP;AACD;;AAED,SAAI6f,UAAU1f,EAAd,WAAcA,CAAd;;AAEA,SAAIwJ,KAAK,aAAa,aAAY;AAC9B,cAAOmW,YAAYD,QAAnB,CAAmBA,CAAZC,CAAP;AADK,QAAT,CAAS,CAAT;AAAA,SAGElW,KAAK,aAAa,aAAY;AAC5B,cAAOkW,YAAYD,QAAnB,CAAmBA,CAAZC,CAAP;AADG,QAHP,CAGO,CAHP;;AAOAF,oBAAejW,GAAfiW,MACIA,eAAejW,GAAfiW,SADJA,EACIA,CADJA,GAEKA,eAAejW,GAAfiW,MAAwB,CAF7BA,EAE6B,CAF7BA;AAGAA,oBAAehW,GAAfgW,MACIA,eAAehW,GAAfgW,SADJA,EACIA,CADJA,GAEKA,eAAehW,GAAfgW,MAAwB,CAF7BA,EAE6B,CAF7BA;AAjBF3f;;AAsBA;AACD;;AAED,KAAI8f,uCAAJ;;AAEAhjB,QAAOA,WAAPA,EAAOA,CAAPA,EAAuB,aAAY;AACjC,OAAIijB,aAAajY,cAAjB;AACAgY,6CAA0C,MAAMhjB,WAAN,CAAMA,CAAN,EAAqB,aAAY;AACzE,YAAO,CAACgL,SAASiY,aAAV,CAACjY,CAAD,EAA2BA,SAASiY,aAA3C,CAAkCjY,CAA3B,CAAP;AADFgY,IAA0C,CAA1CA;AAFFhjB;;AAOA,6CAA4C;AAC1C;AACE;AACA;AACA;AACA;AACA;AACA;AACE,cAAOD,qBAAP,IAAOA,CAAP;AACF;AACE,cAAO,0CAAP,CAAO,CAAP;AACF;AACE,cAAO,0CAAP,CAAO,CAAP;AACF;AACE,cAAO,0CAAP,CAAO,CAAP;AACF;AACE,cAAO,0CAAP,CAAO,CAAP;AACF;AACE,cAAO,0CAAP,CAAO,CAAP;AACF;AACE,cAAO,IAAP,6BAAO,EAAP;AAnBJ;AAqBA;AACA,UAAOA,qBAAP,QAAOA,CAAP;AACD;;AAED,KAAImjB,gCAAgC,SAAhCA,6BAAgC,GAAW;AAC7C,OAAIpf,OAAJ;;AAEAA,kBAAe,YAAW;AACxB,SAAIwG,OACF,OACAxG,KADA,mBAGAA,cAHA,UAKAA,cALA,mBAOAA,KAPA,SADF;AAUA;AAXFA;;AAcAA,uBAAoB,YAAW;AAC7B,YAAOA,KAAP;AADFA;;AAIAA,uBAAoB,gBAAe;AACjC,SAAI9D,WAAJ,IAAIA,CAAJ,EAAsB;AACpB8D;AACAA,qBAAckH,UAAU,cAAcA,KAAtClH,EAAckH,CAAdlH;AACA,cAAOA,KAAP;AACD;;AAED,YAAOA,KAAP;AAPFA;;AAUAA;;AAEA,UAAOA,KAAP;AAjCF;;AAoCA,KAAIqf,gCAAgC,SAAhCA,6BAAgC,GAAW;AAC7C,OAAIrf,OAAJ;;AAEAA,kBAAe,YAAW;AACxB,SAAIwG,OAAO,OAAOxG,KAAP,SAAX;;AAEA,SAAIA,cAAJ,sCAAwD;AACtDwG,eAAQ,qCAAqCxG,KAArC,WACD,iBAAgB;AACnB,gBAAO,OAAOA,cAAcI,MAArB,CAAqBA,CAArB,SAAsCJ,cAAcI,MAA3D,CAA2DA,CAA3D;AAFI,eAARoG,GAAQ,CAARA;AADF,YAMO;AACL,WAAI2Y,aAAajY,cAAclH,KAA/B;AAAA,WACEsf,gBADF;AAEA,YAAK7gB,IAAL,GAAYA,IAAIuB,aAAhB,QAAqC;AACnCsf;AACA9Y,iBACE,OACAxG,cAAckH,SADd,aACcA,CADd,SAGAlH,cAAckH,SAJhBV,aAIgBU,CAJhBV;AAKD;AACF;;AAEDA;AACA;AAvBFxG;;AA0BAA,wBAAqB,gBAAe;AAClC,SAAI9D,oBAAoB8G,OAAxB,GAAkC;AAChChD;AACA,cAAOA,KAAP;AACD;;AAED,YAAOA,KAAP;AANFA;;AASAA,uBAAoB,YAAW;AAC7B,YAAOA,KAAP;AADFA;;AAIAA,uBAAoB,gBAAe;AACjC,SAAI9D,WAAJ,IAAIA,CAAJ,EAAsB;AACpB8D;AACAA,qBAAckH,UAAUlE,OAAOkE,KAA/BlH,EAAckH,CAAdlH;AACA,cAAOA,KAAP;AACD;;AAED,YAAOA,KAAP;AAPFA;;AAUAA;AACAA;;AAEA,UAAOA,KAAP;AAvDF;;AA0DA,mDAAkD;AAChD,OAAIX,QAAQqO,IAAZ;AAAA,OACEtO,QAAQsO,IADV;;AAGArO,iBAAc,aAAY;AACxBF,mBAAclD,GAAdkD,GAAclD,EAAdkD;AADFE;;AAIAD,iBAAc,aAAY;AACxBC,WAAMC,EAAND,sBAA8BC,EAA9BD;AACAA,WAAMC,EAAND,sBAA8BC,EAA9BD;AAFFD;AAID;;AAED;AACA,wCAAuC;AACrC,OAAImgB,YAAJ;AACA9gB,OAAIkS,SAAJlS,CAAIkS,CAAJlS;AACAmR,OAAIe,SAAJf,CAAIe,CAAJf;;AAEA,QAAK,IAAItP,IAAT,GAAgBA,IAAIkf,WAApB,aAA4C;AAC1C,SAAInP,IAAImP,WAAR,CAAQA,CAAR;AACA,SAAIC,eAAJ;;AAEA,SAAIA,yBAAyBA,gBAA7B,GAAgD;AAC9C,cAAO,CAAC,CAAC9O,SAAD,CAACA,CAAD,EAAcA,SAAtB,CAAsBA,CAAd,CAAD,CAAP;AADF,YAEO;AACL,WAAI+O,YAAYC,2BAAhB,YAAgBA,CAAhB;AACA,WAAIC,YAAYD,sCAAhB,CAAgBA,CAAhB;;AAEA,YAAK,IAAIE,YAAT,GAAwBA,YAAYH,UAApC,qBAAmE;AACjE,aAAII,MAAMJ,UAAV,SAAUA,CAAV;AACA,cAAK,IAAIK,YAAT,GAAwBA,YAAYH,UAApC,qBAAmE;AACjE,eAAII,MAAMJ,UAAV,SAAUA,CAAV;AACA,eAAIE,IAAJ,QAAgB;AACd,iBACEA,eACAA,IAAIA,aAAJA,MADAA,KAEAE,UAFAF,KAGAE,IAAIA,aAAJA,MAJF,GAKE;AACAF;AACAP,8BAAeO,WAAfP,GAAeO,CAAfP;AACD;AACF;AACF;AACF;AACF;AACF;;AAED;AACD;;AAED,qDAAoD;AAClD,OAAIvL,QAAQ2L,2BAAZ,CAAYA,CAAZ;;AAEA;AACA3L,WAAQ,UAAU,mBAAkB;AAClC,YAAOiM,iBAAiB,CAAxB,CAAOA,CAAP;AADFjM,IAAQ,CAARA;;AAIA,OAAI,CAAJ,OAAY;AACV;AACD;;AAED,OAAIkM,YAAJ;;AAEA,QAAK,IAAI7P,IAAT,GAAgB5R,IAAIuV,MAApB,aAAuC;AACrCiM,eAAUjM,MAAViM,CAAUjM,CAAViM;AACAC,oBACE,OACE,YAAY,aAAY;AACtB,cAAO/gB,KAAP;AAHN+gB,MAEI,CADF,CADFA;AAOD;;AAED,OAAIjR,OAAOhT,QAAX,SAAWA,CAAX;;AAEA,OAAIgT,SAAJ,WAAwB;AACtBA;AACD;;AAED;AACD;;AAED;AACA,iGAIE;AACA;AACA,OAAIhF,YAAJ;AACA,OAAIuV,OAAJ;AACA,OAAIngB,QAAQqO,IAAZ;AACA,OAAItO,QAAQsO,IAAZ;AACA,OAAIyS,WAAJ;;AAEA,OAAIpB,iBAAiBqB,gCAArB,GAAqBA,CAArB;;AAEA,OAAI,CAAJ,QAAa;AACXpF,cAASqF,YAATrF,cAASqF,CAATrF;AACD;;AAED,OAAIsF,aAAatF,OAAjB;;AAEA,QAAK,IAAIvc,IAAT,GAAgBA,IAAIuc,OAApB,aAAwC;AACtC,SAAI7P,SAAS6P,OAAb,CAAaA,CAAb;AACA,SAAIuF,YAAY,wBAAwB,aAAY;AAClD;AADF,MAAgB,CAAhB;AAGA,SAAIC,SAAS,wBAAwB,aAAY;AAC/C;AADF,MAAa,CAAb;AAGAvW;AACAuV;AACD;;AAED,QAAK,IAAIxP,QAAT,GAAoBA,QAAQgL,OAA5B,iBAAoD;AAClD,SAAI7P,SAAS6P,OAAb,KAAaA,CAAb;AACA,UAAK,IAAIyF,SAAT,GAAqBA,SAASzF,OAA9B,kBAAuD;AACrD,WAAI0F,cAAc1F,OAAlB,MAAkBA,CAAlB;AACA,WAAI0F,eAAJ,QAA2B;AACzB,aACE,2BACO,aAAY;AACf,kBAAOvhB,EAAP;AAFJ,oCAI2B,CAL7B,GAME;AACA8K;AACAA;AACD;AACF;AACF;AACF;;AAED,QAAK,IAAI0W,UAAT,GAAsBA,UAAU3F,OAAhC,mBAA0D;AACxD,SAAI4F,MAAM5F,OAAV,OAAUA,CAAV;AACA,UAAK,IAAI6F,UAAT,GAAsBA,UAAU7F,OAAhC,mBAA0D;AACxD,WAAI8F,MAAM9F,OAAV,OAAUA,CAAV;AACA,WAAI2F,WAAJ,SAAwB;AACtBnB;AADF,cAEO;AACLA,kCAAyB,CAAzBA,OAAyB,CAAzBA;AACD;AACF;AACF;;AAED;AACA,OAAIuB,aAAa7kB,iBAAiBA,EAAlC,KAAiBA,CAAjB;AACA,OAAIoE,IAAJ;;AAEA,QAAK,IAAI0gB,UAAT,GAAsBA,UAAUhG,OAAhC,mBAA0D;AACxD,SAAIiG,MAAMjG,OAAV,OAAUA,CAAV;AACA,UAAK,IAAI2F,UAAT,GAAsBA,UAAU3F,OAAhC,mBAA0D;AACxD,WAAI4F,MAAM5F,OAAV,OAAUA,CAAV;AACA,YAAK,IAAI6F,UAAT,GAAsBA,UAAU7F,OAAhC,mBAA0D;AACxD,aAAI8F,MAAM9F,OAAV,OAAUA,CAAV;;AAEA,aAAI4F,OAAJ,KAAgB;AACdM,kBAAOjX,mBAAPiX,OAAOjX,CAAPiX;AACAC,kBAAOlX,mBAAPkX,OAAOlX,CAAPkX;AACAC,kBAAOnX,mBAAPmX,OAAOnX,CAAPmX;;AAEA,eAAIF,iBAAiBC,SAArB,MAAoC;AAClCD;AACA,iBAAIE,iBAAiBA,OAArB,MAAkC;AAChCL;AACAA;AACAvB;AACAA,wCAAyBA,8BACvBA,cADFA,OACEA,CADuBA,CAAzBA;AAGA;AAPF,oBAQO,IAAI4B,QAAJ,MAAkB;AACvB5B,wCAAyBA,8BACvBA,cADFA,OACEA,CADuBA,CAAzBA;AAGD;AACF;AACDlf;AACAygB,0CAA+B9W,mBAA/B8W,OAA+B9W,CAA/B8W;AACAA,0CAA+B9W,mBAA/B8W,OAA+B9W,CAA/B8W;AACD;AACF;AACF;;AAED,SAAIjI,IAAJ;AACAiI;AACA9W;AACD;;AAED,UAAO;AACLoX,eADK;AAELpX,gBAFK;AAGLuV,WAAMA;AAHD,IAAP;AAKD;;AAED,wDAAuD;AACrD,OAAIngB,QAAQqO,IAAZ;AAAA,OACEtO,QAAQsO,IADV;AAAA,OAEE1G,aAFF;;AAIA;AACA,OAAIsa,WAAW,aAAa,aAAY;AACtC,YAAO7hB,QAAQN,EAAf;AADF,IAAe,CAAf;;AAIA,iBAAc;AACZ6H,kBAAasa,YAAbta;AADF,UAEO;AACLzH;AACA;AACD;;AAED;AACA,OAAIgiB,mBAAmB,aAAa,aAAY;AAC9C,YAAOva,cAAc7H,EAArB;AADF,IAAuB,CAAvB;AAGA,OAAIghB,WAAW,qBAAqB,aAAY;AAC9C,YAAOhhB,EAAP;AADF,IAAe,CAAf;AAGA,OAAIqiB,mBAAmB,aAAa,aAAY;AAC9C,YAAOrB,iBAAiB7gB,YAAjB6gB,CAAiB7gB,CAAjB6gB,KAAoC,CAA3C;AADF,IAAuB,CAAvB;;AAIA,OAAIsB,eAAJ;AACAA;AACAA;AACA;AACD;;AAED,yFAIE;AACA,OAAIpiB,QAAQqO,IAAZ;AAAA,OACEtO,QAAQsO,IADV;;AAGA,OAAI6T,mBAAmB,aAAa,aAAY;AAC9C,YAAO7gB,WAAWvB,EAAlB;AADF,IAAuB,CAAvB;AAGA,OAAIghB,WAAW,qBAAqB,aAAY;AAC9C,YAAOhhB,EAAP;AADF,IAAe,CAAf;AAGA,OAAIqiB,mBAAmB,aAAa,aAAY;AAC9C,YAAOrB,iBAAiB7gB,YAAjB6gB,CAAiB7gB,CAAjB6gB,KAAoC,CAA3C;AADF,IAAuB,CAAvB;;AAIA,OAAIsB,eAAJ;AACAA;AACAA;;AAEA;AACA,OAAIF,0BAAJ,IAAkC;AAChCG;AACA;AACD;;AAED;AACA,OAAI1N,QAAQ2N,oDAAZ,YAAYA,CAAZ;AACA,OAAIxB,WAAW,qBAAqB,aAAY;AAC9C,YAAOhhB,EAAP;AADF,IAAe,CAAf;;AAIA,OAAIyiB,cAAJ;AACAL,4BAAyB,aAAY;AACnCK,iBAAYziB,EAAZyiB,MAAoBC,wCAClB1iB,EADkB0iB,kBAApBD,KAAoBC,CAApBD;AADFL;;AAQAG;AACA;AACD;;AAED;AACA;AACA,oEAAmE;AACjE,OAAI,CAAJ,OAAY;AACV,SAAID,eAAeK,yCAAnB,GAAmBA,CAAnB;AACA9N,aAAQ2N,oDAAR3N,YAAQ2N,CAAR3N;AACD;;AAED;AACA,OAAIhE,QAAQgE,uBAAZ,IAAYA,CAAZ;;AAEA,OAAIhE,SAAS,CAAb,GAAiB;AACf;AACD;;AAED,OAAI4C,SAASoB,gBAAb;;AAEA,OAAIpB,UAAJ,GAAiB;AACf+B,aAAQ,KAAK,CAAC/B,SAAD,MAAgBA,SAA7B+B,CAAa,CAAL,CAARA;AADF,UAEO;AACLA;AACD;;AAED;AACA;AACA,OAAIoN,kBAAJ;AACA,QAAK,IAAL,KAAc7lB,QAAd,MAAcA,CAAd,EAA+B;AAC7B,UAAK,IAAL,KAAcA,QAAd,MAAcA,CAAd,EAA+B;AAC7B6lB,4BAAqBC,gCAAgChO,MAAhCgO,SAArBD,CAAqBC,CAArBD;AACD;AACF;;AAED,UAAO9lB,0BAAP;AACD;;AAED,6CAA4C;AAC1C,OAAIoD,QAAQqO,IAAZ;AAAA,OACEtO,QAAQsO,IADV;;AAGA,QAAK,IAAL,YAAqB;AACnBrO;AACD;;AAED,QAAK,IAAL,YAAqB;AACnBA,WAAMD,SAANC;AACAA,WAAMD,SAANC;AACD;AACF;;AAED,2CAA0C;AACxC,UACE,iBAAiB,aAAY;AAC3B,YAAOkC,MAAMpC,EAAb;AADF,YADF;AAKD;;AAED,8DAA6D;AAC3D,OAAIE,QAAQqO,IAAZ;;AAEA,2CAAwC;AACtC,YAAO1N,wBAAP;AACD;;AAED;AACA,OAAIhB,WAAW,UAAU,aAAY;AACnC,YAAOG,EAAP;AADF,IAAe,CAAf;AAGA,OAAI8iB,kBAAkBjjB,gBAAtB,UAAsBA,CAAtB;;AAEA,OAAIkjB,WAAJ;;AAEA,6BAA0B;AACxBA;;AAEA,UAAK,IAAL,iBAA0B;AACxBC,2DAAoDC,QAApDD,IAAoDC,CAApDD;AACD;;AAED,SAAID,YAAYD,gBAAhB,QAAwC;AACtCnhB;AACD;AACF;;AAED;AACAmhB,2BAAwB,sBAAqB;AAC3CI;AADFJ;;AAIA;AACD;;AAED,wCAAuC;AACrC,UAAOxiB,0CAA0C,CAAjD;AACD;;AAED,iDAAgD;AAC9C;AACA6iB;;AAEAC,6CAA0C,eAAc;AACtD,SAAIC,aAAa,cAAc,aAAY;AACzC,cAAO,CACLlhB,EADK,IAELA,EAFK,SAGLA,EAHK,QAILA,EAJK,aAKLmhB,wBALK,CAKLA,CALK,EAMLnhB,kBANF,GAMEA,CANK,CAAP;AADF,MAAiB,CAAjB;AAUAkhB,wBAAmB,gEAAnBA,YAAmB,CAAnBA;AAQAE,gBAAWzmB,cAAXymB,UAAWzmB,CAAXymB;AACA5hB;AApBFyhB;AAsBD;;AAED,iDAAgD;AAC9C,OAAI7jB,OAAO,+BAA+B,qBAAoB;AAC5D,SAAIA,SAAJ,MAAmB;AACjB,WAAIikB,MAAMC,uBAAV,GAAUA,CAAV;AACAD,gCAEE,iCAAiCE,mBAFnCF,IAEmCE,CAFnCF;AAIAA;AACAA;AACAA;AAEAne;AACD;AAZH,IAAW,CAAX;AAcD;;AAED,mEAAkE;AAChE,OAAIse,aAAa7mB,UAAjB,SAAiBA,CAAjB;AACA6mB;;AAEAA,gBAAa,iGAIE,yBAAwB;AACnC7mB;AACA,SAAI8mB,YAAY9mB,qBAAhB,YAAgBA,CAAhB;AACA,SAAI+mB,aAAajnB,sBAAjB,SAAiBA,CAAjB;AACAA,wCAEEgnB,yBAFFhnB;AARS,yBAAb+mB,QAAa,CAAbA;;AAgBAA;AACA;AACD;;AAED,KAAIG,iDAAiD,OAAO,eAAc;AACxEC;;AAEA,OAAI7jB,QAAQqO,IAAZ;;AAEArO,iBAAc,aAAY;AACxB,SAAI8L,SAAJ;AACA,SAAID,oBAAoBC,iBAAxB,IAAwBA,EAAxB;;AAEA,SAAID,oBAAJ,GAA2B;AACzBC;AADF,YAEO;AACL,WAAID,oBAAJ,KAA6B;AAC3BC;AADF,cAEO;AACL;AACAC,wBAAeD,iBAAfC,MAAeD,EAAfC;AACAC;AACA,cAAKvC,KAAL,GAAaA,KAAb,mBAAqCA,MAArC,GAA8C;AAC5C,gBAAKC,KAAKD,KAAV,GAAkBC,KAAlB,mBAA0CA,MAA1C,GAAmD;AACjD,iBAAI1J,MAAM+L,aAAN/L,EAAM+L,CAAN/L,gBAAsC+L,aAA1C,EAA0CA,CAAtC/L,CAAJ,EAA6D;AAC3DgM;AACD;AACF;AACF;AACDF,sBAAa,mCAAmCD,oBAAhDC,CAAa,CAAbA;AACD;AACF;AAtBH9L;AALF,EAAqD,CAArD;;AA+BA,2DAA0D;AACxD;AACA;AACA;AACA;AACD;;AAED,kDAAiD;AAC/C,OAAI,iBAAJ,aAAkC;AAChC;AACD;AACD,OAAIe,UAAJ,oBAAkC;AAChC;AACD;AACD,OAAIA,UAAJ,oBAAkC;AAChC;AACD;;AAED,OAAIA,UAAJ,qBAAmC;AACjC;AACD;;AAED,UAAO+iB,YAAYA,UAAZA,KAAYA,CAAZA,GAAP;AACD;;AAED,6GAQE;AACAljB,aAAUA,WAAW;AACnB6D,gBADmB;AAEnBrC,UAFmB;AAGnBC,YAHmB;AAInBC,aAAQ,IAJW;AAKnBC,WAAM,IALa;AAMnBmC,gBANmB;AAOnBC,gBAPmB;AAQnBC,YARmB;AASnBC,aAAQ;AATW,IAArBjE;;AAYA,OAAImjB,kBAAkBnjB,WAAWA,QAAjC,iBAAiCA,CAAjC;;AAEA,OAAIgE,QAAQhE,gBAAgBA,QAAhBA,OAA+BA,QAA3C;AACA,OAAIiE,SAASjE,iBAAiBA,QAAjBA,MAA+BA,QAA5C;;AAEAojB,YACEA,UACA,gBAAe;AACb,SAAIC,OAAOvhB,KAAX,WAAWA,EAAX;AAAA,SACEwhB,kBAAkB,IADpB,IACoB,EADpB;AAAA,SAEEC,YAAY,IAFd,IAEc,EAFd;;AAIAD;AACAA;AACAC;;AAEA,SAAIC,UAAUvc,WAAWnF,kBAAXmF,KAAd;AACAqc,8BAAyBE,UAAzBF;AACAA;AACAC;;AAEAD,iCAA4BD,QAAQG,mBAApCF,CAA4BD,CAA5BC;AACAC,wBAAmBC,cAAnBD;AACAA;;AAEA,YAAO,CAAC,sBAAD,uBAAP,SAAO,CAAP;AApBJH;;AAuBA;;;;;;;;;;;;;;;AAeA,OAAI/e,IAAIrI,sBAAsB,IAA9B,KAA8B,CAAtBA,CAAR;;AAEA,OAAIsI,IAAIwG,oBAAoB9O,SAA5B,MAA4BA,EAA5B;;AAEAsI,WAAQ,SAARA,CAAQ,CAARA;;AAEA,OAAImf,QAAQznB,4DAKEA,eALd,OAKcA,CALFA,CAAZ;;AAOA,OAAI0nB,QAAQ1nB,+CAAZ,GAAYA,CAAZ;;AAEA,OAAI4Q,SAAJ;AACA,OAAI+W,sBAAJ;AACA,OAAIC,WAAJ;AACA,OAAIC,cAAJ;AACA,OAAI1f,SAASnE,WAAWA,QAAXA,QAAWA,CAAXA,GAA+BA,QAA/BA,QAA+BA,CAA/BA,GAAb;AACA,OAAI8jB,UAAJ;;AAEA7nB,uBAAoB,wBAAuB;AACzC,SAAI8nB,UAAUX,OAAOY,MAArB,MAAqBA,CAAPZ,CAAd;AACA,SAAI,EAAEW,cAAN,MAAI,CAAJ,EAA6B;AAC3BnX,cAAOmX,QAAPnX,CAAOmX,CAAPnX,IAAqB,EAAEkO,MAAMiJ,QAAR,CAAQA,CAAR,EAAoB1f,GAAG0f,QAA5CnX,CAA4CmX,CAAvB,EAArBnX;AACAA,cAAOmX,QAAPnX,CAAOmX,CAAPnX;AACA3Q,qBAAc,gBAAe;AAC3B,aAAImU,KAAJ,QAAiB;AACfxD,kBAAOmX,QAAPnX,CAAOmX,CAAPnX;AACD;AAHH3Q;AAKD;;AAED2Q,YAAOmX,QAAPnX,CAAOmX,CAAPnX;AACAkX,eAAU7c,kBAAkB2F,OAAOmX,QAAPnX,CAAOmX,CAAPnX,EAA5BkX,QAA4BlX,CAAlB3F,CAAV6c;;AAEA,SAAIxf,IAAJ;AACAA,mBAAcyL,QAAdzL;AACArI,mBAAc,gBAAe;AAC3B,WAAImU,KAAJ,QAAiB;AACfxD,gBAAOmX,QAAPnX,CAAOmX,CAAPnX,UAA2BA,OAAOmX,QAAPnX,CAAOmX,CAAPnX,UACvBA,OAAOmX,QAAPnX,CAAOmX,CAAPnX,UADuBA,IAA3BA;AAGA,aAAI,EAAEwD,KAAN,mBAAI,CAAJ,EAAiC;AAC/BuT;AACD;AACD,aAAIhjB,KAAKgjB,oBAAT,CAASA,CAAT,EAAiC;AAC/BA;AADF,gBAEO;AACLA;AACD;AACDG,mBAAU7c,kBAAkB2F,OAAOmX,QAAPnX,CAAOmX,CAAPnX,KAA5BkX,CAA4BlX,CAAlB3F,CAAV6c;AACAxf,gBAAOrI,QAAQ0nB,oBAAfrf,CAAeqf,CAAR1nB,CAAPqI;AACD;AAfHrI;;AAkBA+nB;AACAA,qBAAgBD,QAAhBC,CAAgBD,CAAhBC;AApCF/nB;;AAuCA,OAAIgoB,eAAJ;AACAhoB,kBAAe,gBAAe;AAC5B0E;AACAsjB;AAFFhoB;;AAKAgoB,qBAAkB,gBAAe;AAC/B,YAAO/c,YAAYC,EAAZD,MAAYC,CAAZD,OAA4BA,aAAaC,EAAbD,MAAaC,CAAbD,OAA6B,CAAhE;AADF+c;;AAIA,OAAIC,QAAQ,oBAAoB,aAAY;AAC1C,YAAO7iB,YAAYA,EAAZA,MAAYA,CAAZA,GAAwBA,EAAxBA,MAAwBA,CAAxBA,GAAoCA,EAA3C,MAA2CA,CAA3C;AADF,IAAY,CAAZ;AAGA,OAAI8iB,QAAQ,oBAAoB,aAAY;AAC1C,YAAO9iB,YAAYA,EAAZA,MAAYA,CAAZA,GAAwBA,EAAxBA,MAAwBA,CAAxBA,GAAoCA,EAA3C,MAA2CA,CAA3C;AADF,IAAY,CAAZ;;AAIAgD,YAAS,QAATA,KAAS,CAATA;AACAC,YACU,MAEN2C,WAAWkc,kBAAkBW,UAAlBX,IAAgCiB,qBAH/C9f,GAGI2C,CAFM,CADV3C;;AAOA;;AAEA;;;;AAIAlB,4BApJA,MAoJAA,GApJA,CAoJmC;;AAEnC,OAAIihB,cAAcjhB,wCAId,gBACGpD,eAAeA,oBADlB,cAGGA,cAAcA,QAHjB,aAJJ,GAAkBoD,CAAlB;;AAWA,OAAI0V,MAAM1V,wCAEW,eAAepD,QAAf,aAAoCA,QAApC,MAFrB,GAAUoD,CAAV;;AAIA;;AAEA,OAAIkhB,QAAQroB,4BAAZ,CAAYA,CAAZ;;AAEA,OAAIqG,cACF,0BACAtC,QADA,WACAA,CADA,IAEAskB,SAAStkB,QAFT,WAESA,CAFT,GAGIA,qBAHJ,KAGIA,CAHJ,GAIIhE,SALN,UAKMA,EALN;;AAOAsG,iBAAc,oBAAoB,qBAAoB;AACpD,SAAIgT,OAAJ,UAAqB;AACrB,YAAOP,KAAP,GAAOA,CAAP;AAFFzS,IAAc,CAAdA;;AAKA,OAAIiiB,aAAatoB,OAAO0nB,oBAAxB,KAAwBA,CAAP1nB,CAAjB;AACAsoB;AACAA;;AAEA,OAAIvkB,WAAWA,QAAf,MAAeA,CAAf,EAAgC;AAC9B,SAAIoE,OAAOpI,YAAX,IAAWA,EAAX;AACAoI,qBAAgB,YAAW;AACzBpE,4BAAqBhE,SAArBgE;AACAA,4BAAqBhE,SAArBgE;AACAhE,yCAII,eAAegE,gBAAf,UAAyCA,gBAAzC,IAJJhE;AAHFoI;AAUAhB;AACD;;AAED,OAAIohB,eAAeH,gCAAnB,UAAmBA,CAAnB;;AAEAG;;AAEA,wCAAqC;AACnCxoB,eACU,yBADVA,4BAEyByoB,eAFzBzoB;AAGAA,eACU,0BADVA,4BAEyByoB,aAFzBzoB;AAGD;;AAEDwoB,uCAEQ,aAAY;AAChB,YAAO,CAAP,CAAO,CAAP;AAHJA,+CAOqB,mBAAkB;AACnC,YACE,eACAxkB,QADA,mBAGCA,qBAAqBukB,wBAArBvkB,MACEA,oBAAoBA,QAJvB,SAGCA,CAHD,IADF;AARJwkB,6CAkBsBxkB,QAlBtBwkB,gBAmBQ,aAAY;AAChB;AApBJA,sBAsBmB,aAAY;AAC3BE,oBAAevgB,SAAfugB;AAvBJF,qBAyBkB,aAAY;AAC1BE,oBAAevgB,SAAfugB;AA1BJF;;AA6BAA,uCAEQ,aAAY;AAChB,YAAO,CAAP,CAAO,CAAP;AAHJA,oDAQa,mBAAkB;AAC3B,YAAOxkB,qBAAqBukB,wBAA5B,CAAOvkB,CAAP;AATJwkB,oBAWiBxkB,QAXjBwkB,0BAYkBxkB,QAZlBwkB,+CAciB,mBAAkB;AAC/B,YAAOliB,YAAP,CAAOA,CAAP;AAfJkiB,sBAiBmB,aAAY;AAC3BE,oBAAevgB,SAAfugB;AAlBJF,qBAoBkB,aAAY;AAC1BE,oBAAevgB,SAAfugB;AArBJF;;AAwBA,OAAIG,OAAO1oB,QAAQmoB,YAAYA,qBAA/B,CAAmBA,CAARnoB,CAAX;AACA0oB,kBAAetgB,WAAfsgB,CAAetgB,CAAfsgB;AACAP;;AAEAnoB,sBAAmB,yBAAwB;AACzC,SAAI2oB,aAAatiB,YAAjB,QAAiBA,CAAjB;AACA,SAAIuiB,aAAa,SAAbA,UAAa,IAAY;AAC3B;AACA,WAAIC,YAAYzjB,EAAhB,GAAgBA,CAAhB,EAAwB;AACtB,gBAAOA,OAAP,QAAOA,CAAP;AACD;AACD,WAAIijB,SAASjjB,EAAb,GAAaA,CAAb,EAAqB;AACnB,aAAIyjB,YAAYzjB,OAAhB,KAAgBA,CAAhB,EAA+B;AAC7B,kBAAOA,cAAP,QAAOA,CAAP;AACD;AACF;AACD;AAVF;;AAaA,SAAI0jB,eAAe,SAAfA,YAAe,IAAY;AAC7B,WAAIT,SAASQ,YAAYzjB,EAAzB,KAAyBA,CAAzB,EAAmC;AACjC,gBAAOA,SAAP,QAAOA,CAAP;AADF,cAEO;AACL,aAAIyjB,YAAJ,GAAmB;AACjB,kBAAOzjB,EAAP,QAAOA,CAAP;AACD;AACF;AACD;AARF;;AAWA,SAAI,CAAJ,iBAAsB;AACpB,WAAI2jB,QAAQ,gBAEP,aAAY;AACb,gBAAO3gB,EAAEhD,EAAT,MAASA,CAAFgD,CAAP;AAHQ,aAKN,aAAY;AACd,gBAAOC,EAAEugB,WAAT,CAASA,CAAFvgB,CAAP;AANQ,aAQN,aAAY;AACd,gBAAOA,EAAP,CAAOA,CAAP;AATQ,sBAAZ,MAAY,CAAZ;;AAaAwU,+JAOuB3U,SAPvB2U;AAQD;;AAEDmL,0BAAqB,aAAY;AAC/BnL,uCAEczU,EAAEhD,EAFhByX,MAEgBzX,CAAFgD,CAFdyU,aAGcxU,EAAEygB,aAHhBjM,CAGgBiM,CAAFzgB,CAHdwU,2GAQiBgM,mBAAmBC,aARpCjM,CAQoCiM,CARpCjM;AADFmL;;AAYA,SAAIgB,aAAa,gBAEZ,aAAY;AACb,cAAO5gB,EAAEhD,EAAT,MAASA,CAAFgD,CAAP;AAHa,UAKZ,aAAY;AACb,cAAOC,EAAEygB,aAAT,CAASA,CAAFzgB,CAAP;AANa,oBAAjB,UAAiB,CAAjB;;AAUAwU,2IAMwB3U,SANxB2U;AAxEF7c;;AAiFA;AACA,OAAIipB,SAASpM,0DAGQ,0BAHRA,wBAIS9Y,QAJT8Y,gBAAb,KAAaA,CAAb;;AAOAoM;;AAMAA,6GAKsBllB,QALtBklB;;AAQA;AACApM,8DAGsB9Y,QAHtB8Y,yDAMsB9Y,QANtB8Y,8GAtXA,OAsXAA,EAtXA,CAiYkB;AACnB;;AAED/c;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,kE;;;;;;;;;;ACxjCA,KAAIopB,WAAW,mBAAAxpB,CAAf,EAAeA,CAAf;;AAEA,KAAIypB,yBAAyB,SAAzBA,sBAAyB,MAAc;AACzC7gB;AACAA;AAFF;;AAKA,6CAA4C;AAC1C,OAAI8gB,MAAM,IAAV,KAAU,EAAV;;AAEAA;;AAEAA,gBAAa,kBAAkB;AAC7B,SAAIC,SAAS3C,wBAAb,oBAAaA,CAAb;AACA2C,oBAAeD,IAAfC;AACAA,qBAAgBD,IAAhBC;;AAEA,SAAIC,MAAMD,kBAAV,IAAUA,CAAV;AACAC;AACAA,wBAAmBD,OAAnBC,OAAiCD,OAAjCC;AACAA,8BAAyBD,OAAzBC,OAAuCD,OAAvCC;;AAEA,SAAID,OAAJ,UAAqB;AACnB,WAAIE,OAAOF,gBAAX,SAAWA,CAAX;AACAG;AACA/pB;AAHF,YAIO;AACL4pB;AACD;AAhBHD;;AAmBAA;AACD;;AAED,KAAIK,+BAA+B,SAA/BA,4BAA+B,OAAe;AAChDjnB,UAAOzC,cAAPyC,IAAOzC,CAAPyC;AACA,OAAIA,SAAJ,MAAmB;AACjB,SAAIikB,MAAMC,uBAAV,GAAUA,CAAV;AACAD,8BAEE,iCAAiCE,mBAFnCF,IAEmCE,CAFnCF;AAIAA;AACAA;AACAA;AAEAne;AACAme;AACAA;AACD;AAfH;;AAkBA,KAAIiD,wBAAwB,SAAxBA,qBAAwB,kBAA0B;AACpD,OAAIxhB,SAAS;AACXyhB,YADW;AAEXC,YAFW;AAGX/M,UAAK;AAHM,IAAb;;AAMA,4BAAyB;AACvB,qCAAgC;AAC9B,WAAI;AACF,aAAIgN,GAAJ,UAAiB;AACf,gBAAK,IAAItnB,IAAT,GAAgBA,IAAIsnB,YAApB,aAA6C;AAC3C,iBAAIC,OAAOD,YAAX,CAAWA,CAAX;AACA,iBAAIC,cAAJ,GAAqB;AACnB;AACAC,kCAAmBD,KAAnBC;AAFF,oBAGO;AACL;AACA,mBAAID,KAAJ,cAAuB;AACrB,qBAAIA,mCAAmC,CAAvC,GAA2C;AACzCE,6BAAU,OAAOF,KAAjBE;AACD;AACF;AACF;AACF;AACF;AAhBH,SAiBE,UAAU;AACV3mB,qBAAY,oCAAZA;AACD;AACF;;AAED,SAAI2mB,SAAJ;AAAA,SACEC,cAAcC,IADhB;;AAGA,sBAAiB;AACf,YAAK,IAAI3nB,IAAT,GAAgBA,IAAI0nB,YAApB,aAA6C;AAC3CF,4BAAmBE,YAAnBF,CAAmBE,CAAnBF;AACD;AACF;;AAED;AACD;;AAED,OAAII,qBAAqB,SAArBA,kBAAqB,eAAuB;AAC9C,SAAIC,QAAQ1D,wBAAZ,mBAAYA,CAAZ;;AAEA0D,oBAAe,YAAW;AACxB,WAAIf,SAAS3C,wBAAb,oBAAaA,CAAb;AACA2C,sBAAee,MAAff;AACAA,uBAAgBe,MAAhBf;AACA,WAAIgB,UAAUhB,kBAAd,IAAcA,CAAd;AACAgB;AACAA,8BAAuBD,MAAvBC,OAAoCD,MAApCC;AACAA;AACA,WAAIjB,MAAMC,iBAAV,WAAUA,CAAV;AACA,WAAI5C,MAAMC,uBAAV,GAAUA,CAAV;AACAD;AACAA,kBAAW4C,iBAAX5C,WAAW4C,CAAX5C;AACAne;AACAme;AACAA;AAdF2D;;AAiBAA;AApBF;;AAuBA,OAAIvN,MAAMvU,yBAAV,CAAUA,CAAV;AACA,OAAI,CAAJ,KAAU;AACRuU,WAAMvU,aAANuU,CAAMvU,CAANuU;AACD;;AAED,OAAImN,SAASM,WAAW7qB,OAAxB,QAAa6qB,CAAb;;AAEAzN;;AAEA,OAAI0N,SAAS7D,uBAAb,MAAaA,CAAb;AACA7J,4BAAyBA,IAAzBA;;AAEA,OAAI2N,UAAU9D,uBAAd,OAAcA,CAAd;AACA6D;AACAC;;AAEA;AACA3N;AACAA;;AAEA;AACA,OAAI,CAACA,mBAAmB3U,OAAnB2U,OAAL,OAAKA,CAAL,EAAgD;AAC9CA,wBAAmB3U,OAAnB2U,gBAA0C3U,OAA1C2U;AACD;;AAED,OAAI,CAACA,mBAAmB3U,OAAnB2U,OAAL,aAAKA,CAAL,EAAsD;AACpDA,wBAAmB3U,OAAnB2U,sBAAgD3U,OAAhD2U;AACD;;AAED,OAAIuD,SAAS,+DAEU,uBAFvB,aAAa,CAAb;AAGA,OAAIqK,OAAO5N,IAAX,qBAAWA,EAAX;AACA,OAAI6N,UAAJ;AAEA,OAAIC,cAAc,CAACD,UAAnB,MAAkB,CAAlB;AACA,OAAIE,eACF,+BAA+BjE,mBADjC,WACiCA,CADjC;;AAGA,OAAIkE,UAAJ,YAA0B;AACxB;AACA3B;AAFF,UAGO,IAAI/iB,QAAJ,OAAmB;AACxB2kB,6BAEE,gBAAe;AACb,WAAIC,MAAMtrB,2BAAV,IAAUA,CAAV;AACA,WAAIgnB,MAAMC,uBAAV,GAAUA,CAAV;AACAD;AACAA;AACAne;AACAme;AACAA;AATJqE,QAWE,iBAAgB;AACdznB;AAZJynB;AADK,UAgBA;AACL,SAAIrE,MAAMC,uBAAV,GAAUA,CAAV;AACAD;AACAA;AACAne;AACAme;AACAA;AACD;AAnIH;;AAsIA,KAAIuE,2BAA2B,SAA3BA,wBAA2B,GAAW;AACxC;AACA,OAAI1iB,yBAAJ,GAAgC;AAC9BA;AACAA;AACAA;;AAEAK,uBAAkB;AAChBsiB,cADgB;AAEhBC,aAAM;AAFU,MAAlBviB,cAGeL,EAHfK,IAGeL,CAHfK;AALF,UASO,IAAIwiB,MAAM7a,WAAWhI,QAArB,GAAqBA,EAAXgI,CAAN6a,CAAJ,EAAsC;AAC3C7iB;AACAA;AACAA;;AAEAK,uBAAkB;AAChBsiB,cADgB;AAEhBC,aAAM;AAFU,MAAlBviB,cAGeL,EAHfK,IAGeL,CAHfK;AALK,UASA;AACLL;AACAA;AACAA;AACD;AAxBH;;AA2BA,qCAAoC;AAClC,OAAI0hB,SAAJ;AAAA,OACEC,cAAcC,IADhB;;AAGA,oBAAiB;AACf,UAAK,IAAI3nB,IAAT,GAAgBA,IAAI0nB,YAApB,aAA6C;AAC3CmB,yBAAkBnB,YAAlBmB,CAAkBnB,CAAlBmB;AACD;AACF;;AAED,kCAA+B;AAC7B,SAAIvB,GAAJ,UAAiB;AACf,YAAK,IAAItnB,IAAT,GAAgBA,IAAIsnB,YAApB,aAA6C;AAC3C,aAAIC,OAAOD,YAAX,CAAWA,CAAX;AACA,aAAIC,cAAJ,GAAqB;AACnB;AACAsB,6BAAkBtB,KAAlBsB;AAFF,gBAGO;AACL;AACA,eAAItB,KAAJ,cAAuB;AACrB,iBAAIA,mCAAmC,CAAvC,GAA2C;AACzCE,yBAAU,OAAOF,KAAjBE;AACD;AACF;AACF;AACF;AACF;AACF;AACD;AACD;;AAED,2CAA0C;AACxC,OAAIqB,sBAAJ;AACA,OAAIC,MAAMhjB,4BAAV,MAAUA,CAAV;AACA,OAAIme,MAAMC,uBAAV,GAAUA,CAAV;AACAD,4BAEE,0CAA0CE,mBAF5CF,GAE4CE,CAF5CF;AAIAA;AACAne;AACAme;AACAA;AACD;;AAED,sDAAqD;AACnD,OAAI2D,QAAQ1D,wBAAZ,OAAYA,CAAZ;AACA0D;;AAEAA,kBAAe,YAAW;AACxB,SAAIf,SAAS3C,wBAAb,QAAaA,CAAb;AACA2C,oBAAee,MAAff;AACAA,qBAAgBe,MAAhBf;AACA,SAAIgB,UAAUhB,kBAAd,IAAcA,CAAd;AACAgB;AACAA,4BAAuBD,MAAvBC,OAAoCD,MAApCC;AACAA;AACA,SAAIjB,MAAMC,iBAAV,WAAUA,CAAV;;AAEA,SAAI5C,MAAMC,uBAAV,GAAUA,CAAV;AACAD;AACAA,gBAAW4C,iBAAX5C,WAAW4C,CAAX5C;AACAne;AACAme;AACAA;AAfF2D;AAiBD;;AAED,4CAA2C;AACzC,OAAIliB,SAAS;AACXyhB,YADW;AAEXC,YAFW;AAGX/M,UAAK;AAHM,IAAb;;AAMA,OAAI0O,iBAAJ;AACA,OAAI1O,MAAMvU,iCAAV,CAAUA,CAAV;AACA,OAAI0hB,SAASwB,sBAAsB/rB,OAAnC,QAAa+rB,CAAb;;AAEA3O;;AAEA,OAAI0N,SAAS7D,uBAAb,MAAaA,CAAb;AACA7J,4BAAyBA,IAAzBA;;AAEA,OAAI2N,UAAU9D,uBAAd,OAAcA,CAAd;AACA6D;AACAC;;AAEA;AACA3N;AACAA;;AAEA;AACA,OAAI,CAACA,mBAAmB3U,OAAnB2U,OAAL,OAAKA,CAAL,EAAgD;AAC9CA,wBAAmB3U,OAAnB2U,gBAA0C3U,OAA1C2U;AACD;;AAED,OAAI,CAACA,mBAAmB3U,OAAnB2U,OAAL,aAAKA,CAAL,EAAsD;AACpDA,wBAAmB3U,OAAnB2U,sBAAgD3U,OAAhD2U;AACD;;AAED,OAAIuD,SAAS,+DAEU,uBAFvB,aAAa,CAAb;AAGA,OAAIqK,OAAO5N,IAAX,qBAAWA,EAAX;AACA,OAAI6N,UAAJ;AAEA,OAAIC,cAAc,CAACD,UAAnB,MAAkB,CAAlB;AACA,OAAIE,eACF,+BAA+BjE,mBADjC,WACiCA,CADjC;;AAGA,OAAIxgB,QAAJ,OAAmB;AACjBslB;AADF,UAEO;AACL,SAAIhF,MAAMC,uBAAV,GAAUA,CAAV;AACAD;AACAA;AACAne;AACAme;AACAA;AACD;AACF;;AAED,2CAA0C;AACxC,OAAIne,8CAAJ,SAA2D;AACzD,SAAIojB,QAAJ;AACA,SAAIA,WAAWpjB,mCAAf,GAAeA,EAAXojB,CAAJ,EAA0D;AACxD;AACApjB;AACAA;AACAA;AAJF,YAKO;AACLA;AACAA;AACAA;AACAA;AACA,WAAIqjB,OAAO,kBAAkB;AAC3BV,gBAD2B;AAE3BC,eAAM;AAFqB,QAAlB,cAGI5iB,EAHf,IAGeA,CAHJ,CAAX;AAID;AAhBH,UAiBO;AACLA;AACAA;AACAA;AACD;AACF;;AAED,sDAAqD;AACnD,OAAIlD,IAAJ;;AAEA,OAAIwmB,OAAJ,QAAmB;AACjBA,iBAAY7rB,GAAZ6rB;;AAEA,SAAIxmB,IAAI;AACNymB,YAAK9rB,OADC,MACDA,CADC;AAEN+rB,YAAK/rB,OAFC,MAEDA,CAFC;AAGNgsB,eAAQhsB,UAHF,MAGEA,CAHF;AAINisB,WAAIjsB,oBAJE,IAIFA,CAJE;AAKNksB,WAAIlsB,oBALE,IAKFA,CALE;AAMNgT,aAAMhT;AANA,MAAR;AAHF,UAWO;AACL,SAAIqF,IAAI;AACNymB,YADM;AAENC,YAFM;AAGNC,eAHM;AAINC,WAJM;AAKNC,WALM;AAMNlZ,aAAM;AANA,MAAR;AAQD;;AAED,gBAAa;AACX3N,SACE,kBACAA,EADA,KACAA,CADA,SAGAA,EAHA,KAGAA,CAHA,uBAMAA,EANA,IAMAA,CANA,SAQAA,EARA,IAQAA,CARA,uBAWAA,EAXA,MAWAA,CAXA,uBAcAA,EAdA,QAcAA,CAdA,UADFA;;AAmBA;;;;;;AAMD;;AAED;AACD;;AAED,8DAA6D;AAC3D,0BAAuB;AACrB,SAAI8mB,KAAKzsB,iBAAT;AACA,SAAI0sB,OAAOD,WAAX,OAAWA,CAAX;AACA,SAAIC,YAAY,CAAC,CAACtB,0BAAlB,mBAAkBA,CAAlB,EAAkE;AAChE;AACD;AACD;AACD;;AAED,sBAAmB;AACjB,SAAIuB,WAAW3sB,OAAf,IAAeA,EAAf;AACA2sB;AACAA;AACAA,mDAA8CC,WAA9CD;AACAA;AALF,UAMO;AACL,SAAI3F,MAAMC,uBAAV,GAAUA,CAAV;AACAD,8BAEE,WACG6F,YADH,oCAGE3F,mBALJF,IAKIE,CALJF;AAOAA,kCAA6B4F,YAA7B5F;AACAA;AACAA;AACD;AACF;;AAED,kDAAiD;AAC/C8F,SAAMA,OAANA;AACA,OAAIC,aAAJ;AACAzsB,aAAU0sB,WAAV1sB,+BAAoD,YAAW;AAC7DysB,qBAAgBzsB,gBAAhBysB,IAAgBzsB,EAAhBysB;AADFzsB;AAGA,OAAI2sB,YAAJ;AACA3sB,aAAU0sB,WAAV1sB,+BAAoD,gBAAe;AACjE2sB;AACA3sB,0CAAqC,YAAW;AAC9C2sB,yBAAkB3sB,gBAAlB2sB,IAAkB3sB,EAAlB2sB;AADF3sB;AAFFA;;AAOA,UACEysB,8BAEA,cACO,aAAY;AACf,YAAOpnB,OAAP,GAAOA,CAAP;AAFJ,WAHF,IAGE,CAHF;AASD;;AAED,mCAAkC;AAChC,OAAI6D,WAAJ,GAAkB;AAChB,YAAOA,qBAAqBA,QAA5B,CAA4BA,CAA5B;AADF,UAEO;AACL;AACD;AACF;;AAED,4CAA2C;AACzC,OAAI;AACF,YAAOjJ,aAAP;AADF,KAEE,UAAU;AACV;AACD;AACD;AACD;;AAED,2CAA0C;AACxC2sB,cACEA,YACA,iBAAgB;AACd;AAHJA;AAKA,UAAO,iBAEL,6BAA4B;AAC1B,YAAOjQ,MAAMiQ,gBAAb,KAAaA,CAAb;AAHG,MAAP,CAAO,CAAP;AAOD;;AAED,uDAAsD;AACpD,OAAI;AACF,YAAO,eAAe9oB,KAAf,YAAeA,CAAf,EAAmC,iBAAgB;AACxD,cAAOK,qBAAP;AADF,MAAO,CAAP;AADF,KAIE,UAAU;AACV;AACD;AACD;AACD;;AAED,2DAA0D;AACxD,OAAIiM,SAAJ;AACAyc,eAAY5sB,kBAAZ4sB,OAAY5sB,CAAZ4sB;AACA5sB,gBAEE,OAAO,sBAAqB;AAC1B,SAAI4sB,iBAAJ,GAAIA,CAAJ,EAA2B;AACzBzc;AACD;AAHH,MAFFnQ,OAEE,CAFFA;AAQA;AACD;;AAED,wDAAuD;AACrD,OAAImQ,SAAJ;AACA0c,eAAY7sB,kBAAZ6sB,OAAY7sB,CAAZ6sB;AACA7sB,gBAEE,OAAO,sBAAqB;AAC1BmQ,mBAAc0c,iBAAd1c,GAAc0c,CAAd1c;AADF,MAFFnQ,OAEE,CAFFA;AAMA;AACD;;AAEDF;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,0C;;;;;;;;AC/iBA,iIAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA,EAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,6BAA4B;AAC5B;AACA;AACA;AACA;;;AAGA,+BAA8B;AAC9B;AACA,sBAAqB;AACrB,0CAAyC;AACzC;AACA;AACA;AACA,oC;AACA;AACA;AACA,iCAAgC,cAAc,KAAK;AACnD;AACA,KAAI;AACJ,IAAG;;;AAGH;AACA,oCAAmC;;AAEnC;AACA;AACA;AACA,KAAI,K;AACJ;AACA;AACA,sBAAqB;AACrB;;AAEA,IAAG,KAAK;AACR,sC;AACA;AACA,WAAU,KAAK;AACf,uCAAsC,eAAe;AACrD,K;AACA;AACA;AACA;AACA,2BAA0B,eAAe;;;AAGzC;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAS,KAAK;;AAEd,gCAA+B,WAAW;AAC1C;;AAEA;;AAEA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,sBAAsB,wCAAwC;AACtF,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B,oHAAmH,mBAAmB;AACtI;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAsC;AACtC;AACA;AACA;AACA,0BAAyB,8BAA8B,EAAE;;AAEzD,IAAG;;;;;AAKH,8BAA6B;AAC7B;AACA;;AAEA,gBAAe;AACf;AACA,IAAG;AACH;AACA;AACA;AACA,8CAA6C;AAC7C,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,EAAC;;;;;;;;;;ACtKD,KAAIC,KAAK,mBAAAL,CAAT,EAASA,CAAT;AAAA,KACEM,IAAI,mBAAAN,CADN,EACMA,CADN;;AAGA,uEAAsE;AACpE,OAAIkB,yBAAyBb,eAA7B,WAA6BA,CAA7B;AACA,OAAIU,sBAAsBV,UAA1B,MAA0BA,CAA1B;AACA,OAAIc,8BAA8Bd,eAAlC,OAAkCA,CAAlC;;AAEA,OAAI+sB,SAAS;AACTvnB,UADS;AAETC,YAFS;AAGTC,aAHS;AAITC,WAAM;AAJG,IAAb;AAAA,OAMEqC,QAAQglB,IAAID,OAAJC,OAAkBD,OAN5B;AAAA,OAOE9kB,SAASglB,IAAIF,OAAJE,MAAiBF,OAP5B;;AASA,OAAI1kB,IAAI,CAAC6kB,QAAQltB,QAARktB,KAAQltB,EAARktB,GAA0BltB,SAA3B,MAA2BA,EAA3B,SAEJ,kBAAkB,aAAY;AAC5B,YAAOmT,EAAP;AAHE,IAEJ,CAFI,QAMC,IANT,KAMS,CAND,CAAR;;AAQA,OAAI7K,IAAI,CAAC4kB,QAAQltB,QAARktB,KAAQltB,EAARktB,GAA0BltB,SAA3B,MAA2BA,EAA3B,SAEJ,kBAAkB,aAAY;AAC5B,YAAOmT,EAAP;AAHE,IAEJ,CAFI,QAMC,SANT,CAMS,CAND,CAAR;;AAQA,OAAIsU,QAAQznB,mDAIEktB,sCAJd,mBAAYltB,CAAZ;;AAMA,OAAI0nB,QAAQ1nB,iDAIEktB,sCAJd,mBAAYltB,CAAZ;;AAMA,OAAImtB,gBAAgBntB,wBAApB,KAAoBA,CAApB;;AAEA,OAAI,CAACmtB,cAAL,KAAKA,EAAL,EAA4B;AAC1BA;AACD;;AAEDA,mBAAgBntB,6FAMK,eAAe+sB,OAAf,aAAmCA,OAAnC,MANrBI,GAAgBntB,CAAhBmtB;;AAQAnU,YAASmU,uCAATnU,MAASmU,CAATnU;AACAA;;AAEAA,qBACc,aAAY;AACtB,YAAO3Q,EAAEhD,EAAT,CAAOgD,CAAP;AAFJ2Q,iBAIc,aAAY;AACtB,YAAO1Q,EAAEjD,EAAT,CAAOiD,CAAP;AALJ0Q;;AAUAA,eAAY,aAAY;AACtB,SAAI,WAAJ,GAAkB;AAChBhZ,4CAAqCqF,EAArCrF;AACD;AAHHgZ;;AAMA,OAAIkQ,SAASiE,oEAGQ,0BAHRA,UAAb,KAAaA,CAAb;;AAMAjE;AAMAA,8BAEQzT,OAFRyT,qBAGqB,uBAHrBA;;AAOA,OAAIkE,SAASD,oEAGQ,qBAHRA,UAAb,KAAaA,CAAb;;AAMAC;AAMAA,8BAEQ3X,OAFR2X;AAMD;;AAEDrtB,0D;;;;;;;;;ACrHA,KAAIC,KAAK,mBAAAL,CAAT,EAASA,CAAT;AAAA,KACEM,IAAI,mBAAAN,CADN,EACMA,CADN;;AAGA,oEAAmE;AACjE,OAAI0tB,qBAAqBrtB,UAAzB,MAAyBA,CAAzB;AACA,OAAIstB,cAAJ;AAAA,OACEC,cADF;;AAGAC,6BACE5K,iBADF4K,cACE5K,CADF4K,EAEE5K,iBAFF4K,QAEE5K,CAFF4K;;AAQA,OAAItnB,QACF,kEACA0c,iBADA,OACAA,CADA,uCAGAyK,mBAAmBzK,iBAJrB,KAIqBA,CAAnByK,CAJF;;AAMA,OAAIzK,8BAAJ,WAA6C;AAC3C1c,cACE,cACAmnB,mBAAmBzK,2BADnB,CACmBA,CAAnByK,CADA,WAGAA,mBAAmBzK,2BAHnB,CAGmBA,CAAnByK,CAHA,GADFnnB;AAMD;;AAEDlG;AACD;;AAED,8EAA6E;AAC3E,OAAIqtB,qBAAqBrtB,UAAzB,MAAyBA,CAAzB;AACA,OAAIstB,cAAJ;AAAA,OACEC,cADF;;AAGA,OAAIE,eAAe,MAAM7K,MAAN,OAAMA,CAAN,EAAsB,gBAAe;AACtD,YAAOzV,KAAP;AADF,IAAmB,CAAnB;;AAIAugB;;AAOA,OAAIxnB,QAAJ;AACAlG;AACD;;AAED,+DAA8D;AAC5D,OAAI+sB,SAAS;AACTvnB,UADS;AAETC,YAFS;AAGTC,aAHS;AAITC,WAAM;AAJG,IAAb;AAAA,OAMEqC,QAAQglB,IAAID,OANd;AAAA,OAOE9kB,SAASglB,IAAIF,OAAJE,MAAiBF,OAP5B;;AASA,OAAII,gBAAgBntB,wBAApB,KAAoBA,CAApB;;AAEA,sBAAmB;AACjBmtB;AACD;;AAED,OAAI1qB,cAAJ,GAAqB;AACnB,SAAIkrB,iBAAiB3tB,sBAArB,IAAqBA,CAArB;;AAEA,SAAIqI,IAAIrI,yBAAyBA,UAAjC,IAAiCA,CAAzBA,CAAR;;AAEA,SAAIsI,IAAI,yBAEE,IAEN,OACE,sBAAsB,aAAY;AAChC,cAAO4C,EAAP;AANA,MAKF,CADF,CAFM,CAFF,QAUC,SAVT,CAUS,CAVD,CAAR;;AAYA6hB,oBAAe,KAAK9hB,UAAUA,WAAW3C,WAAzCykB,CAAyCzkB,CAAX2C,CAAVA,CAApB8hB;AACA/kB,cAAS+kB,OAAT/kB;AACAK,aAAQ,IAARA,KAAQ,CAARA;;AAEA,SAAIof,QAAQznB,8BAAZ,QAAYA,CAAZ;;AAEA,SAAI0nB,QAAQ1nB,8BAAZ,MAAYA,CAAZ;;AAEA2tB,iCAA4B;AAC1BtlB,UAAGA,WADuB,CACvBA,CADuB;AAE1BC,UAF0B;AAG1B4R,WAAI;AAHsB,MAA5ByT;AAKAA,2BAAsBA,eAAtBA,WAAgD;AAC9CtlB,UAAGA,WAD2C,CAC3CA,CAD2C;AAE9CC,UAF8C;AAG9C4R,WAAI;AAH0C,MAAhDyT;;AAMAR,qBAAgBntB,8DAGCgI,QAAQ+kB,OAAR/kB,OAAsB+kB,OAHvB/sB,sBAIEiI,SAAS8kB,OAAT9kB,MAAsB8kB,OAJxB/sB,sCAMK,eAAe+sB,OAAf,aAAmCA,OAAnC,MANL/sB,WAAhBmtB,cAAgBntB,CAAhBmtB;;AASA,SAAIS,iBAAiB,gBAEhB,aAAY;AACb,cAAOvlB,EAAEhD,MAAMA,EAAf,EAAOgD,CAAP;AAHiB,UAKhB,aAAY;AACb,cAAOC,EAAEjD,EAAT,CAAOiD,CAAP;AANiB,oBAArB,aAAqB,CAArB;;AAUA6kB;AACAA,4CAEa,aAAY;AACrB,cAAOS,oBAAP;AAHJT;;AAOA,SAAIjE,SAASiE,oEAGQ,0BAHRA,UAAb,KAAaA,CAAb;;AAMAjE;;AAMA,SAAIkE,SAAS;AAGX;AAHW,WAAb,KAAa,CAAb;AAKD;AACF;;AAED,2DAA0D;AACxD,OAAIL,SAAS;AACTvnB,UADS;AAETC,YAFS;AAGTC,aAHS;AAITC,WAAM;AAJG,IAAb;AAAA,OAMEqC,QAAQglB,IAAID,OAAJC,OAAkBD,OAN5B;AAAA,OAOE9kB,SAASglB,IAAIF,OAAJE,MAAiBF,OAP5B;;AASA,OAAI1kB,IAAIrI,yBAAyB,IAAI6tB,gBAA7B7tB,CAAyB,CAAzBA,QAAuD,IAA/D,KAA+D,CAAvDA,CAAR;;AAEA,OAAIsI,IAAItI,sBAAsB,IAAIA,OAA1BA,MAA0BA,CAAJ,CAAtBA,QAAiD,SAAzD,CAAyD,CAAjDA,CAAR;;AAEA,OAAIkQ,QAAQlQ,OAAZ,MAAYA,CAAZ;;AAEA,OAAIynB,QAAQznB,8BAAZ,QAAYA,CAAZ;;AAEA,OAAImtB,gBAAgBntB,wBAApB,KAAoBA,CAApB;;AAEA,sBAAmB;AACjBmtB;AACD;;AAED,OAAIW,eAAe,WAAW,gBAAe;AAC3C,YAAO;AACLzlB,UAAG7F,IADE;AAEL8F,UAAGjD,IAAI;AAFF,MAAP;AADF,IAAmB,CAAnB;AAMAyoB,qBAAkB;AAChBzlB,QAAGwlB,gBADa;AAEhBvlB,QAAG;AAFa,IAAlBwlB;AAIAA,qBAAkB;AAChBzlB,QADgB;AAEhBC,QAAG;AAFa,IAAlBwlB;AAIAA,qBAAkB;AAChBzlB,QADgB;AAEhBC,QAAGulB,YAAY;AAFC,IAAlBC;;AAKAX,mBAAgBntB,8DAGCgI,QAAQ+kB,OAAR/kB,OAAsB+kB,OAHvB/sB,sBAIEiI,SAAS8kB,OAAT9kB,MAAsB8kB,OAJxB/sB,sCAMK,eAAe+sB,OAAf,aAAmCA,OAAnC,MANL/sB,WAAhBmtB,YAAgBntB,CAAhBmtB;;AASA,OAAIS,iBAAiB,gBAEhB,aAAY;AACb,YAAOvlB,EAAEhD,EAAT,CAAOgD,CAAP;AAHiB,QAKhB,aAAY;AACb,YAAOC,EAAEjD,EAAT,CAAOiD,CAAP;AANiB,kBAArB,aAAqB,CAArB;;AAUA6kB;AACAA,0CAEa,aAAY;AACrB,YAAOS,oBAAP;AAHJT;;AAOA,YAAS;AACP,SAAIY,WAAW,sCAGV,gBAAe;AAChB,cAAO1lB,EAAE7F,IAAF6F,KAAW,CAACA,EAAE7F,IAAF6F,KAAWA,EAAZ,CAAYA,CAAZ,IAAlB;AAJW,UAMV,aAAY;AACb,cAAOC,EAAE,IAAIjD,IAAb,KAAOiD,CAAP;AAPJ,MAAe,CAAf;AASA6kB,6EAIa,aAAY;AACrB,cAAOY,SAAP,CAAOA,CAAP;AALJZ;AAOD;;AAED,OAAIjE,SAASiE,oEAGQ,0BAHRA,UAAb,KAAaA,CAAb;;AAMAjE;AAKD;;AAED8E;AACAA,2D","file":"hivtrace.js","sourcesContent":["window.jQuery = window.$ = $;\n\nrequire(\"font-awesome/css/font-awesome.css\");\nrequire(\"./hivtrace.css\");\nrequire(\"bootstrap\");\n\nvar hivtrace = require(\"./hivtrace.js\");\n\n// Create new hyphy-vision export\nwindow.hivtrace = hivtrace;\n\n\n\n// WEBPACK FOOTER //\n// ./src/entry.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/font-awesome/css/font-awesome.css\n// module id = 5\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hivtrace.css\n// module id = 15\n// module chunks = 0","import Bootstrap from \"bootstrap/dist/css/bootstrap.css\";\nimport { clusterNetwork, graphSummary } from \"./clusternetwork.js\";\nimport { histogram, histogramDistances } from \"./histogram.js\";\nimport { scatterPlot } from \"./scatterplot.js\";\n\nvar misc = require(\"./misc.js\");\nvar helpers = require(\"./helpers.js\");\n\nmodule.exports.clusterNetwork = clusterNetwork;\nmodule.exports.graphSummary = graphSummary;\nmodule.exports.histogram = histogram;\nmodule.exports.histogramDistances = histogramDistances;\nmodule.exports.helpers = helpers;\nmodule.exports.misc = misc;\nmodule.exports.scatterPlot = scatterPlot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/hivtrace.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bootstrap/dist/css/bootstrap.css\n// module id = 31\n// module chunks = 0","var d3 = require(\"d3\"),\n  _ = require(\"underscore\"),\n  misc = require(\"misc\"),\n  helpers = require(\"helpers\"),\n  scatterPlot = require(\"scatterplot\");\n\nvar _networkGraphAttrbuteID = \"patient_attribute_schema\";\nvar _networkNodeAttributeID = \"patient_attributes\";\nvar _networkMissing = \"missing\";\nvar _networkMissingOpacity = \"0.1\";\nvar _networkMissingColor = \"#999\";\nvar _networkContinuousColorStops = 9;\nvar _networkShapeOrdering = [\n  \"circle\",\n  \"square\",\n  \"hexagon\",\n  \"diamond\",\n  \"cross\",\n  \"octagon\",\n  \"ellipse\",\n  \"pentagon\"\n];\nvar _defaultFloatFormat = d3.format(\",.2r\");\nvar _defaultPercentFormat = d3.format(\",.3p\");\nvar _defaultDateFormats = [\n  d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\"),\n  d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\")\n];\nvar _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\nvar _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\nvar _defaultDateViewFormatSlider = d3.time.format(\"%Y-%m-%d\");\nvar _networkDotFormatPadder = d3.format(\"08d\");\n\nvar _networkCategoricalBase = [\n  \"#a6cee3\",\n  \"#1f78b4\",\n  \"#b2df8a\",\n  \"#33a02c\",\n  \"#fb9a99\",\n  \"#e31a1c\",\n  \"#fdbf6f\",\n  \"#ff7f00\",\n  \"#cab2d6\",\n  \"#6a3d9a\",\n  \"#ffff99\",\n  \"#b15928\"\n];\n\nvar _networkCategorical = [];\n\n_.each([0, -0.5, 0.5], function(k) {\n  _.each(_networkCategoricalBase, function(s) {\n    _networkCategorical.push(d3.rgb(s).darker(k).toString());\n  });\n});\n\nvar _maximumValuesInCategories = _networkCategorical.length;\n\nvar _networkSequentialColor = {\n  2: [\"#feb24c\", \"#e31a1c\"],\n  3: [\"#ffeda0\", \"#feb24c\", \"#f03b20\"],\n  4: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#e31a1c\"],\n  5: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  6: [\"#ffffb2\", \"#fed976\", \"#feb24c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  7: [\n    \"#ffffb2\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  8: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  9: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#bd0026\",\n    \"#800026\"\n  ]\n};\n\nvar _networkPresetColorSchemes = {\n  trans_categ: {\n    \"MSM-Male\": \"#1f78b4\",\n    \"MSM-Unknown sex\": \"#1f78b4\",\n    \"Heterosexual Contact-Male\": \"#e31a1c\",\n    \"Heterosexual Contact-Female\": \"#e31a1c\",\n    \"Heterosexual Contact-Unknown sex\": \"#e31a1c\",\n    \"IDU-Male\": \"#33a02c\",\n    \"MSM & IDU-Male\": \"#33a02c\",\n    \"IDU-Female\": \"#33a02c\",\n    \"IDU-Unknown sex\": \"#33a02c\",\n    \"Other/Unknown-Male\": \"#636363\",\n    \"Other/Unknown-Female\": \"#636363\",\n    \"Other-Male\": \"#636363\",\n    \"Other-Female\": \"#636363\",\n    Missing: \"#636363\",\n    \"\": \"#636363\",\n    \"Other/Unknown-Unknown sex\": \"#636363\",\n    Perinatal: \"#ff7f00\",\n    \"Other/Unknown-Child\": \"#ff7f00\",\n    \"Other-Child\": \"#ff7f00\"\n  },\n  race: {\n    Asian: \"#1f77b4\",\n    \"Black/African American\": \"#bcbd22\",\n    \"Hispanic/Latino\": \"#9467bd\",\n    \"American Indian/Alaska Native\": \"#2ca02c\",\n    \"Native Hawaiian/Other Pacific Islander\": \"#17becf\",\n    \"Multiple Races\": \"#e377c2\",\n    \"Unknown race\": \"#999\",\n    Missing: \"#999\",\n    missing: \"#999\",\n    White: \"#d62728\"\n  }\n};\n\nvar _networkPresetShapeSchemes = {\n  birth_sex: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    Unknown: \"diamond\"\n  },\n  race: {\n    Asian: \"hexagon\",\n    \"Black/African American\": \"square\",\n    \"Hispanic/Latino\": \"triangle\",\n    \"American Indian/Alaska Native\": \"pentagon\",\n    \"Native Hawaiian/Other Pacific Islander\": \"octagon\",\n    \"Multiple Races\": \"diamond\",\n    \"Unknown race\": \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    White: \"ellipse\"\n  },\n  current_gender: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    \"Transgender-Male to Female\": \"hexagon\",\n    \"Transgender-Female to Male\": \"pentagon\",\n    \"Additional Gender Identity\": \"diamond\",\n    Unknown: \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\"\n  }\n};\n\n// Constants for the map.\nconst mapWidth = 1200\nconst mapHeight = 600\nconst mapProjection = d3.geo.mercator()\n  .translate([mapWidth/2, mapHeight/2])\n  .scale(200);\n\n// TODO: convert and save this data rather than do it each time.\nvar countryCentersArray = [];\nvar countryCentersObject = {};\n d3.csv(\"./../country_centers.csv\", function(data) {\n  for (var i=0; i < data.length; i++) {\n    let countryCode = data[i][\"Alpha-2 code\"];\n    let countryLat = data[i][\"Latitude (average)\"];\n    let countryLong = data[i][\"Longitude (average)\"];\n    let countryXY = mapProjection([countryLong, countryLat])\n    countryCentersObject[countryCode] = {'x': countryXY[0], 'y': countryXY[1]}\n  }\n})\n\nvar hivtrace_cluster_depthwise_traversal = function(\n  nodes,\n  edges,\n  edge_filter,\n  save_edges\n) {\n  var clusters = [],\n    adjacency = {},\n    by_node = {};\n\n  _.each(nodes, function(n) {\n    n.visited = false;\n    adjacency[n.id] = [];\n  });\n\n  if (edge_filter) {\n    edges = _.filter(edges, edge_filter);\n  }\n\n  _.each(edges, function(e) {\n    try {\n      adjacency[nodes[e.source].id].push([nodes[e.target], e]);\n      adjacency[nodes[e.target].id].push([nodes[e.source], e]);\n    } catch (err) {\n      console.log(\n        \"Edge does not map to an existing node \" + e.source + \" to \" + e.target\n      );\n      throw \"Edge does not map to an existing node \" +\n        e.source +\n        \" to \" +\n        e.target;\n    }\n  });\n\n  var traverse = function(node) {\n    if (!(node.id in by_node)) {\n      clusters.push([node]);\n      by_node[node.id] = clusters.length - 1;\n      if (save_edges) {\n        save_edges.push([]);\n      }\n    }\n    node.visited = true;\n\n    _.each(adjacency[node.id], function(neighbor) {\n      if (!neighbor[0].visited) {\n        by_node[neighbor[0].id] = by_node[node.id];\n        clusters[by_node[neighbor[0].id]].push(neighbor[0]);\n        if (save_edges) {\n          save_edges[by_node[neighbor[0].id]].push(neighbor[1]);\n        }\n        traverse(neighbor[0]);\n      }\n    });\n  };\n\n  _.each(nodes, function(n) {\n    if (!n.visited) {\n      traverse(n);\n    }\n  });\n\n  return clusters;\n};\n\nvar _networkUpperBoundOnDate = new Date().getFullYear();\nvar _networkCDCDateField = \"hiv_aids_dx_dt\";\n\nvar hivtrace_cluster_network_graph = function(\n  json,\n  network_container,\n  network_status_string,\n  network_warning_tag,\n  button_bar_ui,\n  attributes,\n  filter_edges_toggle,\n  clusters_table,\n  nodes_table,\n  parent_container,\n  options\n) {\n  // [REQ] json                        :          the JSON object containing network nodes, edges, and meta-information\n  // [REQ] network_container           :          the CSS selector of the DOM element where the SVG containing the network will be placed (e.g. '#element')\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] network_warning_tag         :          the CSS selector of the DOM element where the any warning messages would go (e.g. '#element')\n  // [OPT] button_bar_ui               :          the ID of the control bar which can contain the following elements (prefix = button_bar_ui value)\n  //                                                - [prefix]_cluster_operations_container : a drop-down for operations on clusters\n  //                                                - [prefix]_attributes :  a drop-down for operations on attributes\n  //                                                - [prefix]_filter : a text box used to search the graph\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] attributes                  :          A JSON object with mapped node attributes\n\n  // if schema is not set, set to empty dictionary\n  if (!json[_networkGraphAttrbuteID]) {\n    json[_networkGraphAttrbuteID] = {};\n  }\n\n  var self = {};\n\n  self._is_CDC_ = options && options[\"no_cdc\"] ? false : true;\n  self.ww =\n    options && options[\"width\"]\n      ? options[\"width\"]\n      : d3.select(parent_container).property(\"clientWidth\");\n  self.container = network_container;\n  self.nodes = [];\n  self.edges = [];\n  self.clusters = [];\n  self.cluster_sizes = [];\n  self.cluster_mapping = {};\n  self.percent_format = _defaultPercentFormat;\n  self.missing = _networkMissing;\n  self.showing_on_map = options.showing_on_map || false;\n\n  if (options && _.isFunction(options[\"init_code\"])) {\n    options[\"init_code\"].call(null, self, options);\n  }\n  self.dom_prefix =\n    options && options[\"prefix\"] ? options[\"prefix\"] : \"hiv-trace\";\n  self.extra_cluster_table_columns =\n    options && options[\"cluster-table-columns\"]\n      ? options[\"cluster-table-columns\"]\n      : null;\n  self.subcluster_table = null;\n\n  if (self._is_CDC_) {\n    self.subcluster_table =\n      options && options[\"subcluster-table\"]\n        ? d3.select(options[\"subcluster-table\"])\n        : null;\n    self.extra_subcluster_table_columns = null;\n    var cdc_extra = [\n      {\n        description: {\n          value: \"Cases dx within 36 months\",\n          sort: function(c) {\n            return c.value.length ? c.value[0] : 0;\n          },\n          help: \"Number of linked (0.5%) cases diagnosed in the past 36 months\"\n        },\n        generator: function(cluster) {\n          return {\n            html: true,\n            value: cluster.recent_nodes,\n            format: function(v) {\n              if (v.length) {\n                return v.join(\", \");\n              } else {\n                return \"\";\n              }\n            }\n          };\n        }\n      },\n      {\n        description: {\n          value: \"Cases dx within 12 months\",\n          sort: \"value\",\n          help:\n            \"Number of linked (0.5%, only through recent nodes) cases diagnosed in past 12 months\"\n        },\n        generator: function(cluster) {\n          return {\n            html: true,\n            value: cluster.priority_score,\n            format: function(v) {\n              if (v.length) {\n                var str = v.join(\", \");\n                if (v[0] >= 3) {\n                  return (\n                    \"<span style='color:red'>\" +\n                    str +\n                    \" <span class = 'fa fa-exclamation-circle'></span></span>\"\n                  );\n                }\n                return str;\n              }\n              return \"\";\n            }\n          };\n        }\n      }\n    ];\n\n    if (self.subcluster_table) {\n      self.extra_subcluster_table_columns = cdc_extra;\n    } else {\n      if (self.extra_cluster_table_columns) {\n        self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat(\n          cdc_extra\n        );\n      } else {\n        self.extra_cluster_table_columns = cdc_extra;\n      }\n    }\n  }\n\n  self.extra_node_table_columns =\n    options && options[\"node-table-columns\"]\n      ? options[\"node-table-columns\"]\n      : self._is_CDC_\n        ? [\n            {\n              description: {\n                value: \"Recent and Rapid\",\n                sort: \"value\",\n                help:\n                  \"Is the node a member of a regular or recent & rapid subcluster?\"\n              },\n              generator: function(node) {\n                return {\n                  callback: function(element, payload) {\n                    //payload = _.filter (payload, function (d) {return d});\n                    var this_cell = d3.select(element);\n\n                    var data_to_use = [\n                      [payload[0][0], payload[0][1], payload[0][2]],\n                      [payload[1][0] ? \"36 months\" : \"\", payload[1][1]],\n                      [payload[2][0] ? \"12 months\" : \"\", payload[2][1]],\n                      [\n                        payload.length > 3 && payload[3][0]\n                          ? \"Recent cluster ≥ 3\"\n                          : \"\",\n                        payload.length > 3 ? payload[3][1] : null\n                      ]\n                    ];\n\n                    var buttons = this_cell.selectAll(\"span\").remove();\n\n                    _.each(data_to_use, function(button_text) {\n                      //self.open_exclusive_tab_view (cluster_id)\n                      if (button_text[0].length) {\n                        var button_obj = this_cell\n                          .append(\"span\")\n                          .classed(\"btn btn-xs btn-node-property\", true)\n                          .classed(button_text[1], true)\n                          .text(button_text[0]);\n\n                        if (_.isFunction(button_text[2])) {\n                          button_obj.on(\"click\", button_text[2]);\n                        } else {\n                          button_obj.attr(\"disabled\", true);\n                        }\n                      }\n                    });\n                  },\n                  value: function() {\n                    return [\n                      [\n                        node.subcluster ? \"Subcluster \" + node.subcluster : \"\",\n                        \"btn-primary\",\n                        node.subcluster\n                          ? function() {\n                              self.view_subcluster(\n                                node.subcluster,\n                                function(n) {\n                                  return n.subcluster == node.subcluster;\n                                },\n                                \"Subcluster \" + node.subcluster\n                              );\n                            }\n                          : null\n                      ],\n\n                      [node.priority_flag == 3, \"btn-warning\"],\n                      [node.priority_flag == 1, \"btn-danger\"],\n                      [node.priority_flag == 2, \"btn-danger\"]\n                    ];\n                  }\n                };\n              }\n            }\n          ]\n        : null;\n\n  self.colorizer = {\n    selected: function(d) {\n      return d == \"selected\" ? d3.rgb(51, 122, 183) : \"#FFF\";\n    }\n  };\n\n  self.subcluster_threshold =\n    options && options[\"subcluster-thershold\"]\n      ? options[\"subcluster-thershold\"]\n      : 0.005;\n  self.today = options && options[\"today\"] ? options[\"today\"] : new Date();\n\n  self.node_shaper = {\n    id: null,\n    shaper: function() {\n      return \"circle\";\n    }\n  };\n  (self.filter_edges = true), (self.hide_hxb2 = false), (self.charge_correction = 5), (self.margin = {\n    top: 20,\n    right: 10,\n    bottom: 30,\n    left: 10\n  }), (self.width =\n    self.ww - self.margin.left - self.margin.right), (self.height =\n    self.width * 9 / 16), (self.cluster_table = d3.select(\n    clusters_table\n  )), (self.node_table = d3.select(\n    nodes_table\n  )), (self.needs_an_update = false), (self.json = json), (self.hide_unselected = false), (self.show_percent_in_pairwise_table = false), (self.gradient_id = 0);\n\n  self._additional_node_pop_fields = [];\n  /** this array contains fields that will be appended to node pop-overs in the network tab\n      they will precede all the fields that are shown based on selected labeling */\n\n  if (options && \"minimum size\" in options) {\n    self.minimum_cluster_size = options[\"minimum size\"];\n  } else {\n    if (self._is_CDC_) {\n      self.minimum_cluster_size = 5;\n    } else {\n      self.minimum_cluster_size = 0;\n    }\n  }\n\n  if (options && \"cluster-time\" in options) {\n    self.cluster_time_scale = options[\"cluster-time\"];\n  }\n\n  if (self._is_CDC_) {\n    self._additional_node_pop_fields.push(_networkCDCDateField);\n    self.cluster_time_scale = self.cluster_time_scale || _networkCDCDateField;\n  }\n\n  if (options && \"core-link\" in options) {\n    self.core_link_length = options[\"core-link\"];\n  } else {\n    self.core_link_length = -1;\n  }\n\n  if (options && \"edge-styler\" in options) {\n    self.additional_edge_styler = options[\"edge-styler\"];\n  } else {\n    self.additional_edge_styler = null;\n  }\n\n  self.filter_by_size = function(cluster) {\n    return cluster.children.length >= self.minimum_cluster_size;\n  };\n\n  self.cluster_filtering_functions = { size: self.filter_by_size };\n  self.cluster_display_filter = function(cluster) {\n    return _.every(self.cluster_filtering_functions, function(filter) {\n      return filter(cluster);\n    });\n  };\n\n  self.primary_graph = options && \"secondary\" in options ? false : true;\n  self.initial_packed =\n    options && options[\"initial_layout\"] == \"tiled\" ? false : true;\n\n  self.recent_rapid_definition = function(network, date) {\n    date = date || self.today;\n    var subcluster_enum = [\n      \"Subcluster\",\n      \"12 months (on ar after \" +\n        _defaultDateViewFormat(_n_months_ago(date, 12)) +\n        \")\",\n      \"12 months (on ar after \" +\n        _defaultDateViewFormat(_n_months_ago(date, 12)) +\n        \") and R&R subcluster\",\n      \"36 months (on ar after \" +\n        _defaultDateViewFormat(_n_months_ago(date, 36)) +\n        \")\",\n      \"Future node (after \" + _defaultDateViewFormat(date) + \")\",\n      \"Not a member of subcluster (as of \" + _defaultDateViewFormat(date) + \")\",\n      \"Not in a subcluster\"\n    ];\n\n    return {\n      depends: _networkCDCDateField,\n      label: \"Subcluster or Priority Node\",\n      enum: subcluster_enum,\n      type: \"String\",\n      volatile: true,\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain(subcluster_enum.concat([_networkMissing]))\n          .range(\n            _.union(\n              [\n                \"#CCCCCC\",\n                \"pink\",\n                \"red\",\n                \"blue\",\n                \"#9A4EAE\",\n                \"yellow\",\n                \"#FFFFFF\"\n              ],\n              [_networkMissingColor]\n            )\n          );\n      },\n\n      map: function(node) {\n        if (node.subcluster) {\n          if (node.priority_flag > 0) {\n            return subcluster_enum[node.priority_flag];\n          }\n          return subcluster_enum[0];\n        }\n        return subcluster_enum[6];\n      }\n    };\n  };\n\n  self._networkPredefinedAttributeTransforms = {\n    /** runtime computed node attributes, e.g. transforms of existing attributes */\n\n    binned_vl_recent_value: {\n      depends: \"vl_recent_value\",\n      label: \"binned_vl_recent_value\",\n      enum: [\"≤200\", \"200-10000\", \">10000\"],\n      type: \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\"≤200\", \"200-10000\", \">10000\", _networkMissing])\n          .range(_.union(_networkSequentialColor[3], [_networkMissingColor]));\n      },\n\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(\n          node,\n          \"vl_recent_value\",\n          true\n        );\n        if (vl_value != _networkMissing) {\n          if (vl_value <= 200) {\n            return \"≤200\";\n          }\n          if (vl_value <= 10000) {\n            return \"200-10000\";\n          }\n          return \">10000\";\n        }\n        return _networkMissing;\n      }\n    },\n\n    recent_rapid: self.recent_rapid_definition,\n\n    subcluster_index: {\n      depends: _networkCDCDateField,\n      label: \"Subcluster ID\",\n      type: \"String\",\n\n      map: function(node) {\n        return node.subcluster;\n      }\n    },\n\n    age_dx: {\n      depends: \"age\",\n      label: \"age_dx\",\n      enum: [\"<13\", \"13-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"≥60\"],\n      type: \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\n            \"<13\",\n            \"13-19\",\n            \"20-29\",\n            \"30-39\",\n            \"40-49\",\n            \"50-59\",\n            \"≥60\",\n            _networkMissing\n          ])\n          .range([\n            \"#b10026\",\n            \"#e31a1c\",\n            \"#fc4e2a\",\n            \"#fd8d3c\",\n            \"#feb24c\",\n            \"#fed976\",\n            \"#ffffb2\",\n            \"#636363\"\n          ]);\n      },\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(node, \"age\");\n        if (vl_value == \">=60\") {\n          return \"≥60\";\n        }\n        return vl_value;\n      }\n    },\n\n    hiv_aids_dx_dt_year: {\n      depends: _networkCDCDateField,\n      label: \"hiv_aids_dx_dt_year\",\n      type: \"Number\",\n      map: function(node) {\n        try {\n          var value = self._parse_dates(\n            self.attribute_node_value_by_id(node, _networkCDCDateField)\n          );\n          if (value) {\n            value = \"\" + value.getFullYear();\n          } else {\n            value = _networkMissing;\n          }\n          return value;\n        } catch (err) {\n          return _networkMissing;\n        }\n      },\n      color_scale: function(attr) {\n        var range_without_missing = _.without(\n          attr.value_range,\n          _networkMissing\n        );\n        var color_scale = _.compose(\n          d3.interpolateRgb(\"#ffffcc\", \"#800026\"),\n          d3.scale\n            .linear()\n            .domain([\n              range_without_missing[0],\n              range_without_missing[range_without_missing.length - 1]\n            ])\n            .range([0, 1])\n        );\n        return function(v) {\n          if (v == _networkMissing) {\n            return _networkMissingColor;\n          }\n          return color_scale(v);\n        };\n      }\n    }\n  };\n\n  if (options && options[\"computed-attributes\"]) {\n    _.extend(\n      self._networkPredefinedAttributeTransforms,\n      options[\"computed-attributes\"]\n    );\n  }\n\n  self._parse_dates = function(value) {\n    if (value instanceof Date) {\n      return value;\n    }\n    var parsed_value = null;\n\n    var passed = _.any(_defaultDateFormats, function(f) {\n      parsed_value = f.parse(value);\n      return parsed_value;\n    });\n\n    //console.log (value + \" mapped to \" + parsed_value);\n\n    if (passed) {\n      if (\n        self._is_CDC_ &&\n        (parsed_value.getFullYear() < 1970 ||\n          parsed_value.getFullYear() > _networkUpperBoundOnDate)\n      ) {\n        throw \"Invalid date\";\n      }\n      return parsed_value;\n    }\n\n    throw \"Invalid date\";\n  };\n\n  /*------------ Network layout code ---------------*/\n  var handle_cluster_click = function(cluster, release) {\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    var already_fixed = cluster && cluster.fixed == 1;\n\n    if (cluster) {\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Expand cluster\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          self.expand_cluster_handler(cluster, true);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Center on screen\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          center_cluster_handler(cluster);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          if (cluster.fixed) return \"Allow cluster to float\";\n          return \"Hold cluster at current position\";\n        })\n        .on(\"click\", function(d) {\n          cluster.fixed = !cluster.fixed;\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          return \"Show this cluster in separate tab\";\n        })\n        .on(\"click\", function(d) {\n          self.open_exclusive_tab_view(cluster.cluster_id);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Show on map\")\n        .on(\"click\", function(d) {\n          self.open_exclusive_tab_view(\n            cluster.cluster_id,\n            null,\n            (cluster_id) => { return \"Map of cluster: \" + cluster_id },\n            {'showing_on_map': true}\n          )\n        });\n\n      cluster.fixed = 1;\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      if (release) {\n        release.fixed = 0;\n      }\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_cluster_click(null, already_fixed ? null : cluster);\n      },\n      true\n    );\n  };\n\n  self._check_for_time_series = function(export_items) {\n    if (self.cluster_time_scale) {\n      export_items.push([\n        \"Show time-course plots\",\n        function(network, e) {\n          e = d3.select(e);\n\n          if (!network.network_cluster_dynamics) {\n            network.network_cluster_dynamics = network.network_svg\n              .append(\"g\")\n              .attr(\"id\", self.dom_prefix + \"-dynamics-svg\")\n              .attr(\"transform\", \"translate (\" + network.width * 0.45 + \",0)\");\n\n            network.handle_inline_charts = function() {\n              var attr = null;\n              var color = null;\n              if (\n                network.colorizer[\"category_id\"] &&\n                !network.colorizer[\"continuous\"]\n              ) {\n                var attr_desc =\n                  network.json[_networkGraphAttrbuteID][\n                    network.colorizer[\"category_id\"]\n                  ];\n                attr = {};\n                attr[network.colorizer[\"category_id\"]] = attr_desc[\"label\"];\n                color = {};\n                color[attr_desc[\"label\"]] = network.colorizer[\"category\"];\n              }\n\n              misc.cluster_dynamics(\n                network.extract_network_time_series(\n                  self.cluster_time_scale,\n                  attr\n                ),\n                network.network_cluster_dynamics,\n                \"Time\",\n                \"Cluster Members\",\n                null,\n                null,\n                {\n                  base_line: 20,\n                  top: network.margin.top,\n                  right: network.margin.right,\n                  bottom: 3 * 20,\n                  left: 5 * 20,\n                  font_size: 12,\n                  rect_size: 14,\n                  width: network.width / 2,\n                  height: network.height / 2,\n                  colorizer: color,\n                  prefix: network.dom_prefix,\n                  drag: {\n                    x: network.width * 0.45,\n                    y: 0\n                  }\n                }\n              );\n            };\n            network.handle_inline_charts();\n            e.text(\"Hide time-course plots\");\n          } else {\n            e.text(\"Show time-course plots\");\n            network.network_cluster_dynamics.remove();\n            network.network_cluster_dynamics = null;\n            network.handle_inline_charts = null;\n          }\n        }\n      ]);\n    }\n  };\n\n  self.open_exclusive_tab_close = function(\n    tab_element,\n    tab_content,\n    restore_to_tag\n  ) {\n    $(\"#\" + restore_to_tag).tab(\"show\");\n    $(\"#\" + tab_element).remove();\n    $(\"#\" + tab_content).remove();\n  };\n\n  self.open_exclusive_tab_view = function(\n    cluster_id,\n    custom_filter,\n    custom_name,\n    additional_options\n  ) {\n    var cluster = _.find(self.clusters, function(c) {\n      return c.cluster_id == cluster_id;\n    });\n\n    if (!cluster) {\n      return;\n    }\n\n    additional_options = additional_options || {};\n\n    var filtered_json = _extract_single_cluster(\n      custom_filter\n        ? _.filter(self.json.Nodes, custom_filter)\n        : cluster.children\n    );\n\n    if (_networkGraphAttrbuteID in json) {\n      filtered_json[_networkGraphAttrbuteID] = {};\n      jQuery.extend(\n        true,\n        filtered_json[_networkGraphAttrbuteID],\n        json[_networkGraphAttrbuteID]\n      );\n    }\n\n    var export_items = [\n      [\n        \"Export cluster to .CSV\",\n        function(network) {\n          helpers.export_csv_button(\n            self._extract_attributes_for_nodes(\n              self._extract_nodes_by_id(cluster_id),\n              self._extract_exportable_attributes()\n            )\n          );\n        }\n      ]\n    ];\n\n    self._check_for_time_series(export_items);\n\n    if (\"extra_menu\" in additional_options) {\n      _.each(export_items, function(item) {\n        additional_options[\"extra_menu\"][\"items\"].push(item);\n      });\n    } else {\n      _.extend(additional_options, {\n        extra_menu: {\n          title: \"Action\",\n          items: export_items\n        }\n      });\n    }\n\n    return self.open_exclusive_tab_view_aux(\n      filtered_json,\n      custom_name ? custom_name(cluster_id) : \"Cluster \" + cluster_id,\n      additional_options\n    );\n  };\n\n  self.open_exclusive_tab_view_aux = function(\n    filtered_json,\n    title,\n    option_extras\n  ) {\n    var random_id = function(alphabet, length) {\n      var s = \"\";\n      for (var i = 0; i < length; i++) {\n        s += _.sample(alphabet);\n      }\n      return s;\n    };\n\n    var letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n\n    var random_prefix = random_id(letters, 32);\n    var random_tab_id = random_prefix + \"_tab\";\n    var random_content_id = random_prefix + \"_div\";\n    var random_button_bar = random_prefix + \"_ui\";\n\n    while (\n      $(\"#\" + random_tab_id).length ||\n      $(\"#\" + random_content_id).length ||\n      $(\"#\" + random_button_bar).length\n    ) {\n      random_prefix = random_id(letters, 32);\n      random_tab_id = random_prefix + \"_tab\";\n      random_content_id = random_prefix + \"_div\";\n      random_button_bar = random_prefix + \"_ui\";\n    }\n\n    var tab_container = \"top_level_tab_container\";\n    var content_container = \"top_level_tab_content\";\n    var go_here_when_closed = \"trace-default-tab\";\n\n    // add new tab to the menu bar and switch to it\n    var new_tab_header = $(\"<li></li>\").attr(\"id\", random_tab_id);\n    var new_link = $(\"<a></a>\")\n      .attr(\"href\", \"#\" + random_content_id)\n      .attr(\"data-toggle\", \"tab\")\n      .text(title);\n    $(\n      '<button type=\"button\" class=\"close\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>'\n    )\n      .appendTo(new_link)\n      .on(\"click\", function() {\n        self.open_exclusive_tab_close(\n          random_tab_id,\n          random_content_id,\n          go_here_when_closed\n        );\n      });\n\n    new_link.appendTo(new_tab_header);\n    $(\"#\" + tab_container).append(new_tab_header);\n\n    var new_tab_content = $(\"<div></div>\")\n      .addClass(\"tab-pane\")\n      .attr(\"id\", random_content_id)\n      .data(\"cluster\", option_extras.cluster_id);\n\n    if (option_extras.type == \"subcluster\") {\n      new_tab_content\n        .addClass(\"subcluster-view\")\n        .addClass(\"subcluster-\" + option_extras.cluster_id.replace(\".\", \"_\"));\n    }\n\n    //     <li class='disabled' id=\"attributes-tab\"><a href=\"#trace-attributes\" data-toggle=\"tab\">Attributes</a></li>\n    var new_button_bar = $('[data-hivtrace=\"cluster-clone\"]')\n      .clone()\n      .attr(\"data-hivtrace\", null);\n    new_button_bar\n      .find(\"[data-hivtrace-button-bar='yes']\")\n      .attr(\"id\", random_button_bar)\n      .addClass(\"cloned-cluster-tab\")\n      .attr(\"data-hivtrace-button-bar\", null);\n\n    new_button_bar.appendTo(new_tab_content);\n    new_tab_content.appendTo(\"#\" + content_container);\n\n    // show the new tab\n    $(new_link).tab(\"show\");\n\n    var cluster_options = {\n      no_cdc: options && options[\"no_cdc\"],\n      \"minimum size\": 0,\n      secondary: true,\n      prefix: random_prefix,\n      extra_menu:\n        options && \"extra_menu\" in options ? options[\"extra_menu\"] : null,\n      \"edge-styler\":\n        options && \"edge-styler\" in options ? options[\"edge-styler\"] : null,\n      \"no-subclusters\": true\n    };\n\n    if (option_extras.showing_on_map) {\n      cluster_options[\"showing_on_map\"] = true;\n    }\n\n    if (option_extras) {\n      _.extend(cluster_options, option_extras);\n    }\n\n    var cluster_view = hivtrace.clusterNetwork(\n      filtered_json,\n      \"#\" + random_content_id,\n      null,\n      null,\n      random_button_bar,\n      attributes,\n      null,\n      null,\n      null,\n      parent_container,\n      cluster_options\n    );\n\n    if (self.colorizer[\"category_id\"]) {\n      if (self.colorizer[\"continuous\"]) {\n        cluster_view.handle_attribute_continuous(self.colorizer[\"category_id\"]);\n      } else {\n        cluster_view.handle_attribute_categorical(\n          self.colorizer[\"category_id\"]\n        );\n      }\n    }\n\n    if (self.node_shaper[\"id\"]) {\n      cluster_view.handle_shape_categorical(self.node_shaper[\"id\"]);\n    }\n\n    if (self.colorizer[\"opacity_id\"]) {\n      cluster_view.handle_attribute_opacity(self.colorizer[\"opacity_id\"]);\n    }\n\n    if (option_extras.showing_on_map) {\n      // Add a world map to the svg.\n      d3.json(\"https://unpkg.com/world-atlas@1/world/110m.json\", function(error, data) {\n        if (error) throw error;\n         var countries = topojson.feature(data, data.objects.countries).features;\n        var mapsvg = d3.select(\"#\" + random_prefix + \"-network-svg\")\n        var path = d3.geo.path().projection(mapProjection)\n         mapsvg.selectAll(\".country\")\n          .data(countries)\n          .enter()\n          .append(\"path\")\n          .attr(\"class\", \"country\")\n          .attr(\"d\", path)\n          .attr(\"fill\", \"bisque\")\n          .attr(\"stroke\", \"azure\");\n\n        cluster_view.expand_cluster_handler(cluster_view.clusters[0], true);\n\n         return cluster_view;\n      })\n    } else {\n      return cluster_view;\n    }\n\n    // copy all the divs other than the one matching the network tab ID\n    /*var cloned_empty_tab  = $('#trace-results').clone();\n    cloned_empty_tab.attr (\"id\", random_content_id);\n    console.log (cloned_empty_tab);\n\n    cloned_empty_tab.appendTo (\".tab-content\");    */\n\n    /*self.cluster_filtering_functions ['cluster_id'] = function (c) {return c.cluster_id == cluster.cluster_id;};\n    cluster.exclusive = 1;\n    self.has_exclusive_view = cluster.cluster_id;\n    self.draw_attribute_labels();\n    self.update(false);*/\n  };\n\n  self.get_ui_element_selector_by_role = function(role, not_nested) {\n    if (not_nested && !self.primary_graph) {\n      return undefined;\n    }\n    return (\n      (not_nested ? \"\" : \"#\" + self.ui_container_selector) +\n      \" [data-hivtrace-ui-role='\" +\n      role +\n      \"']\"\n    );\n  };\n\n  // ensure all checkboxes are unchecked at initialization\n  $('input[type=\"checkbox\"]').prop(\"checked\", false);\n\n  var handle_node_click = function(node) {\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    if (node) {\n      node.fixed = 1;\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Collapse cluster\")\n        .on(\"click\", function(d) {\n          node.fixed = 0;\n          collapse_cluster_handler(node, true);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      // SW20180605 : To be implemented\n\n      //menu_object\n      //  .append(\"li\")\n      //  .append(\"a\")\n      //  .attr(\"tabindex\", \"-1\")\n      //  .text(\"Show sequences used to make cluster\")\n      //  .on(\"click\", function(d) {\n      //    node.fixed = 0;\n      //    show_sequences_in_cluster (node, true);\n      //    menu_object.style(\"display\", \"none\");\n      //  });\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_node_click(null);\n      },\n      true\n    );\n  };\n\n  function get_initial_xy(packed) {\n    // create clusters from nodes\n    var mapped_clusters = get_all_clusters(self.nodes);\n\n    var d_clusters = {\n      id: \"root\",\n      children: []\n    };\n\n    // filter out clusters that are to be excluded\n    if (self.exclude_cluster_ids) {\n      mapped_clusters = _.omit(mapped_clusters, self.exclude_cluster_ids);\n    }\n\n    d_clusters.children = _.map(mapped_clusters, (value, key) => {\n      return {\n        cluster_id: key,\n        children: value\n      };\n    });\n\n    var treemap = packed\n      ? d3.layout\n          .pack()\n          .size([self.width, self.height])\n          //.sticky(true)\n          .children(function(d) {\n            return d.children;\n          })\n          .value(function(d) {\n            return Math.pow(d.parent.children.length, 1.5);\n          })\n          .sort(function(a, b) {\n            return b.value - a.value;\n          })\n          .padding(5)\n      : d3.layout\n          .treemap()\n          .size([self.width, self.height])\n          //.sticky(true)\n          .children(function(d) {\n            return d.children;\n          })\n          .value(function(d) {\n            return Math.pow(d.parent.children.length, 1.0);\n          })\n          .sort(function(a, b) {\n            return a.value - b.value;\n          })\n          .ratio(1);\n\n    var clusters = treemap.nodes(d_clusters);\n    _.each(clusters, function(c) {\n      //c.fixed = true;\n    });\n    return clusters;\n  }\n\n  function prepare_data_to_graph() {\n    var graphMe = {};\n    graphMe.all = [];\n    graphMe.edges = [];\n    graphMe.nodes = [];\n    graphMe.clusters = [];\n\n    var expandedClusters = [];\n    var drawnNodes = [];\n\n    self.clusters.forEach(function(x) {\n      if (self.cluster_display_filter(x)) {\n        // Check if hxb2_linked is in a child\n        var hxb2_exists =\n          x.children.some(function(c) {\n            return c.hxb2_linked;\n          }) && self.hide_hxb2;\n        if (!hxb2_exists) {\n          if (x.collapsed) {\n            graphMe.clusters.push(x);\n            graphMe.all.push(x);\n          } else {\n            expandedClusters[x.cluster_id] = true;\n          }\n        }\n      }\n    });\n\n    self.nodes.forEach(function(x, i) {\n      if (expandedClusters[x.cluster]) {\n        drawnNodes[i] = graphMe.nodes.length + graphMe.clusters.length;\n        graphMe.nodes.push(x);\n        graphMe.all.push(x);\n      }\n    });\n\n    self.edges.forEach(function(x) {\n      if (!(x.removed && self.filter_edges)) {\n        if (\n          drawnNodes[x.source] !== undefined &&\n          drawnNodes[x.target] !== undefined\n        ) {\n          var y = {};\n          for (var prop in x) {\n            y[prop] = x[prop];\n          }\n\n          y.source = drawnNodes[x.source];\n          y.target = drawnNodes[x.target];\n          graphMe.edges.push(y);\n        }\n      }\n    });\n\n    return graphMe;\n  }\n\n  self.view_subcluster = function(cluster, custom_filter, custom_name) {\n    var filtered_json = _extract_single_cluster(\n      custom_filter\n        ? _.filter(self.json.Nodes, custom_filter)\n        : cluster.children,\n      function(e) {\n        return e.length < self.subcluster_threshold;\n      }\n    );\n\n    _.each(filtered_json.Nodes, function(n) {\n      n.subcluster = \"1.1\";\n    });\n\n    if (_networkGraphAttrbuteID in json) {\n      filtered_json[_networkGraphAttrbuteID] = {};\n      jQuery.extend(\n        true,\n        filtered_json[_networkGraphAttrbuteID],\n        json[_networkGraphAttrbuteID]\n      );\n    }\n\n    var extra_menu_items = [\n      [\n        function(network, item) {\n          var enclosure = item.append(\"div\").classed(\"form-group\", true);\n          var label = enclosure\n            .append(\"label\")\n            .text(\"Recalculate R&R from \")\n            .classed(\"control-label\", true);\n          var date = enclosure\n            .append(\"input\")\n            .attr(\"type\", \"date\")\n            .classed(\"form-control\", true)\n            .attr(\"value\", _defaultDateViewFormatSlider(self.today))\n            .attr(\"max\", _defaultDateViewFormatSlider(self.today))\n            .attr(\n              \"min\",\n              _defaultDateViewFormatSlider(\n                d3.min(network.nodes, function(node) {\n                  return network.attribute_node_value_by_id(\n                    node,\n                    _networkCDCDateField\n                  );\n                })\n              )\n            )\n            .on(\"input\", function(e) {\n              //d3.event.preventDefault();\n              var set_date = _defaultDateViewFormatSlider.parse(this.value);\n              if (this.value) {\n                network.annotate_priority_clusters(\n                  _networkCDCDateField,\n                  36,\n                  12,\n                  set_date\n                );\n                var field_def = network.recent_rapid_definition(\n                  network,\n                  set_date\n                );\n                network.inject_attribute_description(\"recent_rapid\", field_def);\n                network._aux_process_category_values(\n                  network._aux_populate_category_fields(\n                    field_def,\n                    \"recent_rapid\"\n                  )\n                );\n                network.handle_attribute_categorical(\"recent_rapid\");\n                enclosure\n                  .classed(\"has-success\", true)\n                  .classed(\"has-error\", false);\n              } else {\n                enclosure\n                  .classed(\"has-success\", false)\n                  .classed(\"has-error\", true);\n              }\n            });\n        },\n        null\n      ],\n      [\n        \"Export cluster to .CSV\",\n        function(network) {\n          helpers.export_csv_button(\n            network._extract_attributes_for_nodes(\n              network._extract_nodes_by_id(\"1.1\"),\n              network._extract_exportable_attributes()\n            )\n          );\n        }\n      ]\n    ];\n\n    self._check_for_time_series(extra_menu_items);\n    self\n      .open_exclusive_tab_view_aux(\n        filtered_json,\n        custom_name || \"Subcluster \" + cluster.cluster_id,\n        {\n          //\"core-link\" : self.subcluster_threshold,\n          type: \"subcluster\",\n          cluster_id: cluster.cluster_id,\n          extra_menu: {\n            title: \"Action\",\n            items: extra_menu_items\n          }\n        }\n      )\n      .handle_attribute_categorical(\"recent_rapid\");\n\n    var selector =\n      \".subcluster-\" +\n      cluster.cluster_id.replace(\".\", \"_\") +\n      \" .show-small-clusters-button\";\n    var item = $(\n      '<span class=\"input-group-addon btn view-parent-btn\">View Parent</span>'\n    )\n      .data(\"cluster_id\", cluster.parent_cluster.cluster_id)\n      .insertAfter(selector);\n\n    item.on(\"click\", function(e) {\n      self.open_exclusive_tab_view($(this).data(\"cluster_id\"));\n    });\n  };\n\n  function _n_months_ago(reference_date, months) {\n    var past_date = new Date(reference_date);\n    var past_months = past_date.getMonth();\n    var diff_year = Math.floor(months / 12);\n    var left_over = months - diff_year * 12;\n\n    if (left_over > past_months) {\n      past_date.setFullYear(past_date.getFullYear() - diff_year - 1);\n      past_date.setMonth(12 - (left_over - past_months));\n    } else {\n      past_date.setFullYear(past_date.getFullYear() - diff_year);\n      past_date.setMonth(past_months - left_over);\n    }\n\n    //past_date.setTime (past_date.getTime () - months * 30 * 24 * 3600000);\n    return past_date;\n  }\n\n  self.annotate_priority_clusters = function(\n    date_field,\n    span_months,\n    recent_months,\n    start_date\n  ) {\n    try {\n      start_date = start_date || self.today;\n\n      var filter_by_date = function(cutoff, node) {\n        var node_dx = self.attribute_node_value_by_id(node, date_field);\n        if (node_dx instanceof Date) {\n          return node_dx >= cutoff && node_dx <= start_date;\n        } else {\n          node_dx = self._parse_dates(\n            self.attribute_node_value_by_id(node, date_field)\n          );\n          if (node_dx instanceof Date) {\n            return node_dx >= cutoff && node_dx <= start_date;\n          }\n        }\n        return false;\n      };\n\n      var cutoff_long = _n_months_ago(start_date, span_months);\n      var cutoff_short = _n_months_ago(start_date, recent_months);\n\n      var node_iterator;\n\n      if (start_date == self.today) {\n        node_iterator = self.nodes;\n      } else {\n        var beginning_of_time = new Date();\n        beginning_of_time.setYear(1900);\n        node_iterator = [];\n        _.each(self.nodes, function(node) {\n          if (filter_by_date(beginning_of_time, node)) {\n            node.priority_flag = 5;\n            node_iterator.push(node);\n          } else {\n            node.priority_flag = 4;\n          }\n        });\n      }\n\n      var oldest_nodes_first = function(n1, n2) {\n        // consistent node sorting, older nodes first\n        var node1_dx = self.attribute_node_value_by_id(n1, date_field);\n        var node2_dx = self.attribute_node_value_by_id(n2, date_field);\n\n        if (node1_dx == node2_dx) {\n          return n1.id < n2.id ? -1 : 1;\n        } else {\n          return node1_dx < node2_dx ? -1 : 1;\n        }\n        return 0;\n      };\n\n      // extract all clusters at once to avoid inefficiencies of multiple edge-set traverals\n\n      var split_clusters = {};\n      var node_id_to_local_cluster = {};\n\n      // reset all annotations\n\n      _.each(node_iterator, function(node) {\n        if (node.cluster) {\n          if (!(node.cluster in split_clusters)) {\n            split_clusters[node.cluster] = { Nodes: [], Edges: [] };\n          }\n          node_id_to_local_cluster[node.id] =\n            split_clusters[node.cluster][\"Nodes\"].length;\n          split_clusters[node.cluster][\"Nodes\"].push(node);\n        }\n      });\n\n      _.each(self.edges, function(edge) {\n        if (edge.length <= self.subcluster_threshold) {\n          var edge_cluster = json.Nodes[edge.source].cluster;\n\n          var source_id = json.Nodes[edge.source].id,\n            target_id = json.Nodes[edge.target].id;\n\n          if (\n            source_id in node_id_to_local_cluster &&\n            target_id in node_id_to_local_cluster\n          ) {\n            var copied_edge = _.clone(edge);\n\n            copied_edge.source = node_id_to_local_cluster[source_id];\n            copied_edge.target = node_id_to_local_cluster[target_id];\n\n            split_clusters[edge_cluster][\"Edges\"].push(copied_edge);\n          }\n        }\n      });\n\n      _.each(split_clusters, function(cluster_nodes, cluster_index) {\n        /** extract subclusters; all nodes at given threshold */\n        /** Sub-Cluster: all nodes connected at 0.005 subs/site; there can be multiple sub-clusters per cluster */\n\n        //var cluster_nodes       = _extract_single_cluster (cluster.children, null, true);\n\n        var array_index = self.cluster_mapping[cluster_index];\n\n        self.clusters[array_index].priority_score = 0;\n\n        /** all clusters with more than one member connected at 'threshold' edge length */\n        var edges = [];\n\n        var subclusters = _.filter(\n          hivtrace_cluster_depthwise_traversal(\n            cluster_nodes.Nodes,\n            cluster_nodes.Edges,\n            null,\n            edges\n          ),\n          function(cc) {\n            return cc.length > 1;\n          }\n        );\n\n        edges = _.filter(edges, function(es) {\n          return es.length > 1;\n        });\n\n        /** sort subclusters by oldest node */\n\n        _.each(subclusters, function(c, i) {\n          c.sort(oldest_nodes_first);\n        });\n\n        subclusters.sort(function(c1, c2) {\n          return oldest_nodes_first(c1[0], c2[0]);\n        });\n\n        subclusters = _.map(subclusters, function(c, i) {\n          var label = self.clusters[array_index].cluster_id + \".\" + (i + 1);\n\n          _.each(c, function(n) {\n            n.subcluster = label;\n            n.priority_flag = 0;\n            n.in_rr = 0;\n          });\n\n          return {\n            children: _.clone(c),\n            parent_cluster: self.clusters[array_index],\n            cluster_id: label,\n            distances: helpers.describe_vector(\n              _.map(edges[i], function(e) {\n                return e.length;\n              })\n            )\n          };\n        });\n\n        _.each(subclusters, function(c) {\n          _compute_cluster_degrees(c);\n        });\n\n        self.clusters[array_index].subclusters = subclusters;\n\n        /** now, for each subcluster, extract the recent and rapid part */\n\n        /** Recent & Rapid (R&R) Cluster: the part of the Sub-Cluster inferred using only cases dx’d in the previous 36 months \n                and at least two cases dx’d in the previous 12 months; there is a path between all nodes in an R&R Cluster\n                \n                20180406 SLKP: while unlikely, this definition could result in multiple R&R clusters \n                per subclusters; for now we will add up all the cases for prioritization, and \n                display the largest R&R cluster if there is more than one\n            */\n\n        _.each(subclusters, function(sub) {\n          // extract nodes based on dates\n          var subcluster_json = _extract_single_cluster(\n            _.filter(sub.children, _.partial(filter_by_date, cutoff_long)),\n            null,\n            true,\n            cluster_nodes\n          );\n          var rr_cluster = _.filter(\n            hivtrace_cluster_depthwise_traversal(\n              subcluster_json.Nodes,\n              _.filter(subcluster_json.Edges, function(e) {\n                return e.length <= self.subcluster_threshold;\n              })\n            ),\n            function(cc) {\n              return cc.length > 1;\n            }\n          );\n\n          sub.rr_count = rr_cluster.length;\n\n          rr_cluster.sort(function(a, b) {\n            return b.length - a.length;\n          });\n\n          sub.priority_score = [];\n          sub.recent_nodes = [];\n\n          _.each(rr_cluster, function(recent_cluster) {\n            var priority_nodes = _.groupBy(\n              recent_cluster,\n              _.partial(filter_by_date, cutoff_short)\n            );\n            sub.recent_nodes.push(recent_cluster.length);\n            if (true in priority_nodes) {\n              sub.priority_score.push(priority_nodes[true].length);\n              _.each(priority_nodes[true], function(n) {\n                n.priority_flag = filter_by_date(start_date, n) ? 4 : 1;\n                if (priority_nodes[true].length >= 3) {\n                  n.in_rr = true;\n                  if (n.priority_flag == 1) {\n                    n.priority_flag = 2;\n                  }\n                }\n              });\n            }\n            if (false in priority_nodes) {\n              _.each(priority_nodes[false], function(n) {\n                n.priority_flag = 3;\n              });\n            }\n          });\n\n          //console.log (sub.recent_nodes);\n\n          self.clusters[array_index].priority_score = sub.priority_score;\n        });\n      });\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  };\n\n  function default_layout(packed) {\n    // let's create an array of clusters from the json\n\n    var init_layout = get_initial_xy(packed);\n\n    if (self.clusters.length == 0) {\n      self.clusters = init_layout.filter(function(v, i, obj) {\n        return !(typeof v.cluster_id === \"undefined\");\n      });\n    } else {\n      var coordinate_update = {};\n      _.each(self.clusters, function(c) {\n        coordinate_update[c.cluster_id] = c;\n      });\n      _.each(init_layout, function(c) {\n        if (\"cluster_id\" in c) {\n          _.extendOwn(coordinate_update[c.cluster_id], c);\n        }\n      });\n    }\n\n    //var sizes = network_layout.size();\n\n    var set_init_coords = packed\n      ? function(n) {\n          n.x += n.r * 0.5;\n          n.y += n.r * 0.5;\n        }\n      : function(n) {\n          n.x += n.dx * 0.5;\n          n.y += n.dy * 0.5;\n        };\n\n    _.each([self.nodes, self.clusters], function(list) {\n      _.each(list, set_init_coords);\n    });\n\n    self.clusters.forEach(collapse_cluster);\n  }\n\n  function change_spacing(delta) {\n    self.charge_correction = self.charge_correction * delta;\n    network_layout.start();\n  }\n\n  function change_window_size(delta, trigger) {\n    if (delta) {\n      var x_scale = (self.width + delta / 2) / self.width;\n      var y_scale = (self.height + delta / 2) / self.height;\n\n      self.width += delta;\n      self.height += delta;\n\n      var rescale_x = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.x;\n        })\n      );\n      rescale_x.range(\n        _.map(rescale_x.domain(), function(v) {\n          return v * x_scale;\n        })\n      );\n      //.range ([50,self.width-50]),\n      var rescale_y = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.y;\n        })\n      );\n      rescale_y.range(\n        _.map(rescale_y.domain(), function(v) {\n          return v * y_scale;\n        })\n      );\n\n      _.each(network_layout.nodes(), function(node) {\n        node.x = rescale_x(node.x);\n        node.y = rescale_y(node.y);\n      });\n    }\n\n    self.width = Math.min(Math.max(self.width, 200), 4000);\n    self.height = Math.min(Math.max(self.height, 200), 4000);\n\n    network_layout.size([self.width, self.height]);\n    self.network_svg.attr(\"width\", self.width).attr(\"height\", self.height);\n\n    if (trigger) {\n      network_layout.start();\n    } else {\n      if (delta) {\n        self.update(true);\n      }\n    }\n  }\n\n  self.compute_adjacency_list = _.once(function() {\n    self.nodes.forEach(function(n) {\n      n.neighbors = d3.set();\n    });\n\n    self.edges.forEach(function(e) {\n      self.nodes[e.source].neighbors.add(e.target);\n      self.nodes[e.target].neighbors.add(e.source);\n    });\n  });\n\n  self.compute_local_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.nodes.forEach(function(n) {\n      _.defer(function(a_node) {\n        neighborhood_size = a_node.neighbors.size();\n        if (neighborhood_size < 2) {\n          a_node.lcc = misc.undefined;\n        } else {\n          if (neighborhood_size > 500) {\n            a_node.lcc = misc.too_large;\n          } else {\n            // count triangles\n            neighborhood = a_node.neighbors.values();\n            counter = 0;\n            for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n              for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n                if (\n                  self.nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])\n                ) {\n                  counter++;\n                }\n              }\n            }\n\n            a_node.lcc =\n              2 * counter / neighborhood_size / (neighborhood_size - 1);\n          }\n        }\n      }, n);\n    });\n  });\n\n  self.get_node_by_id = function(id) {\n    return self.nodes.filter(function(n) {\n      return n.id == id;\n    })[0];\n  };\n\n  self.compute_local_clustering_coefficients_worker = _.once(function() {\n    var worker = new Worker(\"workers/lcc.js\");\n\n    worker.onmessage = function(event) {\n      var nodes = event.data.Nodes;\n\n      nodes.forEach(function(n) {\n        node_to_update = self.get_node_by_id(n.id);\n        node_to_update.lcc = n.lcc ? n.lcc : misc.undefined;\n      });\n    };\n\n    var worker_obj = {};\n    worker_obj[\"Nodes\"] = self.nodes;\n    worker_obj[\"Edges\"] = self.edges;\n    worker.postMessage(worker_obj);\n  });\n\n  var estimate_cubic_compute_cost = _.memoize(\n    function(c) {\n      self.compute_adjacency_list();\n      return _.reduce(\n        _.first(_.pluck(c.children, \"degree\").sort(d3.descending), 3),\n        function(memo, value) {\n          return memo * value;\n        },\n        1\n      );\n    },\n    function(c) {\n      return c.cluster_id;\n    }\n  );\n\n  self.compute_global_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.clusters.forEach(function(c) {\n      _.defer(function(a_cluster) {\n        cluster_size = a_cluster.children.length;\n        if (cluster_size < 3) {\n          a_cluster.cc = misc.undefined;\n        } else {\n          if (estimate_cubic_compute_cost(a_cluster, true) >= 5000000) {\n            a_cluster.cc = misc.too_large;\n          } else {\n            // pull out all the nodes that have this cluster id\n            member_nodes = [];\n\n            var triads = 0;\n            var triangles = 0;\n\n            self.nodes.forEach(function(n, i) {\n              if (n.cluster == a_cluster.cluster_id) {\n                member_nodes.push(i);\n              }\n            });\n            member_nodes.forEach(function(node) {\n              my_neighbors = self.nodes[node].neighbors\n                .values()\n                .map(function(d) {\n                  return +d;\n                })\n                .sort(d3.ascending);\n              for (n1 = 0; n1 < my_neighbors.length; n1 += 1) {\n                for (n2 = n1 + 1; n2 < my_neighbors.length; n2 += 1) {\n                  triads += 1;\n                  if (\n                    self.nodes[my_neighbors[n1]].neighbors.has(my_neighbors[n2])\n                  ) {\n                    triangles += 1;\n                  }\n                }\n              }\n            });\n\n            a_cluster.cc = triangles / triads;\n          }\n        }\n      }, c);\n    });\n  });\n\n  self.mark_nodes_as_processing = function(property) {\n    self.nodes.forEach(function(n) {\n      n[property] = misc.processing;\n    });\n  };\n\n  self.compute_graph_stats = function() {\n    d3.select(this).classed(\"disabled\", true).select(\"i\").classed({\n      \"fa-calculator\": false,\n      \"fa-cog\": true,\n      \"fa-spin\": true\n    });\n    self.mark_nodes_as_processing(\"lcc\");\n    self.compute_local_clustering_coefficients_worker();\n    self.compute_global_clustering_coefficients();\n    d3.select(this).remove();\n  };\n\n  /*------------ Constructor ---------------*/\n  function initial_json_load() {\n    var connected_links = [];\n    var total = 0;\n    self.exclude_cluster_ids = {};\n    self.has_hxb2_links = false;\n    self.cluster_sizes = [];\n\n    graph_data.Nodes.forEach(function(d) {\n      if (typeof self.cluster_sizes[d.cluster - 1] === \"undefined\") {\n        self.cluster_sizes[d.cluster - 1] = 1;\n      } else {\n        self.cluster_sizes[d.cluster - 1]++;\n      }\n      if (\"is_lanl\" in d) {\n        d.is_lanl = d.is_lanl == \"true\";\n      }\n\n      if (d.attributes.indexOf(\"problematic\") >= 0) {\n        self.has_hxb2_links = d.hxb2_linked = true;\n      }\n    });\n\n    /* add buttons and handlers */\n    /* clusters first */\n\n    self.ui_container_selector = button_bar_ui;\n\n    self._extract_attributes_for_nodes = function(nodes, column_names) {\n      var result = [\n        _.map(column_names, function(c) {\n          return c.raw_attribute_key;\n        })\n      ];\n      _.each(nodes, function(n) {\n        result.push(\n          _.map(column_names, function(c) {\n            return self.attribute_node_value_by_id(n, c.raw_attribute_key);\n          })\n        );\n      });\n      return result;\n    };\n\n    self._extract_exportable_attributes = function() {\n      var allowed_types = {\n        String: 1,\n        Date: 1,\n        Number: 1\n      };\n\n      return _.filter(self.json[_networkGraphAttrbuteID], function(d) {\n        return d.type in allowed_types;\n      });\n    };\n\n    self._extract_nodes_by_id = function(id) {\n      var string_id = id.toString();\n      return _.filter(self.nodes, function(n) {\n        return n.cluster == id || n.subcluster == string_id;\n      });\n    };\n\n    self._cluster_list_view_render = function(\n      cluster_id,\n      group_by_attribute,\n      the_list\n    ) {\n      the_list.selectAll(\"*\").remove();\n      var column_ids = self._extract_exportable_attributes();\n      var cluster_nodes = self._extract_nodes_by_id(cluster_id);\n\n      d3\n        .select(\n          self.get_ui_element_selector_by_role(\"cluster_list_data_export\", true)\n        )\n        .on(\"click\", function(d) {\n          helpers.export_csv_button(\n            self._extract_attributes_for_nodes(cluster_nodes, column_ids)\n          );\n        });\n\n      if (group_by_attribute) {\n        _.each(column_ids, function(column) {\n          var binned = _.groupBy(cluster_nodes, function(n) {\n            return self.attribute_node_value_by_id(n, column.raw_attribute_key);\n          });\n          var sorted_keys = _.keys(binned).sort();\n          var attribute_record = the_list.append(\"li\");\n          attribute_record.append(\"code\").text(column.raw_attribute_key);\n          var attribute_list = attribute_record\n            .append(\"dl\")\n            .classed(\"dl-horizontal\", true);\n          _.each(sorted_keys, function(key) {\n            attribute_list.append(\"dt\").text(key);\n            attribute_list.append(\"dd\").text(\n              _.map(binned[key], function(n) {\n                return n.id;\n              }).join(\", \")\n            );\n          });\n        });\n      } else {\n        _.each(cluster_nodes, function(node) {\n          var patient_record = the_list.append(\"li\");\n          patient_record.append(\"code\").text(node.id);\n          var patient_list = patient_record\n            .append(\"dl\")\n            .classed(\"dl-horizontal\", true);\n          _.each(column_ids, function(column) {\n            patient_list.append(\"dt\").text(column.raw_attribute_key);\n            patient_list\n              .append(\"dd\")\n              .text(\n                self.attribute_node_value_by_id(node, column.raw_attribute_key)\n              );\n          });\n        });\n      }\n    };\n\n    self._setup_cluster_list_view = function() {\n      d3\n        .select(\n          self.get_ui_element_selector_by_role(\"cluster_list_view_toggle\", true)\n        )\n        .on(\"click\", function() {\n          d3.event.preventDefault();\n          var group_by_id = false;\n\n          var button_clicked = $(this);\n          if (button_clicked.data(\"view\") == \"id\") {\n            button_clicked.data(\"view\", \"attribute\");\n            button_clicked.text(\"Group by ID\");\n            group_by_id = false;\n          } else {\n            button_clicked.data(\"view\", \"id\");\n            button_clicked.text(\"Group by attribute\");\n            group_by_id = true;\n          }\n          self._cluster_list_view_render(\n            button_clicked.data(\"cluster\").toString(),\n            !group_by_id,\n            d3.select(\n              self.get_ui_element_selector_by_role(\"cluster_list_payload\", true)\n            )\n          );\n        });\n\n      $(\n        self.get_ui_element_selector_by_role(\"cluster_list\", true)\n      ).on(\"show.bs.modal\", function(event) {\n        var link_clicked = $(event.relatedTarget);\n        var cluster_id = link_clicked.data(\"cluster\");\n        var modal = d3.select(\n          self.get_ui_element_selector_by_role(\"cluster_list\", true)\n        );\n        modal\n          .selectAll(\".modal-title\")\n          .text(\"Listing nodes in cluster \" + cluster_id);\n        $(\n          self.get_ui_element_selector_by_role(\"cluster_list_view_toggle\", true)\n        ).data(\"cluster\", cluster_id);\n\n        self._cluster_list_view_render(\n          cluster_id,\n          $(\n            self.get_ui_element_selector_by_role(\n              \"cluster_list_view_toggle\",\n              true\n            )\n          ).data(\"view\") != \"id\",\n          modal.select(\n            self.get_ui_element_selector_by_role(\"cluster_list_payload\", true)\n          )\n        );\n      });\n    };\n\n    if (button_bar_ui) {\n      self._setup_cluster_list_view();\n\n      var cluster_ui_container = d3.select(\n        self.get_ui_element_selector_by_role(\"cluster_operations_container\")\n      );\n\n      cluster_ui_container.selectAll(\"li\").remove();\n\n      var fix_handler = function(do_fix) {\n        _.each([self.clusters, self.nodes], function(list) {\n          _.each(list, function(obj) {\n            obj.fixed = do_fix;\n          });\n        });\n      };\n\n      var layout_reset_handler = function(packed) {\n        var fixed = [];\n        _.each(self.clusters, function(obj) {\n          if (obj.fixed) {\n            fixed.push(obj);\n          }\n          obj.fixed = false;\n        });\n        default_layout(packed);\n        network_layout.tick();\n        self.update();\n        _.each(fixed, function(obj) {\n          obj.fixed = true;\n        });\n      };\n\n      var cluster_commands = [\n        [\n          \"Expand All\",\n          function() {\n            return self.expand_some_clusters();\n          },\n          true,\n          \"hivtrace-expand-all\"\n        ],\n        [\n          \"Collapse All\",\n          function() {\n            return self.collapse_some_clusters();\n          },\n          true,\n          \"hivtrace-collapse-all\"\n        ],\n        [\n          \"Expand Filtered\",\n          function() {\n            return self.expand_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-expand-filtered\"\n        ],\n        [\n          \"Collapse Filtered\",\n          function() {\n            return self.collapse_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-collapse-filtered\"\n        ],\n        [\n          \"Fix all objects in place\",\n          _.partial(fix_handler, true),\n          true,\n          \"hivtrace-fix-in-place\"\n        ],\n        [\n          \"Allow all objects to float\",\n          _.partial(fix_handler, false),\n          true,\n          \"hivtrace-allow-to-float\"\n        ],\n        [\n          \"Reset layout [packed]\",\n          _.partial(layout_reset_handler, true),\n          true,\n          \"hivtrace-reset-layout\"\n        ],\n        [\n          \"Reset layout [tiled]\",\n          _.partial(layout_reset_handler, false),\n          true,\n          \"hivtrace-reset-layout\"\n        ],\n        [\n          \"Hide problematic clusters\",\n          function(item) {\n            d3\n              .select(item)\n              .text(\n                self.hide_hxb2\n                  ? \"Hide problematic clusters\"\n                  : \"Show problematic clusters\"\n              );\n            self.toggle_hxb2();\n          },\n          self.has_hxb2_links,\n          \"hivtrace-hide-problematic-clusters\"\n        ]\n      ];\n\n      if (!self._is_CDC_) {\n        cluster_commands.push([\n          \"Show removed edges\",\n          function(item) {\n            self.filter_edges = !self.filter_edges;\n            d3\n              .select(item)\n              .text(\n                self.filter_edges ? \"Show removed edges\" : \"Hide removed edges\"\n              );\n            self.update(false);\n          },\n          function() {\n            return _.some(self.edges, function(d) {\n              return d.removed;\n            });\n          },\n          \"hivtrace-show-removed-edges\"\n        ]);\n      }\n\n      cluster_commands.forEach(function(item, index) {\n        var handler_callback = item[1];\n        if (item[2]) {\n          this.append(\"li\")\n            .append(\"a\")\n            .text(item[0])\n            .attr(\"href\", \"#\")\n            //.attr(\"id\", item[3])\n            .on(\"click\", function(e) {\n              handler_callback(this);\n              d3.event.preventDefault();\n            });\n        }\n      }, cluster_ui_container);\n\n      var button_group = d3.select(\n        self.get_ui_element_selector_by_role(\"button_group\")\n      );\n\n      if (!button_group.empty()) {\n        button_group.selectAll(\"button\").remove();\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Expand spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(5 / 4);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-plus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Compress spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(4 / 5);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-minus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Enlarge window\")\n          .on(\"click\", function(d) {\n            change_window_size(100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-expand\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Shrink window\")\n          .on(\"click\", function(d) {\n            change_window_size(-100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-compress\", true);\n\n        if (!self._is_CDC_) {\n          button_group\n            .append(\"button\")\n            .classed(\"btn btn-default btn-sm\", true)\n            .attr(\"title\", \"Compute graph statistics\")\n            .attr(\"id\", \"hivtrace-compute-graph-statistics\")\n            .on(\"click\", function(d) {\n              _.bind(self.compute_graph_stats, this)();\n            })\n            .append(\"i\")\n            .classed(\"fa fa-calculator\", true);\n        }\n\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Save Image\")\n          //.attr(\"id\", \"hivtrace-export-image\")\n          .on(\"click\", function(d) {\n            helpers.save_image(\"png\", \"#\" + self.dom_prefix + \"-network-svg\");\n          })\n          .append(\"i\")\n          .classed(\"fa fa-image\", true);\n      }\n\n      $(self.get_ui_element_selector_by_role(\"filter\")).on(\n        \"input propertychange\",\n        _.throttle(function(e) {\n          var filter_value = $(this).val();\n          self.filter(\n            filter_value\n              .split(\" \")\n              .filter(function(d) {\n                return d.length > 0;\n              })\n              .map(function(d) {\n                if (d.length > 2) {\n                  if (d[0] == '\"' && d[d.length - 1] == '\"') {\n                    return {\n                      type: \"re\",\n                      value: new RegExp(\n                        \"^\" + d.substr(1, d.length - 2) + \"$\",\n                        \"i\"\n                      )\n                    };\n                  }\n                  if (d[0] == \"<\") {\n                    var distance_threshold = parseFloat(d.substr(1));\n                    if (distance_threshold > 0) {\n                      return {\n                        type: \"distance\",\n                        value: distance_threshold\n                      };\n                    }\n                  }\n                }\n                return {\n                  type: \"re\",\n                  value: new RegExp(d, \"i\")\n                };\n              })\n          );\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role(\"hide_filter\")).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.hide_unselected = !self.hide_unselected;\n          self.filter_visibility();\n          self.update(true);\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role(\"show_small_clusters\")).on(\n        \"change\",\n        _.throttle(function(e) {\n          if (\"size\" in self.cluster_filtering_functions) {\n            delete self.cluster_filtering_functions[\"size\"];\n          } else {\n            self.cluster_filtering_functions[\"size\"] = self.filter_by_size;\n          }\n\n          self.update(false);\n        }, 250)\n      );\n\n      $(\n        self.get_ui_element_selector_by_role(\"pairwise_table_pecentage\", true)\n      ).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.show_percent_in_pairwise_table = !self.show_percent_in_pairwise_table;\n          render_binned_table(\n            \"attribute_table\",\n            self.colorizer[\"category_map\"],\n            self.colorizer[\"category_pairwise\"]\n          );\n        }, 250)\n      );\n    }\n\n    if (_networkGraphAttrbuteID in json) {\n      attributes = json[_networkGraphAttrbuteID];\n    } else {\n      if (attributes && \"hivtrace\" in attributes) {\n        attributes = attributes[\"hivtrace\"];\n      }\n    }\n\n    // Initialize class attributes\n    singletons = graph_data.Nodes.filter(function(v, i) {\n      return v.cluster === null;\n    }).length;\n    self.nodes = graph_data.Nodes.filter(function(v, i) {\n      if (\n        v.cluster &&\n        typeof self.exclude_cluster_ids[v.cluster] === \"undefined\"\n      ) {\n        connected_links[i] = total++;\n        return true;\n      }\n      return false;\n    });\n    self.edges = graph_data.Edges.filter(function(v, i) {\n      return (\n        connected_links[v.source] != undefined &&\n        connected_links[v.target] != undefined\n      );\n    });\n    self.edges = self.edges.map(function(v, i) {\n      v.source = connected_links[v.source];\n      v.target = connected_links[v.target];\n      v.id = i;\n      return v;\n    });\n\n    compute_node_degrees(self.nodes, self.edges);\n\n    default_layout(self.initial_packed);\n    self.clusters.forEach(function(d, i) {\n      self.cluster_mapping[d.cluster_id] = i;\n      d.hxb2_linked = d.children.some(function(c) {\n        return c.hxb2_linked;\n      });\n      _compute_cluster_degrees(d);\n      d.distances = [];\n    });\n\n    try {\n      if (options && options[\"extra_menu\"]) {\n        var extra_ui_container = d3.select(\n          self.get_ui_element_selector_by_role(\"extra_operations_container\")\n        );\n\n        d3\n          .select(\n            self.get_ui_element_selector_by_role(\"extra_operations_enclosure\")\n          )\n          .selectAll(\"button\")\n          .text(options[\"extra_menu\"][\"title\"])\n          .append(\"span\")\n          .classed(\"caret\", \"true\");\n        //extra_ui_container\n        extra_ui_container.selectAll(\"li\").remove();\n\n        options[\"extra_menu\"][\"items\"].forEach(function(item, index) {\n          //console.log (item);\n          var handler_callback = item[1];\n          if (_.isFunction(item[0])) {\n            item[0](self, this.append(\"li\"));\n          } else {\n            this.append(\"li\")\n              .append(\"a\")\n              .text(item[0])\n              .attr(\"href\", \"#\")\n              .on(\"click\", function(e) {\n                handler_callback(self, this);\n                d3.event.preventDefault();\n              });\n          }\n        }, extra_ui_container);\n\n        d3\n          .select(\n            self.get_ui_element_selector_by_role(\"extra_operations_enclosure\")\n          )\n          .style(\"display\", null);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    self._aux_populate_category_menus = function() {\n      if (button_bar_ui) {\n        // decide if the variable can be considered categorical by examining its range\n\n        //console.log (\"self._aux_populate_category_menus\");\n        var valid_cats = _.filter(\n          _.map(\n            graph_data[_networkGraphAttrbuteID],\n            self._aux_populate_category_fields\n          ),\n          function(d) {\n            //console.log (d);\n            return (\n              d.discrete &&\n              \"value_range\" in d &&\n              d[\"value_range\"].length <= _maximumValuesInCategories\n            );\n          }\n        );\n\n        var valid_shapes = _.filter(valid_cats, function(d) {\n          return (\n            (d.discrete && d.dimension <= 7) ||\n            d[\"raw_attribute_key\"] in _networkPresetShapeSchemes\n          );\n        });\n\n        // sort values alphabetically for consistent coloring\n\n        _.each([valid_cats, valid_shapes], function(list) {\n          _.each(list, self._aux_process_category_values);\n        });\n\n        var valid_scales = _.filter(\n          _.map(graph_data[_networkGraphAttrbuteID], function(d, k) {\n            function determine_scaling(d, values, scales) {\n              var low_var = Infinity;\n\n              _.each(scales, function(scl) {\n                d[\"value_range\"] = d3.extent(values);\n                var bins = _.map(\n                  _.range(_networkContinuousColorStops),\n                  function() {\n                    return 0;\n                  }\n                );\n                scl\n                  .range([0, _networkContinuousColorStops - 1])\n                  .domain(d[\"value_range\"]);\n                _.each(values, function(v) {\n                  bins[Math.floor(scl(v))]++;\n                });\n\n                var mean = values.length / _networkContinuousColorStops;\n                var vrnc = _.reduce(bins, function(p, c) {\n                  return p + (c - mean) * (c - mean);\n                });\n\n                //console.log (d['value_range'], bins);\n\n                if (vrnc < low_var) {\n                  low_var = vrnc;\n                  d[\"scale\"] = scl;\n                }\n              });\n            }\n\n            d[\"raw_attribute_key\"] = k;\n            if (d.type == \"Number\") {\n              var values = _.filter(\n                _.map(graph_data.Nodes, function(nd) {\n                  return self.attribute_node_value_by_id(nd, k, true);\n                }),\n                function(v) {\n                  return v != _networkMissing;\n                }\n              );\n              // automatically determine the scale and see what spaces the values most evenly\n              determine_scaling(d, values, [\n                d3.scale.linear(),\n                d3.scale.log(),\n                d3.scale.pow().exponent(1 / 3),\n                d3.scale.pow().exponent(0.25),\n                d3.scale.pow().exponent(0.5),\n                d3.scale.pow().exponent(1 / 8),\n                d3.scale.pow().exponent(1 / 16)\n              ]);\n            } else {\n              if (d.type == \"Date\") {\n                var values = _.filter(\n                  _.map(graph_data.Nodes, function(nd) {\n                    try {\n                      var a_date = self.attribute_node_value_by_id(nd, k);\n                      //console.log (k, a_date);\n                      inject_attribute_node_value_by_id(\n                        nd,\n                        k,\n                        self._parse_dates(a_date)\n                      );\n                    } catch (err) {\n                      inject_attribute_node_value_by_id(nd, k, _networkMissing);\n                    }\n                    return self.attribute_node_value_by_id(nd, k);\n                  }),\n                  function(v) {\n                    return v == _networkMissing ? null : v;\n                  }\n                );\n                // automatically determine the scale and see what spaces the values most evenly\n                if (values.length == 0) {\n                  // invalid scale\n                  return {};\n                }\n                determine_scaling(d, values, [d3.time.scale()]);\n              }\n            }\n            return d;\n          }),\n          function(d) {\n            return d.type == \"Number\" || d.type == \"Date\";\n          }\n        );\n\n        function _menu_label_gen(d) {\n          return (\n            (d[\"annotation\"] ? \"[\" + d[\"annotation\"] + \"] \" : \"\") + d[\"label\"]\n          );\n        }\n\n        //console.log (valid_scales);\n        //valid_cats.splice (0,0, {'label' : 'None', 'index' : -1});\n\n        [\n          d3.select(self.get_ui_element_selector_by_role(\"attributes\")),\n          d3.select(\n            self.get_ui_element_selector_by_role(\"attributes_cat\", true)\n          )\n        ].forEach(function(m) {\n          //console.log (m);\n\n          if (m.empty()) {\n            return;\n          }\n          m.selectAll(\"li\").remove();\n\n          var menu_items = [\n            [\n              [\"None\", null, _.partial(self.handle_attribute_categorical, null)]\n            ],\n            [[\"Categorical\", \"heading\", null]]\n          ].concat(\n            valid_cats.map(function(d, i) {\n              return [\n                [\n                  _menu_label_gen(d),\n                  d[\"raw_attribute_key\"],\n                  _.partial(\n                    self.handle_attribute_categorical,\n                    d[\"raw_attribute_key\"]\n                  )\n                ]\n              ];\n            })\n          );\n\n          if (valid_scales.length) {\n            menu_items = menu_items\n              .concat([[[\"Continuous\", \"heading\", null]]])\n              .concat(\n                valid_scales.map(function(d, i) {\n                  return [\n                    [\n                      _menu_label_gen(d),\n                      d[\"raw_attribute_key\"],\n                      _.partial(\n                        self.handle_attribute_continuous,\n                        d[\"raw_attribute_key\"]\n                      )\n                    ]\n                  ];\n                })\n              );\n          }\n\n          var cat_menu = m.selectAll(\"li\").data(menu_items);\n\n          cat_menu\n            .enter()\n            .append(\"li\")\n            .classed(\"disabled\", function(d) {\n              return d[0][1] == \"heading\";\n            })\n            .style(\"font-variant\", function(d) {\n              return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n            });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (d[1] == \"heading\") return \"font-style: italic\";\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        [\n          d3.select(self.get_ui_element_selector_by_role(\"shapes\"))\n        ].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_shape_categorical, null)]]\n            ].concat(\n              valid_shapes.map(function(d, i) {\n                return [\n                  [\n                    _menu_label_gen(d),\n                    d[\"raw_attribute_key\"],\n                    _.partial(\n                      self.handle_shape_categorical,\n                      d[\"raw_attribute_key\"]\n                    )\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        $(\n          self.get_ui_element_selector_by_role(\"opacity_invert\")\n        ).on(\"click\", function(e) {\n          if (self.colorizer[\"opacity_scale\"]) {\n            self.colorizer[\"opacity_scale\"].range(\n              self.colorizer[\"opacity_scale\"].range().reverse()\n            );\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        $(\n          self.get_ui_element_selector_by_role(\"attributes_invert\")\n        ).on(\"click\", function(e) {\n          if (self.colorizer[\"category_id\"]) {\n            graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n              \"scale\"\n            ].range(\n              graph_data[_networkGraphAttrbuteID][\n                self.colorizer[\"category_id\"]\n              ][\"scale\"]\n                .range()\n                .reverse()\n            );\n            self.clusters.forEach(function(the_cluster) {\n              the_cluster[\"gradient\"] = compute_cluster_gradient(\n                the_cluster,\n                self.colorizer[\"category_id\"]\n              );\n            });\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        [\n          d3.select(self.get_ui_element_selector_by_role(\"opacity\"))\n        ].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_attribute_opacity, null)]]\n            ].concat(\n              valid_scales.map(function(d, i) {\n                return [\n                  [\n                    d[\"label\"],\n                    d[\"raw_attribute_key\"],\n                    _.partial(\n                      self.handle_attribute_opacity,\n                      d[\"raw_attribute_key\"]\n                    )\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n      }\n    };\n\n    if (attributes) {\n      /*\n         map attributes into nodes and into the graph object itself using\n         _networkGraphAttrbuteID as the key\n      */\n\n      if (\"attribute_map\" in attributes) {\n        var attribute_map = attributes[\"attribute_map\"];\n\n        if (\"map\" in attribute_map && attribute_map[\"map\"].length > 0) {\n          graph_data[_networkGraphAttrbuteID] = attribute_map[\n            \"map\"\n          ].map(function(a, i) {\n            return {\n              label: a,\n              type: null,\n              values: {},\n              index: i,\n              range: 0\n            };\n          });\n\n          graph_data.Nodes.forEach(function(n) {\n            n[_networkGraphAttrbuteID] = n.id.split(attribute_map[\"delimiter\"]);\n            n[_networkGraphAttrbuteID].forEach(function(v, i) {\n              if (i < graph_data[_networkGraphAttrbuteID].length) {\n                if (!(v in graph_data[_networkGraphAttrbuteID][i][\"values\"])) {\n                  graph_data[_networkGraphAttrbuteID][i][\"values\"][v] =\n                    graph_data[_networkGraphAttrbuteID][i][\"range\"];\n                  graph_data[_networkGraphAttrbuteID][i][\"range\"] += 1;\n                }\n              }\n              //graph_data [_networkGraphAttrbuteID][i][\"values\"][v] = 1 + (graph_data [_networkGraphAttrbuteID][i][\"values\"][v] ? graph_data [_networkGraphAttrbuteID][i][\"values\"][v] : 0);\n            });\n          });\n\n          graph_data[_networkGraphAttrbuteID].forEach(function(d) {\n            if (\n              d[\"range\"] < graph_data.Nodes.length &&\n              d[\"range\"] > 1 &&\n              d[\"range\"] <= 20\n            ) {\n              d[\"type\"] = \"category\";\n            }\n          });\n        }\n      }\n\n      _.each(self._networkPredefinedAttributeTransforms, function(\n        computed,\n        key\n      ) {\n        if (_.isFunction(computed)) {\n          computed = computed(self);\n        }\n\n        if (\n          !computed[\"depends\"] ||\n          _.has(graph_data[_networkGraphAttrbuteID], computed[\"depends\"])\n        ) {\n          var extension = {};\n          extension[key] = computed;\n          _.extend(graph_data[_networkGraphAttrbuteID], extension);\n          self.inject_attribute_description(key, computed);\n          _.each(graph_data.Nodes, function(node) {\n            inject_attribute_node_value_by_id(\n              node,\n              key,\n              computed[\"map\"](node, self)\n            );\n          });\n        }\n      });\n\n      self._aux_populate_category_menus();\n\n      // populate the UI elements\n    }\n\n    if (self.cluster_sizes.length > max_points_to_render) {\n      var sorted_array = self.cluster_sizes\n        .map(function(d, i) {\n          return [d, i + 1];\n        })\n        .sort(function(a, b) {\n          return a[0] - b[0];\n        });\n\n      for (var k = 0; k < sorted_array.length - max_points_to_render; k++) {\n        self.exclude_cluster_ids[sorted_array[k][1]] = 1;\n      }\n\n      warning_string =\n        \"Excluded \" +\n        (sorted_array.length - max_points_to_render) +\n        \" clusters (maximum size \" +\n        sorted_array[k - 1][0] +\n        \" nodes) because only \" +\n        max_points_to_render +\n        \" objects can be shown at once.\";\n    }\n\n    self.edges.forEach(function(e, i) {\n      self.clusters[\n        self.cluster_mapping[self.nodes[e.target].cluster]\n      ].distances.push(e.length);\n    });\n\n    self.clusters.forEach(function(d, i) {\n      d.distances = helpers.describe_vector(d.distances);\n    });\n    //self.clusters\n\n    self.update();\n  }\n\n  function sort_table_toggle_icon(element, value) {\n    if (value) {\n      $(element).data(\"sorted\", value);\n      d3\n        .select(element)\n        .selectAll(\"i\")\n        .classed(\"fa-sort-amount-desc\", value == \"desc\")\n        .classed(\"fa-sort-amount-asc\", value == \"asc\")\n        .classed(\"fa-sort\", value == \"unsorted\");\n    } else {\n      var sorted_state = $(element).data(\"sorted\");\n      sort_table_toggle_icon(element, sorted_state == \"asc\" ? \"desc\" : \"asc\");\n      return sorted_state == \"asc\" ? d3.descending : d3.ascending;\n    }\n  }\n\n  function sort_table_by_column(element, datum) {\n    d3.event.preventDefault();\n    var table_element = $(element).closest(\"table\");\n    if (table_element.length) {\n      var sort_on = parseInt($(element).data(\"column-id\"));\n      var sort_key = datum.sort;\n      var sorted_state = $(element).data(\"sorted\");\n      var sorted_function = sort_table_toggle_icon(element);\n\n      var sort_accessor;\n\n      if (sort_key) {\n        if (_.isFunction(sort_key)) {\n          sort_accessor = function(x) {\n            return sort_key(x);\n          };\n        } else {\n          sort_accessor = function(x) {\n            var val = x[sort_key];\n            if (_.isFunction(val)) return val();\n            return val;\n          };\n        }\n      } else {\n        sort_accessor = function(x) {\n          return x;\n        };\n      }\n\n      d3\n        .select(table_element[0])\n        .select(\"tbody\")\n        .selectAll(\"tr\")\n        .sort(function(a, b) {\n          return sorted_function(\n            sort_accessor(a[sort_on]),\n            sort_accessor(b[sort_on])\n          );\n        });\n\n      // select all other elements from thead and toggle their icons\n\n      $(table_element)\n        .find(\"thead [data-column-id]\")\n        .filter(function() {\n          return parseInt($(this).data(\"column-id\")) != sort_on;\n        })\n        .each(function() {\n          sort_table_toggle_icon(this, \"unsorted\");\n        });\n    }\n  }\n\n  function format_a_cell(data, index, item) {\n    var this_sel = d3.select(item);\n    var current_value =\n      typeof data.value === \"function\" ? data.value() : data.value;\n\n    if (\"callback\" in data) {\n      data.callback(item, current_value);\n    } else {\n      var repr = \"format\" in data ? data.format(current_value) : current_value;\n      if (\"html\" in data) this_sel.html(repr);\n      else this_sel.text(repr);\n      if (\"sort\" in data) {\n        var clicker = this_sel\n          .append(\"a\")\n          .property(\"href\", \"#\")\n          .on(\"click\", function(d) {\n            sort_table_by_column(this, d);\n          })\n          .attr(\"data-sorted\", \"unsorted\")\n          .attr(\"data-column-id\", index);\n        clicker\n          .append(\"i\")\n          .classed(\"fa fa-sort\", true)\n          .style(\"margin-left\", \"0.2em\");\n      }\n    }\n    if (\"help\" in data) {\n      this_sel.attr(\"title\", data.help);\n    }\n  }\n\n  function add_a_sortable_table(container, headers, content, overwrite) {\n    var thead = container.selectAll(\"thead\");\n    if (thead.empty() || overwrite) {\n      thead.remove();\n      thead = container.append(\"thead\");\n      thead\n        .selectAll(\"tr\")\n        .data(headers)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"th\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"th\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n\n    var tbody = container.selectAll(\"tbody\");\n    if (tbody.empty() || overwrite) {\n      tbody.remove();\n      tbody = container.append(\"tbody\");\n      tbody\n        .selectAll(\"tr\")\n        .data(content)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            handle_cluster_click;\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n  }\n\n  function _cluster_table_draw_id(element, payload) {\n    var this_cell = d3.select(element);\n    this_cell.selectAll(\"*\").remove();\n    var _is_subcluster = payload[1];\n    var cluster_id = payload[0];\n\n    if (_is_subcluster) {\n      //this_cell.append(\"i\")\n      //      .classed(\"fa fa-arrow-circle-o-right\", true).style(\"padding-right\", \"0.25em\");\n\n      if (payload[2].rr_count) {\n        this_cell\n          .append(\"i\")\n          .classed(\"fa fa-exclamation-triangle\", true)\n          .attr(\"title\", \"Subcluster has recent/rapid nodes\");\n      }\n      this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n\n      this_cell\n        .append(\"button\")\n        .classed(\"btn btn-primary btn-xs pull-right\", true)\n        .text(\"View\")\n        .on(\"click\", function(e) {\n          self.view_subcluster(payload[2]);\n        });\n    } else {\n      this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n      this_cell\n        .append(\"button\")\n        .classed(\"btn btn-primary btn-xs pull-right\", true)\n        .text(\"View\")\n        .on(\"click\", function(e) {\n          self.open_exclusive_tab_view(cluster_id);\n        });\n    }\n    this_cell\n      .append(\"button\")\n      .classed(\"btn btn-xs pull-right\", true)\n      .text(\"List\")\n      .attr(\"data-toggle\", \"modal\")\n      .attr(\n        \"data-target\",\n        self.get_ui_element_selector_by_role(\"cluster_list\", true)\n      )\n      .attr(\"data-cluster\", cluster_id);\n  }\n\n  function _cluster_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n    var labels = [[payload[0] ? \"expand\" : \"collapse\", 0]];\n    if (payload[1]) {\n      labels.push([\"problematic\", 1]);\n    }\n    if (payload[2]) {\n      labels.push([\"match\", 1]);\n    }\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-primary btn-xs\", true)\n      .text(function(d) {\n        return d[0];\n      })\n      .attr(\"disabled\", function(d) {\n        return d[1] ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (d[1] == 0) {\n          if (payload[0]) {\n            expand_cluster(\n              self.clusters[payload[payload.length - 1] - 1],\n              true\n            );\n          } else {\n            collapse_cluster(self.clusters[payload[payload.length - 1] - 1]);\n          }\n          self.update_volatile_elements(self.cluster_table);\n          if (self.subcluster_table) {\n            self.update_volatile_elements(self.subcluster_table);\n          }\n        }\n      });\n  }\n\n  function _extract_single_cluster(nodes, filter, no_clone, given_json) {\n    /** \n        Extract the nodes and edges between them into a separate objects \n        @param nodes [array]  the list of nodes to extract\n        @param filter [function, optional] (edge) -> bool filtering function for deciding which edges will be used to define clusters\n        @param no_clone [bool] if set to T, node objects are not shallow cloned in the return object\n        \n        @return [dict] the object representing \"Nodes\" and \"Edges\" in the extracted cluster\n        \n    */\n\n    var cluster_json = {};\n    var map_to_id = {};\n\n    cluster_json.Nodes = _.map(nodes, function(c, i) {\n      map_to_id[c.id] = i;\n      if (no_clone) {\n        return c;\n      }\n      var cc = _.clone(c);\n      cc.cluster = 1;\n      return cc;\n    });\n\n    given_json = given_json || json;\n\n    cluster_json.Edges = _.filter(given_json.Edges, function(e) {\n      return (\n        given_json.Nodes[e.source].id in map_to_id &&\n        given_json.Nodes[e.target].id in map_to_id\n      );\n    });\n\n    if (filter) {\n      cluster_json.Edges = _.filter(cluster_json.Edges, filter);\n    }\n\n    cluster_json.Edges = _.map(cluster_json.Edges, function(e) {\n      var ne = _.clone(e);\n      ne.source = map_to_id[given_json.Nodes[e.source].id];\n      ne.target = map_to_id[given_json.Nodes[e.target].id];\n      return ne;\n    });\n\n    return cluster_json;\n  }\n\n  function _node_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n    var labels = [\n      payload.length == 1\n        ? _.isString(payload[0])\n          ? [payload[0], 1, \"btn-warning\"]\n          : [\"can't be shown\", 1]\n        : [payload[0] ? \"hide\" : \"show\", 0]\n    ];\n\n    if (payload.length == 2 && payload[1] >= 1) {\n      labels.push([\n        \"View cluster\",\n        function() {\n          self.open_exclusive_tab_view(payload[1]);\n        }\n      ]);\n    }\n\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-xs btn-node-property\", true)\n      .classed(\"btn-primary\", true)\n      //.classed(function (d) {return d.length >=3 ? d[2] : \"\";}, function (d) {return d.length >= 3;})\n      .text(function(d) {\n        return d[0];\n      })\n      .attr(\"disabled\", function(d) {\n        return d[1] && !_.isFunction(d[1]) ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (_.isFunction(d[1])) {\n          d[1].call(d);\n        } else {\n          if (d[1] == 0) {\n            if (payload[0]) {\n              collapse_cluster(\n                self.clusters[payload[payload.length - 1] - 1],\n                true\n              );\n            } else {\n              expand_cluster(self.clusters[payload[payload.length - 1] - 1]);\n            }\n            //format_a_cell(d3.select(element).datum(), null, element);\n            self.update_volatile_elements(self.node_table);\n          }\n        }\n      });\n    buttons.each(function(d, e) {\n      if (d.length >= 3) {\n        d3.select(this).classed(\"btn-primary\", false).classed(d[2], true);\n      }\n    });\n  }\n\n  self.update_volatile_elements = function(container) {\n    container\n      .selectAll(\"td\")\n      .filter(function(d, i) {\n        return \"volatile\" in d;\n      })\n      .each(function(d, i) {\n        format_a_cell(d, i, this);\n      });\n  };\n\n  self.draw_node_table = function(extra_columns, node_list) {\n    if (self.node_table) {\n      node_list = node_list || self.nodes;\n\n      var headers = [\n        [\n          {\n            value: \"ID\",\n            sort: \"value\",\n            help: \"Node ID\"\n          },\n          {\n            value: \"Status\",\n            sort: \"value\"\n          },\n          {\n            value: \"# of links\",\n            sort: \"value\",\n            help: \"Number of links (Node degree)\"\n          },\n          {\n            value: \"Cluster\",\n            sort: \"value\",\n            help: \"Which cluster does the node belong to\"\n          }\n        ]\n      ];\n\n      if (extra_columns) {\n        _.each(extra_columns, function(d) {\n          headers[0].push(d.description);\n        });\n      }\n\n      var rows = node_list.map(function(n, i) {\n        var this_row = [\n          {\n            value: n.id,\n            help: \"Node ID\"\n          },\n          {\n            value: function() {\n              if (n.node_class != \"injected\") {\n                try {\n                  if (self.exclude_cluster_ids[n.cluster]) {\n                    // parent cluster can't be rendered\n                    // because of size restrictions\n                    return [n.cluster];\n                  }\n                  return [\n                    !self.clusters[self.cluster_mapping[n.cluster]].collapsed,\n                    n.cluster\n                  ];\n                } catch (err) {\n                  return [-1];\n                }\n              } else {\n                return [n.node_annotation];\n              }\n            },\n            callback: _node_table_draw_buttons,\n            volatile: true\n          },\n          {\n            value: \"degree\" in n ? n.degree : \"Not defined\",\n            help: \"Node degree\"\n          },\n          {\n            value: \"cluster\" in n ? n.cluster : \"Not defined\",\n            help: \"Which cluster does the node belong to\"\n          }\n        ];\n\n        if (extra_columns) {\n          _.each(extra_columns, function(ed) {\n            this_row.push(ed.generator(n, self));\n          });\n        }\n        return this_row;\n      });\n\n      add_a_sortable_table(\n        self.node_table,\n        headers,\n        rows,\n        true\n        // rows\n      );\n    }\n  };\n\n  self.draw_cluster_table = function(\n    extra_columns,\n    element,\n    skip_clusters,\n    skip_subclusters\n  ) {\n    element = element || self.cluster_table;\n    if (element) {\n      var headers = [\n        [\n          {\n            value: \"Cluster ID\",\n            sort: function(c) {\n              return _.map(c.value[0].split(\".\"), function(ss) {\n                return _networkDotFormatPadder(+ss);\n              }).join(\"|\");\n            },\n            help: \"Unique cluster ID\"\n          },\n          {\n            value: \"Visibility\",\n            sort: \"value\",\n            help: \"Visibility in the network tab\"\n          },\n          {\n            value: \"Size\",\n            sort: \"value\",\n            help: \"Number of nodes in the cluster\"\n          }\n        ]\n      ];\n\n      if (!self._is_CDC) {\n        headers.push({\n          value: \"# links/node<br>Mean [Median, IQR]\",\n          html: true\n        });\n\n        headers.push({\n          value: \"Genetic distance<br>Mean [Median, IQR]\",\n          help: \"Genetic distance among nodes in the cluster\",\n          html: true\n        });\n      }\n\n      if (extra_columns) {\n        _.each(extra_columns, function(d) {\n          headers[0].push(d.description);\n        });\n      }\n\n      var rows = [];\n\n      _.each(self.clusters, function(cluster) {\n        var make_row = function(d, is_subcluster) {\n          var this_row = [\n            {\n              value: [d.cluster_id, is_subcluster, d], //.cluster_id,\n              callback: _cluster_table_draw_id\n            },\n            {\n              value: function() {\n                var actual_cluster = is_subcluster ? d.parent_cluster : d;\n\n                return [\n                  actual_cluster.collapsed,\n                  actual_cluster.hxb2_linked,\n                  actual_cluster.match_filter,\n                  actual_cluster.cluster_id\n                ];\n              },\n              callback: _cluster_table_draw_buttons,\n              volatile: true\n            },\n            {\n              value: d.children.length\n            }\n          ];\n\n          if (!self._is_CDC_) {\n            this_row.push({\n              value: d.degrees,\n              format: function(d) {\n                try {\n                  return (\n                    _defaultFloatFormat(d[\"mean\"]) +\n                    \" [\" +\n                    _defaultFloatFormat(d[\"median\"]) +\n                    \", \" +\n                    _defaultFloatFormat(d[\"Q1\"]) +\n                    \" - \" +\n                    _defaultFloatFormat(d[\"Q3\"]) +\n                    \"]\"\n                  );\n                } catch (e) {\n                  return \"\";\n                }\n              }\n            });\n            this_row.push({\n              value: d.distances,\n              format: function(d) {\n                try {\n                  return (\n                    _defaultFloatFormat(d[\"mean\"]) +\n                    \" [\" +\n                    _defaultFloatFormat(d[\"median\"]) +\n                    \", \" +\n                    _defaultFloatFormat(d[\"Q1\"]) +\n                    \" - \" +\n                    _defaultFloatFormat(d[\"Q3\"]) +\n                    \"]\"\n                  );\n                } catch (e) {\n                  return \"\";\n                }\n              }\n            });\n          }\n          if (extra_columns) {\n            _.each(extra_columns, function(ed) {\n              this_row.push(ed.generator(d, self));\n            });\n          }\n\n          return this_row;\n        };\n\n        if (!skip_clusters) {\n          rows.push(make_row(cluster, false));\n        }\n\n        if (!skip_subclusters) {\n          _.each(cluster.subclusters, function(sub_cluster) {\n            rows.push(make_row(sub_cluster, true));\n          });\n        }\n      });\n\n      add_a_sortable_table(element, headers, rows, true);\n    }\n  };\n\n  /*------------ Update layout code ---------------*/\n  function update_network_string(node_count, edge_count) {\n    if (network_status_string) {\n      var clusters_shown = _.filter(self.clusters, function(c) {\n          return !c.collapsed;\n        }).length,\n        clusters_removed = self.cluster_sizes.length - self.clusters.length,\n        nodes_removed =\n          graph_data.Nodes.length - singletons - self.nodes.length;\n\n      var clusters_selected = _.filter(self.clusters, function(c) {\n        return (\n          !c.is_hidden && c.match_filter !== undefined && c.match_filter > 0\n        );\n      }).length;\n\n      var nodes_selected = _.filter(self.nodes, function(n) {\n        return n.match_filter && !n.is_hidden;\n      }).length;\n\n      /*var s = \"Displaying a network on <strong>\" + self.nodes.length + \"</strong> nodes, <strong>\" + self.clusters.length + \"</strong> clusters\"\n              + (clusters_removed > 0 ? \" (an additional \" + clusters_removed + \" clusters and \" + nodes_removed + \" nodes have been removed due to network size constraints)\" : \"\") + \". <strong>\"\n              + clusters_shown +\"</strong> clusters are expanded. Of <strong>\" + self.edges.length + \"</strong> edges, <strong>\" + draw_me.edges.length + \"</strong>, and of  <strong>\" + self.nodes.length  + \" </strong> nodes,  <strong>\" + draw_me.nodes.length + \" </strong> are displayed. \";\n      if (singletons > 0) {\n          s += \"<strong>\" +singletons + \"</strong> singleton nodes are not shown. \";\n      }*/\n\n      var s =\n        \"<span class = 'badge'>\" +\n        self.clusters.length +\n        \"</span> clusters <span class = 'label label-primary'>\" +\n        clusters_shown +\n        \" expanded / \" +\n        clusters_selected +\n        \" match </span> <span class = 'badge'> \" +\n        self.nodes.length +\n        \"</span> nodes <span class = 'label label-primary'>\" +\n        node_count +\n        \" shown / \" +\n        nodes_selected +\n        \" match </span> <span class = 'badge'> \" +\n        self.edges.length +\n        \"</span> \" +\n        (self._is_CDC_ ? \"links\" : \"edges\") +\n        \" <span class = 'label label-primary'>\" +\n        edge_count +\n        \" shown</span>\";\n\n      d3.select(network_status_string).html(s);\n    }\n  }\n\n  function draw_a_node(container, node) {\n    if (node) {\n      container = d3.select(container);\n\n      var symbol_type =\n        node.hxb2_linked && !node.is_lanl\n          ? \"cross\"\n          : node.is_lanl ? \"triangle-down\" : self.node_shaper[\"shaper\"](node);\n\n      node.rendered_size = Math.sqrt(node_size(node)) / 2 + 2;\n\n      container\n        .attr(\"d\", misc.symbol(symbol_type).size(node_size(node)))\n        .attr(\"class\", \"node\")\n        .classed(\"selected_object\", function(d) {\n          return d.match_filter;\n        })\n        .classed(\"injected_object\", function(d) {\n          return d.node_class == \"injected\";\n        })\n        .attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\";\n        })\n        .style(\"fill\", function(d) {\n          return node_color(d);\n        })\n        .style(\"opacity\", function(d) {\n          return node_opacity(d);\n        })\n        .style(\"display\", function(d) {\n          if (d.is_hidden) return \"none\";\n          return null;\n        })\n        .on(\"click\", handle_node_click)\n        .on(\"mouseover\", node_pop_on)\n        .on(\"mouseout\", node_pop_off)\n        .call(network_layout.drag().on(\"dragstart\", node_pop_off));\n    }\n  }\n\n  function draw_a_cluster(container, the_cluster) {\n    var container_group = d3.select(container);\n\n    var draw_from = the_cluster[\"binned_attributes\"]\n      ? the_cluster[\"binned_attributes\"].map(function(d) {\n          return d.concat([0]);\n        })\n      : [[null, 1, 0]];\n\n    if (the_cluster.match_filter) {\n      draw_from = draw_from.concat([\n        [\"selected\", the_cluster.match_filter, 1],\n        [\n          \"not selected\",\n          the_cluster.children.length - the_cluster.match_filter,\n          1\n        ]\n      ]);\n    }\n\n    var sums = [\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] == 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      ),\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] != 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      )\n    ];\n\n    var running_totals = [0, 0];\n\n    draw_from = draw_from.map(function(d) {\n      var index = d[2];\n      var v = {\n        container: container,\n        cluster: the_cluster,\n        startAngle: running_totals[index] / sums[index] * 2 * Math.PI,\n        endAngle: (running_totals[index] + d[1]) / sums[index] * 2 * Math.PI,\n        name: d[0],\n        rim: index > 0\n      };\n      running_totals[index] += d[1];\n      return v;\n    });\n\n    var arc_radius = cluster_box_size(the_cluster) * 0.5;\n    the_cluster.rendered_size = arc_radius + 2;\n    var paths = container_group.selectAll(\"path\").data(draw_from);\n    paths.enter().append(\"path\");\n    paths.exit().remove();\n\n    paths\n      .classed(\"cluster\", true)\n      .classed(\"hiv-trace-problematic\", function(d) {\n        return the_cluster.hxb2_linked && !d.rim;\n      })\n      .classed(\"hiv-trace-selected\", function(d) {\n        return d.rim;\n      })\n      .attr(\"d\", function(d) {\n        return (d.rim\n          ? d3.svg.arc().innerRadius(arc_radius + 2).outerRadius(arc_radius + 5)\n          : d3.svg.arc().innerRadius(0).outerRadius(arc_radius))(d);\n      })\n      .style(\"fill\", function(d, i) {\n        return d.rim\n          ? self.colorizer[\"selected\"](d.name)\n          : the_cluster[\"gradient\"]\n            ? \"url(#\" + the_cluster[\"gradient\"] + \")\"\n            : cluster_color(the_cluster, d.name);\n      })\n      .style(\"stroke-linejoin\", function(d, i) {\n        return draw_from.length > 1 ? \"round\" : \"\";\n      })\n      .style(\"display\", function(d) {\n        if (the_cluster.is_hidden) return \"none\";\n        return null;\n      });\n  }\n\n  function check_for_predefined_shapes(cat_id) {\n    //console.log (cat_id);\n\n    if (cat_id in _networkPresetShapeSchemes) {\n      var domain = _.range(\n        0,\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"].length\n      );\n\n      return {\n        domain: domain,\n        range: _.map(domain, function(v) {\n          return _networkPresetShapeSchemes[\n            cat_id\n          ][graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"][v]];\n        })\n      };\n    } else {\n      return {\n        domain: _.range(\n          0,\n          graph_data[_networkGraphAttrbuteID][cat_id].dimension\n        ),\n        range: _networkShapeOrdering\n      };\n    }\n  }\n\n  self.handle_shape_categorical = function(cat_id) {\n    var set_attr = \"None\";\n\n    [\"shapes\"].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl + \"_label\"))\n        .html(\"Shape: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    if (cat_id) {\n      var domain_range = check_for_predefined_shapes(cat_id);\n\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n      self.node_shaper[\"id\"] = cat_id;\n      self.node_shaper[\"shaper\"] = function(d) {\n        return shape_mapper(\n          graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"](\n            self.attribute_node_value_by_id(d, cat_id)\n          )\n        );\n      };\n      self.node_shaper[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n    } else {\n      self.node_shaper.id = null;\n      self.node_shaper.shaper = function() {\n        return \"circle\";\n      };\n      self.node_shaper[\"category_map\"] = null;\n    }\n    //console.log (graph_data [_networkGraphAttrbuteID][cat_id]['value_map'], self.node_shaper.domain(), self.node_shaper.range());\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.draw_attribute_labels = function() {\n    self.legend_svg.selectAll(\"g.hiv-trace-legend\").remove();\n\n    var offset = 10;\n\n    if (self.legend_caption) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(self.legend_caption)\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n    }\n\n    if (self.edge_legend) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(self.edge_legend[\"caption\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      _.each(self.edge_legend[\"types\"], function(value, key) {\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(key);\n\n        value.call(\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"line\")\n            .attr(\"x1\", \"0\")\n            .attr(\"y1\", \"-4\")\n            .attr(\"x2\", \"12\")\n            .attr(\"y2\", \"-4\")\n            .classed(\"legend\", true)\n        );\n\n        offset += 18;\n      });\n    }\n\n    if (self.colorizer[\"category_id\"]) {\n      //console.log (self.colorizer);\n      //_.each (self.colorizer[\"category_map\"](null, \"map\"), function (v){ console.log (v); });\n\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Color: \" + self.colorizer[\"category_id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      if (self.colorizer[\"continuous\"]) {\n        var anchor_format =\n          graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n            \"type\"\n          ] == \"Date\"\n            ? _defaultDateViewFormatShort\n            : d3.format(\",.4r\");\n        var scale =\n          graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n            \"scale\"\n          ];\n\n        _.each(_.range(_networkContinuousColorStops), function(value) {\n          var x = scale.invert(value);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(anchor_format(x));\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](x));\n\n          offset += 18;\n        });\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(\"missing\");\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", _networkMissingColor);\n\n        offset += 18;\n      } else {\n        _.each(self.colorizer[\"category_map\"](null, \"map\"), function(\n          value,\n          key\n        ) {\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(key);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](key));\n\n          offset += 18;\n        });\n      }\n    }\n\n    if (self.node_shaper[\"id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Shape: \" + self.node_shaper[\"id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var domain_range = check_for_predefined_shapes(self.node_shaper[\"id\"]);\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n\n      _.each(self.node_shaper[\"category_map\"](null, \"map\"), function(\n        value,\n        key\n      ) {\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(key);\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"path\")\n          .attr(\"transform\", \"translate(5,-5)\")\n          .attr(\"d\", misc.symbol(shape_mapper(value)).size(128))\n          .classed(\"legend\", true)\n          .style(\"fill\", \"none\");\n\n        offset += 18;\n      });\n    }\n\n    if (self.colorizer[\"opacity_id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Opacity: \" + self.colorizer[\"opacity_id\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var anchor_format =\n        graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]][\n          \"type\"\n        ] == \"Date\"\n          ? _defaultDateViewFormatShort\n          : d3.format(\",.4r\");\n      var scale =\n        graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]][\n          \"scale\"\n        ];\n\n      _.each(_.range(_networkContinuousColorStops), function(value) {\n        var x = scale.invert(value);\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(anchor_format(x));\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", \"black\")\n          .style(\"opacity\", self.colorizer[\"opacity\"](x));\n\n        offset += 18;\n      });\n\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(20,\" + offset + \")\")\n        .append(\"text\")\n        .text(\"missing\");\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .append(\"circle\")\n        .attr(\"cx\", \"8\")\n        .attr(\"cy\", \"-4\")\n        .attr(\"r\", \"8\")\n        .classed(\"legend\", true)\n        .style(\"fill\", \"black\")\n        .style(\"opacity\", _networkMissingOpacity);\n\n      offset += 18;\n    }\n  };\n\n  function compute_cluster_gradient(cluster, cat_id) {\n    if (cat_id) {\n      var id = self.dom_prefix + \"-cluster-gradient-\" + self.gradient_id++;\n      var gradient = self.network_svg\n        .selectAll(\"defs\")\n        .append(\"radialGradient\")\n        .attr(\"id\", id);\n      var values = _.map(cluster.children, function(node) {\n        var value = self.attribute_node_value_by_id(node, cat_id);\n        return value == _networkMissing ? Infinity : value;\n      }).sort(function(a, b) {\n        return 0 + a - (0 + b);\n      });\n      var finite = _.filter(values, function(d) {\n        return d < Infinity;\n      });\n      var infinite = values.length - finite.length;\n\n      if (infinite) {\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", _networkMissingColor);\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"\" + infinite / values.length * 100 + \"%\")\n          .attr(\"stop-color\", _networkMissingColor);\n      }\n\n      _.each(finite, function(value, index) {\n        gradient\n          .append(\"stop\")\n          .attr(\n            \"offset\",\n            \"\" + (1 + index + infinite) * 100 / values.length + \"%\"\n          )\n          .attr(\"stop-color\", self.colorizer[\"category\"](value));\n      });\n      //gradient.append (\"stop\").attr (\"offset\", \"100%\").attr (\"stop-color\", self.colorizer['category'] (dom[1]));\n\n      return id;\n    }\n    return null;\n  }\n\n  self.handle_attribute_opacity = function(cat_id) {\n    var set_attr = \"None\";\n\n    [\"opacity\"].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl + \"_label\"))\n        .html(\"Opacity: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role(\"opacity_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    self.colorizer[\"opacity_id\"] = cat_id;\n    if (cat_id) {\n      var scale = graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"];\n      self.colorizer[\"opacity_scale\"] = d3.scale\n        .linear()\n        .domain([0, _networkContinuousColorStops - 1])\n        .range([0.25, 1]);\n      self.colorizer[\"opacity\"] = function(v) {\n        if (v == _networkMissing) {\n          return _networkMissingOpacity;\n        }\n        return self.colorizer[\"opacity_scale\"](scale(v));\n      };\n    } else {\n      self.colorizer[\"opacity\"] = null;\n      self.colorizer[\"opacity_scale\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.handle_attribute_continuous = function(cat_id) {\n    var set_attr = \"None\";\n\n    render_chord_diagram(\"aux_svg_holder\", null, null);\n    render_binned_table(\"attribute_table\", null, null);\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"binned_attributes\"];\n      delete the_cluster[\"gradient\"];\n    });\n\n    [[\"attributes\", false], [\"attributes_cat\", true]].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0], lbl[1]))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role(\"attributes_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    if (cat_id) {\n      //console.log (graph_data [_networkGraphAttrbuteID][cat_id]);\n\n      self.colorizer[\"category\"] = _.wrap(\n        d3.scale\n          .linear()\n          .range([\n            \"#fff7ec\",\n            \"#fee8c8\",\n            \"#fdd49e\",\n            \"#fdbb84\",\n            \"#fc8d59\",\n            \"#ef6548\",\n            \"#d7301f\",\n            \"#b30000\",\n            \"#7f0000\"\n          ])\n          .domain(_.range(_networkContinuousColorStops)),\n        function(func, arg) {\n          return func(\n            graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"](arg)\n          );\n        }\n      ); //console.log (self.colorizer['category'].exponent ());\n\n      //console.log (self.colorizer['category'] (graph_data [_networkGraphAttrbuteID][cat_id]['value_range'][0]), self.colorizer['category'] (d['value_range'][1]));\n\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"continuous\"] = true;\n      self.clusters.forEach(function(the_cluster) {\n        the_cluster[\"gradient\"] = compute_cluster_gradient(the_cluster, cat_id);\n      });\n\n      var points = [];\n\n      _.each(self.edges, function(e) {\n        var src = self.attribute_node_value_by_id(\n            self.nodes[e.source],\n            cat_id,\n            true\n          ),\n          tgt = self.attribute_node_value_by_id(\n            self.nodes[e.target],\n            cat_id,\n            true\n          );\n\n        if (src != _networkMissing && tgt != _networkMissing) {\n          points.push({\n            x: src,\n            y: tgt,\n            title:\n              self.nodes[e.source].id +\n              \" (\" +\n              src +\n              \") -- \" +\n              self.nodes[e.target].id +\n              \" (\" +\n              tgt +\n              \")\"\n          });\n        }\n      });\n      d3\n        .select(\n          self.get_ui_element_selector_by_role(\"aux_svg_holder_enclosed\", true)\n        )\n        .style(\"display\", null);\n\n      scatterPlot.scatterPlot(\n        points,\n        400,\n        400,\n        self.get_ui_element_selector_by_role(\"aux_svg_holder\", true),\n        {\n          x: \"Source\",\n          y: \"Target\"\n        },\n        graph_data[_networkGraphAttrbuteID][cat_id][\"type\"] == \"Date\"\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"continuous\"] = false;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.handle_attribute_categorical = function(cat_id) {\n    var set_attr = \"None\";\n    d3\n      .select(self.get_ui_element_selector_by_role(\"attributes_invert\"))\n      .style(\"display\", \"none\");\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    [[\"attributes\", false], [\"attributes_cat\", true]].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0], lbl[1]))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"gradient\"];\n      the_cluster[\"binned_attributes\"] = stratify(\n        attribute_cluster_distribution(the_cluster, cat_id)\n      );\n    });\n\n    self.colorizer[\"continuous\"] = false;\n\n    if (cat_id) {\n      if (cat_id in _networkPresetColorSchemes) {\n        var domain = [],\n          range = [];\n        _.each(_networkPresetColorSchemes[cat_id], function(value, key) {\n          domain.push(key);\n          range.push(value);\n        });\n        self.colorizer[\"category\"] = d3.scale\n          .ordinal()\n          .domain(domain)\n          .range(range);\n      } else {\n        if (graph_data[_networkGraphAttrbuteID][cat_id][\"color_scale\"]) {\n          self.colorizer[\"category\"] = graph_data[_networkGraphAttrbuteID][\n            cat_id\n          ][\"color_scale\"](graph_data[_networkGraphAttrbuteID][cat_id], self);\n        } else {\n          self.colorizer[\"category\"] = d3.scale\n            .ordinal()\n            .range(_networkCategorical);\n          var extended_range = _.clone(self.colorizer[\"category\"].range());\n          extended_range.push(_networkMissingColor);\n\n          self.colorizer[\"category\"].domain(\n            _.range(_maximumValuesInCategories + 1)\n          );\n          self.colorizer[\"category\"].range(extended_range);\n\n          if (graph_data[_networkGraphAttrbuteID][cat_id][\"stable-ish order\"]) {\n            self.colorizer[\"category\"] = _.wrap(\n              self.colorizer[\"category\"],\n              function(func, arg) {\n                if (arg == _networkMissing) {\n                  return func(_maximumValuesInCategories);\n                }\n                return func(\n                  graph_data[_networkGraphAttrbuteID][cat_id][\n                    \"stable-ish order\"\n                  ][arg]\n                );\n              }\n            );\n            //console.log (graph_data[_networkGraphAttrbuteID][cat_id]['stable-ish order']);\n          }\n        }\n      }\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n\n      //console.log (cat_id, self.json[_networkGraphAttrbuteID][cat_id], graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"] (null, \"lookup\"));\n      //self.colorizer['category_map'][null] =  graph_data [_networkGraphAttrbuteID][cat_id]['range'];\n\n      //try {\n      self.colorizer[\"category_pairwise\"] = attribute_pairwise_distribution(\n        cat_id,\n        graph_data[_networkGraphAttrbuteID][cat_id].dimension,\n        self.colorizer[\"category_map\"]\n      );\n      //} catch (err) {\n      // TODO: there are still lingering issues with this \"category_map\"\n      //}\n\n      render_chord_diagram(\n        \"aux_svg_holder\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n      render_binned_table(\n        \"attribute_table\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n      render_chord_diagram(\"aux_svg_holder\", null, null);\n      render_binned_table(\"attribute_table\", null, null);\n    }\n    if (self.handle_inline_charts) {\n      self.handle_inline_charts();\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.filter_visibility = function() {\n    self.clusters.forEach(function(c) {\n      c.is_hidden = self.hide_unselected && !c.match_filter;\n    });\n    self.nodes.forEach(function(n) {\n      n.is_hidden = self.hide_unselected && !n.match_filter;\n    });\n  };\n\n  self.filter = function(conditions, skip_update) {\n    var anything_changed = false;\n\n    conditions = _.map([\"re\", \"distance\"], function(cnd) {\n      return _.map(\n        _.filter(conditions, function(v) {\n          return v.type == cnd;\n        }),\n        function(v) {\n          return v.value;\n        }\n      );\n    });\n\n    if (conditions[1].length) {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n\n      _.each(self.edges, function(e) {\n        var did_match = _.some(conditions[1], function(d) {\n          return e.length <= d;\n        });\n\n        if (did_match) {\n          self.nodes[e.source].length_filter = true;\n          self.nodes[e.target].length_filter = true;\n        }\n      });\n    } else {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n    }\n\n    self.clusters.forEach(function(c) {\n      c.match_filter = 0;\n    });\n\n    self.nodes.forEach(function(n) {\n      var did_match = _.some(conditions[0], function(regexp) {\n        return (\n          regexp.test(n.id) ||\n          _.some(n[_networkNodeAttributeID], function(attr) {\n            return regexp.test(attr);\n          })\n        );\n      });\n\n      did_match = did_match || n.length_filter;\n\n      if (did_match != n.match_filter) {\n        n.match_filter = did_match;\n        anything_changed = true;\n      }\n\n      if (n.match_filter) {\n        n.parent.match_filter += 1;\n      }\n    });\n\n    if (anything_changed && !skip_update) {\n      if (self.hide_unselected) {\n        self.filter_visibility();\n      }\n\n      self.update(true);\n    }\n  };\n\n  self.is_empty = function() {\n    return self.cluster_sizes.length == 0;\n  };\n\n  self.display_warning = function(warning_string, is_html) {\n    if (network_warning_tag) {\n      if (warning_string.length) {\n        var warning_box = d3.select(network_warning_tag);\n        warning_box.selectAll(\"div\").remove();\n        if (is_html) {\n          warning_box.append(\"div\").html(warning_string);\n        } else {\n          warning_box.append(\"div\").text(warning_string);\n        }\n        warning_box.style(\"display\", \"block\");\n        warning_string = \"\";\n      } else {\n        d3.select(network_warning_tag).style(\"display\", \"none\");\n      }\n    }\n  };\n\n  self.link_generator_function = function(d) {\n    var pull = d.pull || 0.0;\n    var path;\n\n    if (pull != 0.0) {\n      var dist_x = d.target.x - d.source.x;\n      var dist_y = d.target.y - d.source.y;\n      var pull = pull * Math.sqrt(dist_x * dist_x + dist_y * dist_y);\n\n      var theta = Math.PI / 6; // 18deg additive angle\n\n      var alpha = dist_x ? Math.atan(-dist_y / dist_x) : Math.PI / 2; // angle with the X axis\n\n      if (pull < 0) {\n        theta = -theta;\n        pull = -pull;\n      }\n\n      var dx = Math.cos(theta + alpha) * pull,\n        dx2 = Math.cos(theta - alpha) * pull;\n\n      var dy = Math.sin(theta + alpha) * pull,\n        dy2 = Math.sin(theta - alpha) * pull;\n\n      var s1, s2;\n      if (d.target.x >= d.source.x) {\n        s1 = [dx, -dy];\n        s2 = [-dx2, -dy2];\n      } else {\n        s1 = [-dx2, -dy2];\n        s2 = [dx, -dy];\n      }\n\n      path =\n        \"M\" +\n        d.source.x +\n        \" \" +\n        d.source.y +\n        \" C \" +\n        (d.source.x + s1[0]) +\n        \" \" +\n        (d.source.y + s1[1]) +\n        \", \" +\n        (d.target.x + s2[0]) +\n        \" \" +\n        (d.target.y + s2[1]) +\n        \", \" +\n        d.target.x +\n        \" \" +\n        d.target.y;\n    } else {\n      path =\n        \"M\" +\n        d.source.x +\n        \" \" +\n        d.source.y +\n        \" L \" +\n        d.target.x +\n        \" \" +\n        d.target.y;\n    }\n\n    d3.select(this).attr(\"d\", path);\n  };\n\n  self.update = function(soft, friction) {\n    self.needs_an_update = false;\n\n    if (friction) {\n      network_layout.friction(friction);\n    }\n    self.display_warning(warning_string);\n\n    var rendered_nodes, rendered_clusters, link;\n\n    if (!soft) {\n      var draw_me = prepare_data_to_graph();\n\n      network_layout.nodes(draw_me.all).links(draw_me.edges);\n      update_network_string(draw_me.nodes.length, draw_me.edges.length);\n\n      var edge_set = {};\n\n      _.each(draw_me.edges, function(d) {\n        d.pull = 0.0;\n        var tag = \"\";\n\n        if (d.source < d.target) {\n          tag = \"\" + d.source + \"|\" + d.target;\n        } else {\n          tag = \"\" + d.target + \"|\" + d.source;\n        }\n        if (tag in edge_set) {\n          edge_set[tag].push(d);\n        } else {\n          edge_set[tag] = [d];\n        }\n      });\n\n      _.each(edge_set, function(v) {\n        if (v.length > 1) {\n          var step = 1 / (v.length - 1);\n          _.each(v, function(edge, index) {\n            edge.pull = -0.5 + index * step;\n          });\n        }\n      });\n\n      link = self.network_svg\n        .selectAll(\".link\")\n        .data(draw_me.edges, function(d) {\n          return d.id;\n        });\n\n      //link.enter().append(\"line\").classed(\"link\", true);\n      link.enter().append(\"path\").classed(\"link\", true);\n      link.exit().remove();\n\n      link\n        .classed(\"removed\", function(d) {\n          return d.removed;\n        })\n        .classed(\"unsupported\", function(d) {\n          return \"support\" in d && d[\"support\"] > 0.05;\n        })\n        .classed(\"core-link\", function(d) {\n          //console.log (d[\"length\"] <= self.core_link_length);\n          return d[\"length\"] <= self.core_link_length;\n          //return false;\n        });\n\n      link\n        .on(\"mouseover\", edge_pop_on)\n        .on(\"mouseout\", edge_pop_off)\n        .filter(function(d) {\n          return d.directed;\n        })\n        .attr(\"marker-end\", \"url(#\" + self.dom_prefix + \"_arrowhead)\");\n\n      rendered_nodes = self.network_svg\n        .selectAll(\".node\")\n        .data(draw_me.nodes, function(d) {\n          return d.id;\n        });\n\n      rendered_nodes.exit().remove();\n      rendered_nodes.enter().append(\"path\");\n\n      rendered_clusters = self.network_svg\n        .selectAll(\".cluster-group\")\n        .data(\n          draw_me.clusters.map(function(d) {\n            return d;\n          }),\n          function(d) {\n            return d.cluster_id;\n          }\n        );\n\n      rendered_clusters.exit().remove();\n      rendered_clusters\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"cluster-group\")\n        .attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\";\n        })\n        .on(\"click\", handle_cluster_click)\n        .on(\"mouseover\", cluster_pop_on)\n        .on(\"mouseout\", cluster_pop_off)\n        .call(network_layout.drag().on(\"dragstart\", cluster_pop_off));\n\n      self.draw_cluster_table(\n        self.extra_cluster_table_columns,\n        self.cluster_table,\n        false,\n        self.subcluster_table\n      );\n\n      if (self._is_CDC_ && !(options && options[\"no-subclusters\"])) {\n        self.annotate_priority_clusters(_networkCDCDateField, 36, 12);\n      }\n\n      if (self.subcluster_table) {\n        self.draw_cluster_table(\n          self.extra_subcluster_table_columns,\n          self.subcluster_table,\n          true,\n          false\n        );\n      }\n      self.draw_node_table(self.extra_node_table_columns);\n    } else {\n      rendered_nodes = self.network_svg.selectAll(\".node\");\n      rendered_clusters = self.network_svg.selectAll(\".cluster-group\");\n      link = self.network_svg.selectAll(\".link\");\n      update_network_string(rendered_nodes.size(), link.size());\n    }\n\n    rendered_nodes.each(function(d) {\n      draw_a_node(this, d);\n    });\n\n    rendered_clusters.each(function(d) {\n      draw_a_cluster(this, d);\n    });\n\n    link.style(\"opacity\", function(d) {\n      return Math.max(node_opacity(d.target), node_opacity(d.source));\n    });\n\n    if (self.additional_edge_styler) {\n      link.each(function(d) {\n        self.additional_edge_styler(this, d, self);\n      });\n    }\n\n    link.style(\"display\", function(d) {\n      if (d.target.is_hidden || d.source.is_hidden || d.is_hidden) {\n        return \"none\";\n      }\n      return null;\n    });\n\n\n    if (!soft) {\n      currently_displayed_objects =\n        rendered_clusters[0].length + rendered_nodes[0].length;\n\n      network_layout.on(\"tick\", function() {\n        var sizes = network_layout.size();\n\n        rendered_nodes.attr(\"transform\", function(d) {\n\n          // Defalut values (just to keep nodes in the svg container rectangle).\n          var xBoundLower = 10;\n          var xBoundUpper = sizes[0] - 10;\n          var yBoundLower = 10;\n          var yBoundUpper = sizes[1] - 10;\n\n          if (self.showing_on_map) {\n            const allowed_offset_from_center_of_country = 15;\n            // If the country is in the list that we have, override the default values for the bounds.\n            if (d.patient_attributes.country in countryCentersObject) {\n              let center = countryCentersObject[d.patient_attributes.country]\n              xBoundLower = center.x - allowed_offset_from_center_of_country;\n              xBoundUpper = center.x + allowed_offset_from_center_of_country;\n              yBoundLower = center.y - allowed_offset_from_center_of_country;\n              yBoundUpper = center.y + allowed_offset_from_center_of_country;\n            }\n          }\n\n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              xBoundLower,\n              Math.min(xBoundUpper, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              yBoundLower,\n              Math.min(yBoundUpper, d.y)\n            )) +\n            \")\"\n          );\n        });\n        rendered_clusters.attr(\"transform\", function(d) {\n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              d.rendered_size,\n              Math.min(sizes[0] - d.rendered_size, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              d.rendered_size,\n              Math.min(sizes[1] - d.rendered_size, d.y)\n            )) +\n            \")\"\n          );\n        });\n\n        link.each(self.link_generator_function);\n      });\n\n      network_layout.start();\n    } else {\n      link.each(self.link_generator_function);\n    }\n  };\n\n  function tick() {\n    var sizes = network_layout.size();\n\n    node\n      .attr(\"cx\", function(d) {\n        return (d.x = Math.max(10, Math.min(sizes[0] - 10, d.x)));\n      })\n      .attr(\"cy\", function(d) {\n        return (d.y = Math.max(10, Math.min(sizes[1] - 10, d.y)));\n      });\n\n    link\n      .attr(\"x1\", function(d) {\n        return d.source.x;\n      })\n      .attr(\"y1\", function(d) {\n        return d.source.y;\n      })\n      .attr(\"x2\", function(d) {\n        return d.target.x;\n      })\n      .attr(\"y2\", function(d) {\n        return d.target.y;\n      });\n  }\n\n  /*------------ Node Methods ---------------*/\n  function compute_node_degrees(nodes, edges) {\n    for (var n in nodes) {\n      nodes[n].degree = 0;\n    }\n\n    for (var e in edges) {\n      nodes[edges[e].source].degree++;\n      nodes[edges[e].target].degree++;\n    }\n  }\n\n  self.attribute_node_value_by_id = function(d, id, number) {\n    try {\n      if (_networkNodeAttributeID in d && id) {\n        if (id in d[_networkNodeAttributeID]) {\n          var v;\n\n          if (self.json[_networkGraphAttrbuteID][id].volatile) {\n            v = self.json[_networkGraphAttrbuteID][id].map(d, self);\n          } else {\n            v = d[_networkNodeAttributeID][id];\n          }\n\n          if (_.isString(v)) {\n            if (v.length == 0) {\n              return _networkMissing;\n            } else {\n              if (number) {\n                v = +v;\n                return _.isNaN(v) ? _networkMissing : v;\n              }\n            }\n          }\n          return v;\n        }\n      }\n    } catch (e) {\n      console.log(\"self.attribute_node_value_by_id\", e, d, id, number);\n    }\n    return _networkMissing;\n  };\n\n  function inject_attribute_node_value_by_id(d, id, value) {\n    //console.log (\"Injecting \" + id + \" with value \" + value);\n    if (_networkNodeAttributeID in d && id) {\n      d[_networkNodeAttributeID][id] = value;\n    }\n  }\n\n  self.inject_attribute_description = function(key, d) {\n    if (_networkGraphAttrbuteID in self.json) {\n      var new_attr = {};\n      new_attr[key] = d;\n      _.extend(self.json[_networkGraphAttrbuteID], new_attr);\n      //self.json[_networkGraphAttrbuteID][key] = _.clone (d);\n    }\n  };\n  function node_size(d) {\n    if (self.showing_on_map) {\n      return 50;\n    }\n    var r = 5 + Math.sqrt(d.degree); //return (d.match_filter ? 10 : 4)*r*r;\n    return 4 * r * r;\n  }\n\n  function node_color(d) {\n    /*if (d.match_filter) {\n        return \"white\";\n    }*/\n\n    if (self.colorizer[\"category_id\"]) {\n      var v = self.attribute_node_value_by_id(d, self.colorizer[\"category_id\"]);\n      if (self.colorizer[\"continuous\"]) {\n        if (v == _networkMissing) {\n          return _networkMissingColor;\n        }\n        //console.log (v, self.colorizer['category'](v));\n      }\n      return self.colorizer[\"category\"](v);\n    }\n    return d.hxb2_linked ? \"black\" : d.is_lanl ? \"red\" : \"gray\";\n  }\n\n  function node_opacity(d) {\n    if (self.colorizer[\"opacity\"]) {\n      return self.colorizer[\"opacity\"](\n        self.attribute_node_value_by_id(d, self.colorizer[\"opacity_id\"], true)\n      );\n    }\n    return 1;\n  }\n\n  function cluster_color(d, type) {\n    if (d[\"binned_attributes\"]) {\n      return self.colorizer[\"category\"](type);\n    }\n    return \"#bdbdbd\";\n  }\n\n  function hxb2_node_color(d) {\n    return \"black\";\n  }\n\n  function node_info_string(n) {\n    var str;\n\n    if (!self._is_CDC_) {\n      str =\n        \"Degree <em>\" +\n        n.degree +\n        \"</em><br>Clustering coefficient <em> \" +\n        misc.format_value(n.lcc, _defaultFloatFormat) +\n        \"</em>\";\n    } else {\n      str = \"# links <em>\" + n.degree + \"</em>\";\n    }\n\n    _.each(\n      _.union(self._additional_node_pop_fields, [\n        self.colorizer[\"category_id\"],\n        self.node_shaper[\"id\"],\n        self.colorizer[\"opacity_id\"]\n      ]),\n      function(key) {\n        if (key) {\n          if (key in graph_data[_networkGraphAttrbuteID]) {\n            var attribute = self.attribute_node_value_by_id(n, key);\n\n            if (graph_data[_networkGraphAttrbuteID][key][\"type\"] == \"Date\") {\n              try {\n                attribute = _defaultDateViewFormat(attribute);\n              } catch (err) {}\n            }\n            if (attribute) {\n              str += \"<br>\" + key + \" <em>\" + attribute + \"</em>\";\n            }\n          }\n        }\n      }\n    );\n\n    return str;\n  }\n\n  function edge_info_string(n) {\n    var str = \"Length <em>\" + _defaultFloatFormat(n.length) + \"</em>\";\n    if (\"support\" in n) {\n      str +=\n        \"<br>Worst triangle-based support (p): <em>\" +\n        _defaultFloatFormat(n.support) +\n        \"</em>\";\n    }\n\n    var attribute = self.attribute_node_value_by_id(\n      n,\n      self.colorizer[\"category_id\"]\n    );\n\n    return str;\n  }\n\n  function node_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      (self._is_CDC_ ? \"Individual \" : \"Node \") + d.id,\n      node_info_string(d),\n      self.container\n    );\n  }\n\n  function node_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  function edge_pop_on(e) {\n    toggle_tooltip(\n      this,\n      true,\n      e.source.id + \" - \" + e.target.id,\n      edge_info_string(e),\n      self.container\n    );\n  }\n\n  function edge_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  /*------------ Cluster Methods ---------------*/\n\n  /* Creates a new object that groups nodes by cluster\n   * @param nodes\n   * @returns clusters\n   */\n  function get_all_clusters(nodes) {\n    var by_cluster = _.groupBy(nodes, \"cluster\");\n    return by_cluster;\n  }\n\n  function compute_cluster_centroids(clusters) {\n    for (var c in clusters) {\n      var cls = clusters[c];\n      cls.x = 0;\n      cls.y = 0;\n      if (_.has(cls, \"children\")) {\n        cls.children.forEach(function(x) {\n          cls.x += x.x;\n          cls.y += x.y;\n        });\n        cls.x /= cls.children.length;\n        cls.y /= cls.children.length;\n      }\n    }\n  }\n\n  function collapse_cluster(x, keep_in_q) {\n    self.needs_an_update = true;\n    x.collapsed = true;\n    currently_displayed_objects -= self.cluster_sizes[x.cluster_id - 1] - 1;\n    if (!keep_in_q) {\n      var idx = open_cluster_queue.indexOf(x.cluster_id);\n      if (idx >= 0) {\n        open_cluster_queue.splice(idx, 1);\n      }\n    }\n    compute_cluster_centroids([x]);\n    return x.children.length;\n  }\n\n  function expand_cluster(x, copy_coord) {\n    self.needs_an_update = true;\n    x.collapsed = false;\n    currently_displayed_objects += self.cluster_sizes[x.cluster_id - 1] - 1;\n    open_cluster_queue.push(x.cluster_id);\n\n    if (copy_coord) {\n      x.children.forEach(function(n) {\n        n.x = x.x + (Math.random() - 0.5) * x.children.length;\n        n.y = x.y + (Math.random() - 0.5) * x.children.length;\n      });\n    } else {\n      x.children.forEach(function(n) {\n        n.x = self.width * 0.25 + (Math.random() - 0.5) * x.children.length;\n        n.y = 0.25 * self.height + (Math.random() - 0.5) * x.children.length;\n      });\n    }\n  }\n\n  function render_binned_table(id, the_map, matrix) {\n    var the_table = d3.select(self.get_ui_element_selector_by_role(id, true));\n    if (the_table.empty()) {\n      return;\n    }\n\n    the_table.selectAll(\"thead\").remove();\n    the_table.selectAll(\"tbody\").remove();\n\n    d3\n      .select(self.get_ui_element_selector_by_role(id + \"_enclosed\", true))\n      .style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var fill = self.colorizer[\"category\"];\n      var lookup = the_map(null, \"lookup\");\n\n      var headers = the_table.append(\"thead\").append(\"tr\").selectAll(\"th\").data(\n        [\"\"].concat(\n          matrix[0].map(function(d, i) {\n            return lookup[i];\n          })\n        )\n      );\n\n      headers.enter().append(\"th\");\n      headers\n        .html(function(d) {\n          return \"<span>&nbsp;\" + d + \"</span>\";\n        })\n        .each(function(d, i) {\n          if (i) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n\n      if (self.show_percent_in_pairwise_table) {\n        var sum = _.map(matrix, function(row) {\n          return _.reduce(\n            row,\n            function(p, c) {\n              return p + c;\n            },\n            0\n          );\n        });\n\n        matrix = _.map(matrix, function(row, row_index) {\n          return _.map(row, function(c) {\n            return c / sum[row_index];\n          });\n        });\n      }\n\n      var rows = the_table.append(\"tbody\").selectAll(\"tr\").data(\n        matrix.map(function(d, i) {\n          return [lookup[i]].concat(d);\n        })\n      );\n\n      rows.enter().append(\"tr\");\n      rows\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .html(function(d, i) {\n          return i == 0\n            ? \"<span>&nbsp;\" + d + \"</span>\"\n            : self.show_percent_in_pairwise_table\n              ? _defaultPercentFormat(d)\n              : d;\n        })\n        .each(function(d, i) {\n          if (i == 0) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n    }\n  }\n\n  function render_chord_diagram(id, the_map, matrix) {\n    var container = d3.select(self.get_ui_element_selector_by_role(id, true));\n\n    if (container.empty()) {\n      return;\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    d3\n      .select(self.get_ui_element_selector_by_role(id + \"_enclosed\", true))\n      .style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var lookup = the_map(null, \"lookup\");\n\n      var svg = container.append(\"svg\");\n\n      var chord = d3.layout\n        .chord()\n        .padding(0.05)\n        .sortSubgroups(d3.descending)\n        .matrix(matrix);\n\n      var text_offset = 20,\n        width = 450,\n        height = 450,\n        innerRadius = Math.min(width, height - text_offset) * 0.41,\n        outerRadius = innerRadius * 1.1;\n\n      var fill = self.colorizer[\"category\"],\n        font_size = 12;\n\n      var text_label = svg\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) + \")\"\n        )\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", font_size)\n        .text(\"\");\n\n      svg = svg\n        .attr(\"width\", width)\n        .attr(\"height\", height - text_offset)\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) / 2 + \")\"\n        );\n\n      svg\n        .append(\"g\")\n        .selectAll(\"path\")\n        .data(chord.groups)\n        .enter()\n        .append(\"path\")\n        .style(\"fill\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .style(\"stroke\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .attr(\n          \"d\",\n          d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius)\n        )\n        .on(\"mouseover\", fade(0.1, true))\n        .on(\"mouseout\", fade(1, false));\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"chord\")\n        .selectAll(\"path\")\n        .data(chord.chords)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", d3.svg.chord().radius(innerRadius))\n        .style(\"fill\", function(d) {\n          return fill(d.target.index);\n        })\n        .style(\"opacity\", 1);\n\n      // Returns an event handler for fading a given chord group.\n      function fade(opacity, t) {\n        return function(g, i) {\n          text_label.text(t ? lookup[i] : \"\");\n          svg\n            .selectAll(\".chord path\")\n            .filter(function(d) {\n              return d.source.index != i && d.target.index != i;\n            })\n            .transition()\n            .style(\"opacity\", opacity);\n        };\n      }\n    }\n  }\n\n  function attribute_pairwise_distribution(id, dim, the_map, only_expanded) {\n    var scan_from = only_expanded ? draw_me.edges : self.edges;\n    var the_matrix = [];\n    for (var i = 0; i < dim; i += 1) {\n      the_matrix.push([]);\n      for (var j = 0; j < dim; j += 1) {\n        the_matrix[i].push(0);\n      }\n    }\n\n    _.each(scan_from, function(edge) {\n      //console.log (self.attribute_node_value_by_id(self.nodes[edge.source], id), self.attribute_node_value_by_id(self.nodes[edge.target], id));\n      the_matrix[\n        the_map(self.attribute_node_value_by_id(self.nodes[edge.source], id))\n      ][\n        the_map(self.attribute_node_value_by_id(self.nodes[edge.target], id))\n      ] += 1;\n    });\n    // check if there are null values\n\n    var haz_null = the_matrix.some(function(d, i) {\n      if (i == dim - 1) {\n        return d.some(function(d2) {\n          return d2 > 0;\n        });\n      }\n      return d[dim - 1] > 0;\n    });\n    if (!haz_null) {\n      the_matrix.pop();\n      for (i = 0; i < dim - 1; i += 1) {\n        the_matrix[i].pop();\n      }\n    }\n\n    // symmetrize the matrix\n\n    dim = the_matrix.length;\n\n    for (i = 0; i < dim; i += 1) {\n      for (j = i; j < dim; j += 1) {\n        the_matrix[i][j] += the_matrix[j][i];\n        the_matrix[j][i] = the_matrix[i][j];\n      }\n    }\n\n    return the_matrix;\n  }\n\n  self._aux_populate_category_fields = function(d, k) {\n    d[\"raw_attribute_key\"] = k;\n    d.discrete = false;\n    if (d[\"type\"] == \"String\") {\n      d.discrete = true;\n      d[\"value_range\"] = _.keys(\n        _.countBy(graph_data.Nodes, function(nd) {\n          return self.attribute_node_value_by_id(nd, k);\n        })\n      );\n      d[\"dimension\"] = d[\"value_range\"].length;\n    } else {\n      if (\"enum\" in d) {\n        d.discrete = true;\n        d[\"value_range\"] = _.clone(d[\"enum\"]);\n        if (!(_networkMissing in d[\"value_range\"])) {\n          d[\"value_range\"].push(_networkMissing);\n        }\n        d[\"dimension\"] = d[\"value_range\"].length;\n        d[\"no-sort\"] = true;\n      }\n    }\n    return d;\n  };\n\n  self._aux_process_category_values = function(d) {\n    var values;\n    if (d[\"no-sort\"]) {\n      values = d[\"value_range\"];\n    } else {\n      if (d[\"type\"] == \"String\") {\n        values = d[\"value_range\"].sort();\n\n        if (d.dimension <= _maximumValuesInCategories) {\n          var string_hash = function(str) {\n            var hash = 5801;\n            for (var ci = 0; ci < str.length; ci++) {\n              var charCode = str.charCodeAt(ci);\n              hash = (hash << (5 + hash)) + charCode;\n            }\n            return hash;\n          };\n\n          var hashed = _.map(values, string_hash);\n          var available_keys = {};\n          var reindexed = {};\n\n          for (var i = 0; i < _maximumValuesInCategories; i++) {\n            available_keys[i] = true;\n          }\n\n          _.each(hashed, function(value, index) {\n            if (value < 0) {\n              value = -value;\n            }\n\n            var first_try = value % _maximumValuesInCategories;\n            if (first_try in available_keys) {\n              reindexed[values[index]] = first_try;\n              delete available_keys[first_try];\n              return;\n            }\n\n            var second_try =\n              Math.floor(value / _maximumValuesInCategories) %\n              _maximumValuesInCategories;\n            if (second_try in available_keys) {\n              reindexed[values[index]] = second_try;\n              delete available_keys[second_try];\n              return;\n            }\n\n            var last_resort = parseInt(_.keys(available_keys).sort()[0]);\n            reindexed[values[index]] = last_resort;\n            delete available_keys[last_resort];\n          });\n\n          d[\"stable-ish order\"] = reindexed;\n        }\n        //values = _.unzip(_.zip (d['value_range'], ordering_map).sort (function (a,b) { if (a[1] < b[1]) return -1; if (a[1] > b[1]) return 1; return 0}))[0]; //d['value_range'].sort ();\n      } else {\n        values = d[\"value_range\"].sort();\n      }\n    }\n\n    var map = new Object();\n\n    _.each(values, function(d2, i) {\n      map[d2] = i;\n    });\n\n    d[\"value_map\"] = function(v, key) {\n      return key ? (key == \"lookup\" ? _.invert(map) : map) : map[v];\n    };\n    return d;\n  };\n\n  function attribute_cluster_distribution(the_cluster, attribute_id) {\n    if (attribute_id && the_cluster) {\n      return the_cluster.children.map(function(d) {\n        return self.attribute_node_value_by_id(d, attribute_id);\n      });\n    }\n    return null;\n  }\n\n  function cluster_info_string(id) {\n    var the_cluster = self.clusters[self.cluster_mapping[id]],\n      attr_info = the_cluster[\"binned_attributes\"];\n\n    var str;\n\n    if (self._is_CDC_) {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> individuals.\" +\n        \"<br>Mean links/individual <em> = \" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max links/individual <em> = \" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\";\n    } else {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> nodes.\" +\n        \"<br>Mean degree <em>\" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max degree <em>\" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\" +\n        \"<br>Clustering coefficient <em> \" +\n        misc.format_value(the_cluster.cc, _defaultFloatFormat) +\n        \"</em>\";\n    }\n\n    if (attr_info) {\n      attr_info.forEach(function(d) {\n        str += \"<br>\" + d[0] + \" <em>\" + d[1] + \"</em>\";\n      });\n    }\n\n    return str;\n  }\n\n  function cluster_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      \"Cluster \" + d.cluster_id,\n      cluster_info_string(d.cluster_id),\n      self.container\n    );\n  }\n\n  function cluster_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  self.expand_cluster_handler = function(d, do_update, move_out) {\n    if (d.collapsed) {\n      var new_nodes = self.cluster_sizes[d.cluster_id - 1] - 1;\n\n      if (new_nodes > max_points_to_render) {\n        warning_string = \"This cluster is too large to be displayed\";\n      } else {\n        var leftover =\n          new_nodes + currently_displayed_objects - max_points_to_render;\n        if (leftover > 0) {\n          var k = 0;\n          for (; k < open_cluster_queue.length && leftover > 0; k++) {\n            var cluster =\n              self.clusters[self.cluster_mapping[open_cluster_queue[k]]];\n            leftover -= cluster.children.length - 1;\n            collapse_cluster(cluster, true);\n          }\n          if (k || open_cluster_queue.length) {\n            open_cluster_queue.splice(0, k);\n          }\n        }\n\n        if (leftover <= 0) {\n          expand_cluster(d, !move_out);\n        }\n      }\n\n      if (do_update) {\n        self.update(false, 0.6);\n      }\n    }\n    return \"\";\n  };\n\n  function show_sequences_in_cluster(d) {\n    var sequences = new Object();\n    _.each(\n      _extract_single_cluster(\n        self.clusters[self.cluster_mapping[d.cluster]].children,\n        null,\n        true\n      ).Edges,\n      function(e) {\n        _.each(e.sequences, function(s) {\n          if (!(s in sequences)) {\n            sequences[s] = 1;\n          }\n        });\n      }\n    );\n    //console.log (_.keys(sequences));\n  }\n\n  function _compute_cluster_degrees(d) {\n    var degrees = d.children.map(function(c) {\n      return c.degree;\n    });\n    degrees.sort(d3.ascending);\n    d.degrees = helpers.describe_vector(degrees);\n  }\n\n  function collapse_cluster_handler(d, do_update) {\n    collapse_cluster(self.clusters[self.cluster_mapping[d.cluster]]);\n    if (do_update) {\n      self.update(false, 0.4);\n    }\n  }\n\n  function center_cluster_handler(d) {\n    d.x = self.width / 2;\n    d.y = self.height / 2;\n    self.update(false, 0.4);\n  }\n\n  function cluster_box_size(c) {\n    return 8 * Math.sqrt(c.children.length);\n  }\n\n  self.extract_network_time_series = function(\n    time_attr,\n    other_attributes,\n    node_filter\n  ) {\n    var use_these_nodes = node_filter\n      ? _.filter(self.nodes, node_filter)\n      : self.nodes;\n\n    var result = _.map(use_these_nodes, function(node) {\n      var series = {\n        time: self.attribute_node_value_by_id(node, time_attr)\n      };\n      if (other_attributes) {\n        _.each(other_attributes, function(attr, key) {\n          series[attr] = self.attribute_node_value_by_id(node, key);\n        });\n      }\n      return series;\n    });\n\n    result.sort(function(a, b) {\n      if (a.time < b.time) return -1;\n      if (a.time == b.time) return 0;\n      return 1;\n    });\n\n    return result;\n  };\n\n  self.expand_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.is_hidden) {\n        self.expand_cluster_handler(x, false);\n      }\n    });\n    self.update();\n  };\n\n  self.select_some_clusters = function(condition) {\n    return self.clusters.filter(function(c, i) {\n      return _.some(c.children, function(n) {\n        return condition(n);\n      });\n    });\n  };\n\n  self.collapse_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.collapsed) collapse_cluster(x);\n    });\n    self.update();\n  };\n\n  self.toggle_hxb2 = function() {\n    self.hide_hxb2 = !self.hide_hxb2;\n    self.update();\n  };\n\n  function stratify(array) {\n    if (array) {\n      var dict = {},\n        stratified = [];\n\n      array.forEach(function(d) {\n        if (d in dict) {\n          dict[d] += 1;\n        } else {\n          dict[d] = 1;\n        }\n      });\n      for (var uv in dict) {\n        stratified.push([uv, dict[uv]]);\n      }\n      return stratified.sort(function(a, b) {\n        return a[0] - b[0];\n      });\n    }\n    return array;\n  }\n\n  /*------------ Node injection (social network) ---------------*/\n\n  self.load_nodes_edges = function(\n    nodes_and_attributes,\n    index_id,\n    edges_and_attributes,\n    annotation\n  ) {\n    annotation = annotation || \"Social\";\n    /** \n        1. Scan the list of nodes for \n            a. Nodes not present in the existing network\n            b. Attribute names\n            c. Attribute values\n        \n        2. Scan the list of edges for \n            a. Edges not present in the existing network \n            b. Attribute names\n            c. Attribute values\n     */\n\n    var new_nodes = [];\n    var edge_types_dict = {};\n    var existing_nodes = 0;\n    try {\n      if (nodes_and_attributes && nodes_and_attributes.length) {\n        var injected_nodes = {};\n        var node_attributes = {};\n\n        if (!(index_id in nodes_and_attributes[0])) {\n          throw index_id +\n            \" is not one of the attributes in the imported node records\";\n        }\n\n        _.each(nodes_and_attributes[0], function(r, i) {\n          if (i != index_id) {\n            var attribute_definition = {\n              label: i,\n              type: \"String\",\n              annotation: annotation\n            };\n            self.inject_attribute_description(i, attribute_definition);\n          }\n        });\n\n        var existing_network_nodes = {},\n          node_name_2_id = {};\n\n        _.each(self.json.Nodes, function(n, i) {\n          existing_network_nodes[n.id] = n;\n          node_name_2_id[n.id] = i;\n        });\n\n        _.each(nodes_and_attributes, function(n) {\n          function handle_node_attributes(target) {\n            _.each(n, function(attribute_value, attribute_key) {\n              if (attribute_key != index_id) {\n                inject_attribute_node_value_by_id(\n                  target,\n                  attribute_key,\n                  attribute_value\n                );\n              }\n            });\n          }\n\n          if (n[index_id] in existing_network_nodes) {\n            handle_node_attributes(existing_network_nodes[n[index_id]]);\n            existing_nodes++;\n          } else {\n            var new_node = {\n              _networkNodeAttributeID: {},\n              node_class: \"injected\",\n              node_annotation: annotation,\n              attributes: [],\n              degree: 0\n            };\n            new_node.id = n[index_id];\n            handle_node_attributes(new_node);\n            node_name_2_id[new_node.id] = self.json.Nodes.length;\n            self.json.Nodes.push(new_node);\n            new_nodes.push(new_node);\n          }\n        });\n\n        _.each(edges_and_attributes, function(e) {\n          try {\n            if (\"Index\" in e && \"Partner\" in e && \"Contact\" in e) {\n              if (!e[\"Index\"] in node_name_2_id) {\n                throw \"Invalid index node\";\n              }\n              if (!e[\"Partner\"] in node_name_2_id) {\n                throw \"Invalid partner node\";\n              }\n\n              edge_types_dict[e[\"Contact\"]] =\n                (edge_types_dict[e[\"Contact\"]]\n                  ? edge_types_dict[e[\"Contact\"]]\n                  : 0) + 1;\n\n              var new_edge = {\n                source: node_name_2_id[e[\"Index\"]],\n                target: node_name_2_id[e[\"Partner\"]],\n                edge_type: e[\"Contact\"],\n                length: 0.005,\n                directed: true\n              };\n\n              self.json.Edges.push(new_edge);\n            } else {\n              throw \"Missing required attribute\";\n            }\n          } catch (err) {\n            throw \"Invalid edge specification ( \" +\n              err +\n              \") \" +\n              JSON.stringify(e);\n          }\n        });\n\n        self._aux_populate_category_menus();\n        self.update_clusters_with_injected_nodes(null, null, annotation);\n        self.draw_node_table(self.extra_node_table_columns, self.json.Nodes);\n        if (!self.extra_cluster_table_columns) {\n          self.extra_cluster_table_columns = [];\n        }\n        if (!self.extra_subcluster_table_columns) {\n          self.extra_subcluster_table_columns = [];\n        }\n\n        var edge_types_by_cluster = {};\n        _.each(self.json.Edges, function(e) {\n          var edge_clusters = _.union(\n            _.keys(self.json.Nodes[e.source].extended_cluster),\n            _.keys(self.json.Nodes[e.target].extended_cluster)\n          );\n          _.each(edge_clusters, function(c) {\n            if (!(c in edge_types_by_cluster)) {\n              edge_types_by_cluster[c] = {};\n            }\n            if (e.edge_type) {\n              edge_types_by_cluster[c][e.edge_type] = 1;\n            }\n          });\n        });\n\n        var edge_types_by_cluster_sorted = {};\n        _.each(edge_types_by_cluster, function(v, c) {\n          var my_keys = _.keys(v);\n          my_keys.sort();\n          edge_types_by_cluster_sorted[c] = my_keys;\n        });\n\n        var edge_types = _.keys(edge_types_dict);\n        edge_types.sort();\n        var _edge_colorizer = d3.scale\n          .ordinal()\n          .range(_networkCategoricalBase)\n          .domain(edge_types);\n\n        var injected_column = [\n          {\n            description: {\n              value: annotation + \" network\",\n              sort: function(c) {\n                return c.value[0];\n              },\n              help: \"Nodes added and clusters merged through \" + annotation\n            },\n            generator: function(cluster) {\n              return {\n                value: [\n                  cluster.injected[annotation],\n                  cluster.linked_clusters,\n                  cluster.cluster_id\n                ],\n\n                callback: function(element, payload) {\n                  var this_cell = d3.select(element);\n                  this_cell.text(+payload[0] + \" \" + annotation + \" nodes. \");\n                  var other_clusters = [];\n                  if (payload[1]) {\n                    other_clusters = _.without(_.keys(payload[1]), payload[2]);\n                    if (other_clusters.length) {\n                      other_clusters.sort();\n                      this_cell\n                        .append(\"span\")\n                        .classed(\"label label-info\", true)\n                        .text(\n                          \"Bridges to \" + other_clusters.length + \" clusters\"\n                        )\n                        .attr(\"title\", other_clusters.join(\", \"));\n                    }\n                  }\n\n                  var labeled_links = _.clone(\n                    edge_types_by_cluster_sorted[payload[2]]\n                  );\n\n                  if (\n                    payload[0] > 0 ||\n                    other_clusters.length ||\n                    (edge_types_by_cluster_sorted[payload[2]] &&\n                      labeled_links.length)\n                  ) {\n                    labeled_links.push(\"\");\n\n                    var shown_types = {};\n                    _.each(labeled_links, function(t) {\n                      shown_types[t] = 1;\n                    });\n\n                    this_cell\n                      .append(\"button\")\n                      .classed(\"btn btn-primary btn-xs pull-right\", true)\n                      .text(\"View \" + annotation)\n                      .on(\"click\", function(e) {\n                        self.open_exclusive_tab_view(\n                          payload[2],\n                          function(n) {\n                            return (\n                              n.extended_cluster &&\n                              payload[2] in n.extended_cluster\n                            );\n                          },\n                          function(id) {\n                            return \"Cluster \" + id + \" with \" + annotation;\n                          },\n                          {\n                            \"edge-styler\": function(element, d, network) {\n                              if (_.has(d, \"edge_type\")) {\n                                d3\n                                  .select(element)\n                                  .style(\n                                    \"stroke\",\n                                    network._edge_colorizer(d[\"edge_type\"])\n                                  );\n                                d.is_hidden = !network.shown_types[\n                                  d[\"edge_type\"]\n                                ];\n                              } else {\n                                d.is_hidden = !network.shown_types[\"\"];\n                              }\n                            },\n\n                            init_code: function(network) {\n                              function style_edge(type) {\n                                this.style(\"stroke-width\", \"5px\");\n                                if (type.length) {\n                                  this.style(\n                                    \"stroke\",\n                                    network._edge_colorizer(type)\n                                  );\n                                } else {\n                                  this.classed(\"link\", true);\n                                  var def_color = this.style(\"stroke\");\n                                  this.classed(\"link\", null);\n                                  this.style(\"stroke\", def_color);\n                                }\n                              }\n                              network._edge_colorizer = _edge_colorizer;\n                              network.shown_types = _.clone(shown_types);\n                              network.edge_legend = {\n                                caption: \"Network links\",\n                                types: {}\n                              };\n\n                              _.each(network.shown_types, function(ignore, t) {\n                                if (t.length) {\n                                  network.edge_legend.types[t] = _.partial(\n                                    style_edge,\n                                    t\n                                  );\n                                } else {\n                                  network.edge_legend.types[\n                                    \"Molecular links\"\n                                  ] = _.partial(style_edge, t);\n                                }\n                              });\n                            },\n\n                            extra_menu: {\n                              title: \"Additional options\",\n                              items: _.map(labeled_links, function(edge_class) {\n                                return [\n                                  function(network, element) {\n                                    function toggle_element() {\n                                      network.shown_types[edge_class] = !network\n                                        .shown_types[edge_class];\n                                      checkbox.attr(\n                                        \"checked\",\n                                        network.shown_types[edge_class]\n                                          ? \"\"\n                                          : null\n                                      );\n                                      network.update(true);\n                                    }\n\n                                    var link;\n\n                                    if (edge_class.length) {\n                                      link = element\n                                        .append(\"a\")\n                                        .text(edge_class + \" links\")\n                                        .style(\n                                          \"color\",\n                                          network._edge_colorizer(edge_class)\n                                        )\n                                        .on(\"click\", toggle_element);\n                                    } else {\n                                      link = element\n                                        .append(\"a\")\n                                        .text(\"Molecular links\")\n                                        .on(\"click\", toggle_element);\n                                    }\n                                    var checkbox = link\n                                      .append(\"input\")\n                                      .attr(\"type\", \"checkbox\")\n                                      .attr(\"checked\", \"\");\n                                  }\n                                ];\n                              })\n                            }\n                          }\n                        );\n                      });\n                  }\n                }\n              };\n            }\n          }\n        ];\n\n        self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat(\n          injected_column\n        );\n        self.draw_cluster_table(\n          self.extra_cluster_table_columns,\n          self.cluster_table,\n          false,\n          self.subcluster_table\n        );\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    return {\n      nodes: new_nodes,\n      existing_nodes: existing_nodes,\n      edges: edge_types_dict\n    };\n  };\n\n  self.update_clusters_with_injected_nodes = function(\n    node_filter,\n    edge_filter,\n    annotation\n  ) {\n    var cluster_report = {};\n\n    try {\n      node_filter =\n        node_filter ||\n        function() {\n          return true;\n        };\n      edge_filter =\n        edge_filter ||\n        function() {\n          return true;\n        };\n\n      var split_clusters = {};\n      var node_id_to_local_cluster = {};\n\n      var recomputed_clusters = hivtrace_cluster_depthwise_traversal(\n        _.filter(self.json.Nodes, node_filter),\n        self.json.Edges,\n        null,\n        false\n      );\n\n      _.each(recomputed_clusters, function(c) {\n        var cluster_ids = {};\n        var injected_count = 0;\n\n        _.each(c, function(n) {\n          cluster_ids[n.cluster] = 1;\n          injected_count += n.cluster ? 0 : 1;\n        });\n\n        //var cluster_ids = _.keys (cluster_ids);\n\n        //console.log (cluster_ids.length);\n\n        // count how many \"injected\" nodes are there in the new cluster\n\n        if (injected_count) {\n          delete cluster_ids[undefined];\n        }\n\n        var cluster_count = _.keys(cluster_ids).length;\n\n        _.each(c, function(n) {\n          if (\"extended_cluster\" in n) {\n            _.extend(n[\"extended_cluster\"], cluster_ids);\n          } else {\n            n[\"extended_cluster\"] = cluster_ids;\n          }\n        });\n\n        _.each(cluster_ids, function(c, k) {\n          //console.log (k);\n          var existing_cluster = self.clusters[k - 1];\n          if (!existing_cluster.injected) {\n            existing_cluster.injected = {};\n          }\n          existing_cluster.injected[annotation] = injected_count;\n          if (\"linked_clusters\" in existing_cluster) {\n            _.extend(existing_cluster[\"linked_clusters\"], cluster_ids);\n          } else {\n            existing_cluster[\"linked_clusters\"] = cluster_ids;\n          }\n        });\n      });\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n\n    return recomputed_clusters;\n  };\n  /*------------ Event Functions ---------------*/\n  function toggle_tooltip(element, turn_on, title, tag, container) {\n    //if (d3.event.defaultPrevented) return;\n\n    if (turn_on && !element.tooltip) {\n      // check to see if there are any other tooltips shown\n      $(\"[role='tooltip']\").each(function(d) {\n        $(this).remove();\n      });\n\n      var this_box = $(element);\n      var this_data = d3.select(element).datum();\n      element.tooltip = this_box.tooltip({\n        title: title + \"<br>\" + tag,\n        html: true,\n        container: container ? container : \"body\"\n      });\n\n      //this_data.fixed = true;\n\n      _.delay(_.bind(element.tooltip.tooltip, element.tooltip), 500, \"show\");\n    } else {\n      if (turn_on == false && element.tooltip) {\n        element.tooltip.tooltip(\"destroy\");\n        element.tooltip = undefined;\n      }\n    }\n  }\n\n  /*------------ Init code ---------------*/\n\n  var l_scale = 5000, // link scale\n    graph_data = self.json, // the raw JSON network object\n    max_points_to_render = 2048,\n    warning_string = \"\",\n    singletons = 0,\n    open_cluster_queue = [],\n    currently_displayed_objects,\n    gravity_scale = d3.scale\n      .pow()\n      .exponent(0.5)\n      .domain([1, 100000])\n      .range([0.1, 0.15]);\n\n  /*------------ D3 globals and SVG elements ---------------*/\n\n  var network_layout = d3.layout\n    .force()\n    .on(\"tick\", tick)\n    .charge(function(d) {\n      if (self.showing_on_map) {\n        return -60\n      }\n      if (d.cluster_id)\n        return (\n          self.charge_correction * (-20 - 5 * Math.pow(d.children.length, 0.7))\n        );\n      return self.charge_correction * (-5 - 20 * Math.sqrt(d.degree));\n    })\n    .linkDistance(function(d) {\n      return Math.max(d.length, 0.005) * l_scale;\n    })\n    .linkStrength(function(d) {\n      if (self.showing_on_map) {\n        return 0.01;\n      }\n      if (d.support !== undefined) {\n        return 2 * (0.5 - d.support);\n      }\n      return 1;\n    })\n    .chargeDistance(l_scale * 0.25)\n    .gravity(self.showing_on_map ? 0 : gravity_scale(json.Nodes.length))\n    .friction(0.25);\n\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n  d3.select(self.container).selectAll(\"svg\").remove();\n  self.node_table.selectAll(\"*\").remove();\n  self.cluster_table.selectAll(\"*\").remove();\n\n  self.network_svg = d3\n    .select(self.container)\n    .append(\"svg:svg\")\n    //.style (\"border\", \"solid black 1px\")\n    .attr(\"id\", self.dom_prefix + \"-network-svg\")\n    .attr(\"width\", self.width + self.margin.left + self.margin.right)\n    .attr(\"height\", self.height + self.margin.top + self.margin.bottom);\n\n  self.network_cluster_dynamics = null;\n\n  //.append(\"g\")\n  // .attr(\"transform\", \"translate(\" + self.margin.left + \",\" + self.margin.top + \")\");\n\n  var legend_vertical_offset;\n  self.showing_on_map ? legend_vertical_offset = 100 : legend_vertical_offset = 5;\n  self.legend_svg = self.network_svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(5,\" + legend_vertical_offset + \")\");\n\n  self.network_svg\n    .append(\"defs\")\n    .append(\"marker\")\n    .attr(\"id\", self.dom_prefix + \"_arrowhead\")\n    .attr(\"refX\", 9) /* there must be a smarter way to calculate shift*/\n    .attr(\"refY\", 2)\n    .attr(\"markerWidth\", 6)\n    .attr(\"markerHeight\", 4)\n    .attr(\"orient\", \"auto\")\n    .attr(\"stroke\", \"#666666\")\n    .attr(\"fill\", \"#AAAAAA\")\n    .append(\"path\")\n    .attr(\"d\", \"M 0,0 V 4 L6,2 Z\"); //this is actual shape for arrowhead\n\n  change_window_size();\n\n  initial_json_load();\n\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n\n  if (options) {\n    if (_.isNumber(options[\"charge\"])) {\n      self.charge_correction = options[\"charge\"];\n    }\n\n    if (\"colorizer\" in options) {\n      self.colorizer = options[\"colorizer\"];\n    }\n\n    if (\"node_shaper\" in options) {\n      self.node_shaper = options[\"node_shaper\"];\n    }\n\n    if (\"callbacks\" in options) {\n      options[\"callbacks\"](self);\n    }\n\n    self.draw_attribute_labels();\n    network_layout.start();\n\n    if (_.isArray(options[\"expand\"])) {\n      self.expand_some_clusters(\n        _.filter(self.clusters, function(c) {\n          return options[\"expand\"].indexOf(c.cluster_id) >= 0;\n        })\n      );\n    }\n  }\n  return self;\n};\n\nvar hivtrace_cluster_graph_summary = function(graph, tag) {\n  var summary_table = d3.select(tag);\n\n  summary_table = d3.select(tag).select(\"tbody\");\n  if (summary_table.empty()) {\n    summary_table = d3.select(tag).append(\"tbody\");\n  }\n\n  var table_data = [];\n\n  if (!summary_table.empty()) {\n    _.each(graph[\"Network Summary\"], function(value, key) {\n      if (self._is_CDC_ && key == \"Edges\") {\n        key = \"Links\";\n      }\n      if (_.isNumber(value)) {\n        table_data.push([key, value]);\n      }\n    });\n  }\n\n  var degrees = [];\n  _.each(graph[\"Degrees\"][\"Distribution\"], function(value, index) {\n    for (var k = 0; k < value; k++) {\n      degrees.push(index + 1);\n    }\n  });\n  degrees = helpers.describe_vector(degrees);\n  table_data.push([\"Links/node\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  degrees = helpers.describe_vector(graph[\"Cluster sizes\"]);\n  table_data.push([\"Cluster sizes\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  if (self._is_CDC_) {\n    degrees = helpers.describe_vector(\n      _.map(graph[\"Edges\"], function(e) {\n        return e.length;\n      })\n    );\n    table_data.push([\"Genetic distances (links only)\", \"\"]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Mean</i>\",\n      _defaultPercentFormat(degrees[\"mean\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Median</i>\",\n      _defaultPercentFormat(degrees[\"median\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Range</i>\",\n      _defaultPercentFormat(degrees[\"min\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"max\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n      _defaultPercentFormat(degrees[\"Q1\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"Q3\"])\n    ]);\n  }\n\n  var rows = summary_table.selectAll(\"tr\").data(table_data);\n  rows.enter().append(\"tr\");\n  rows.exit().remove();\n  var columns = rows.selectAll(\"td\").data(function(d) {\n    return d;\n  });\n  columns.enter().append(\"td\");\n  columns.exit();\n  columns.html(function(d) {\n    return d;\n  });\n};\n\nmodule.exports.computeCluster = hivtrace_cluster_depthwise_traversal;\nmodule.exports.clusterNetwork = hivtrace_cluster_network_graph;\nmodule.exports.graphSummary = hivtrace_cluster_graph_summary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/clusternetwork.js","var d3 = require(\"d3\"),\n  _ = require(\"underscore\"),\n  helpers = require(\"./helpers.js\");\n\nfunction hivtrace_cluster_adjacency_list(obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  var adjacency_list = {};\n\n  edges.forEach(function(e, i) {\n    function in_nodes(n, id) {\n      return n.id == id;\n    }\n\n    var seq_ids = e[\"sequences\"];\n\n    var n1 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[0]);\n      })[0],\n      n2 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[1]);\n      })[0];\n\n    adjacency_list[n1.id]\n      ? adjacency_list[n1.id].push(n2)\n      : (adjacency_list[n1.id] = [n2]);\n    adjacency_list[n2.id]\n      ? adjacency_list[n2.id].push(n1)\n      : (adjacency_list[n2.id] = [n1]);\n  });\n\n  return adjacency_list;\n}\n\nvar hivtrace_generate_svg_polygon_lookup = {};\n\n_.each(_.range(3, 20), function(d) {\n  var angle_step = Math.PI * 2 / d;\n  hivtrace_generate_svg_polygon_lookup[d] = _.map(_.range(1, d), function(i) {\n    return [Math.cos(angle_step * i), Math.sin(angle_step * i)];\n  });\n});\n\nfunction hivtrace_generate_svg_symbol(type) {\n  switch (type) {\n    case \"circle\":\n    case \"cross\":\n    case \"diamond\":\n    case \"square\":\n    case \"triangle-down\":\n    case \"triangle-up\":\n      return d3.svg.symbol().type(type);\n    case \"triangle\":\n      return new hivtrace_generate_svg_polygon().sides(3);\n    case \"pentagon\":\n      return new hivtrace_generate_svg_polygon().sides(5);\n    case \"hexagon\":\n      return new hivtrace_generate_svg_polygon().sides(6);\n    case \"septagon\":\n      return new hivtrace_generate_svg_polygon().sides(7);\n    case \"octagon\":\n      return new hivtrace_generate_svg_polygon().sides(8);\n    case \"ellipse\":\n      return new hivtrace_generate_svg_ellipse();\n  }\n  //console.log (type);\n  return d3.svg.symbol().type(\"circle\");\n}\n\nvar hivtrace_generate_svg_ellipse = function() {\n  var self = this;\n\n  self.ellipse = function() {\n    var path =\n      \"M \" +\n      self.radius +\n      \" 0 A \" +\n      self.radius * 1 +\n      \" \" +\n      self.radius * 0.75 +\n      \" 0 1 0 \" +\n      self.radius +\n      \" 0.00001\";\n    return path;\n  };\n\n  self.ellipse.type = function() {\n    return self.ellipse;\n  };\n\n  self.ellipse.size = function(attr) {\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(1.25 * attr / Math.PI);\n      return self.ellipse;\n    }\n\n    return self.size;\n  };\n\n  self.ellipse.size(64);\n\n  return self.ellipse;\n};\n\nvar hivtrace_generate_svg_polygon = function() {\n  var self = this;\n\n  self.polygon = function() {\n    var path = \" M\" + self.radius + \" 0\";\n\n    if (self.sides in hivtrace_generate_svg_polygon_lookup) {\n      path += hivtrace_generate_svg_polygon_lookup[self.sides]\n        .map(function(value) {\n          return \" L\" + self.radius * value[0] + \" \" + self.radius * value[1];\n        })\n        .join(\" \");\n    } else {\n      var angle_step = Math.PI * 2 / self.sides,\n        current_angle = 0;\n      for (i = 0; i < self.sides - 1; i++) {\n        current_angle += angle_step;\n        path +=\n          \" L\" +\n          self.radius * Math.cos(current_angle) +\n          \" \" +\n          self.radius * Math.sin(current_angle);\n      }\n    }\n\n    path += \" Z\";\n    return path;\n  };\n\n  self.polygon.sides = function(attr) {\n    if (_.isNumber(attr) && attr > 2) {\n      self.sides = attr;\n      return self.polygon;\n    }\n\n    return self.sides;\n  };\n\n  self.polygon.type = function() {\n    return self.polygon;\n  };\n\n  self.polygon.size = function(attr) {\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(attr / Math.PI);\n      return self.polygon;\n    }\n\n    return self.size;\n  };\n\n  self.polygon.size(64);\n  self.sides = 6;\n\n  return self.polygon;\n};\n\nfunction hivtrace_new_cluster_adjacency_list(obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  nodes.forEach(function(n) {\n    n.neighbors = d3.set();\n  });\n\n  edges.forEach(function(e) {\n    nodes[e.source].neighbors.add(e.target);\n    nodes[e.target].neighbors.add(e.source);\n  });\n}\n\n// Reconstructs path from floyd-warshall algorithm\nfunction hivtrace_get_path(next, i, j) {\n  var all_paths = [];\n  i = parseInt(i);\n  j = parseInt(j);\n\n  for (var c = 0; c < next[i][j].length; c++) {\n    var k = next[i][j][c];\n    var intermediate = k;\n\n    if (intermediate === null || intermediate == i) {\n      return [[parseInt(i), parseInt(j)]];\n    } else {\n      var paths_i_k = hivtrace_get_path(next, i, intermediate);\n      var paths_k_j = hivtrace_get_path(next, intermediate, j);\n\n      for (var i_k_index = 0; i_k_index < paths_i_k.length; i_k_index++) {\n        var i_k = paths_i_k[i_k_index];\n        for (var k_j_index = 0; k_j_index < paths_k_j.length; k_j_index++) {\n          var k_j = paths_k_j[k_j_index];\n          if (i_k.length) {\n            if (\n              i_k[0] == i &&\n              i_k[i_k.length - 1] == k &&\n              k_j[0] == k &&\n              k_j[k_j.length - 1] == j\n            ) {\n              i_k.pop();\n              all_paths.push(i_k.concat(k_j));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return all_paths;\n}\n\nfunction hivtrace_paths_with_node(node, next, i, j) {\n  var paths = hivtrace_get_path(next, i, j);\n\n  // Retrieve intermediary paths\n  paths = paths.map(function(sublist) {\n    return sublist.slice(1, -1);\n  });\n\n  if (!paths) {\n    return 0;\n  }\n\n  var num_nodes = [];\n\n  for (var k = 0; i < paths.length; k++) {\n    sublist = paths[k];\n    num_nodes.push(\n      d3.sum(\n        sublist.map(function(n) {\n          return n == node;\n        })\n      )\n    );\n  }\n\n  var mean = d3.mean(num_nodes);\n\n  if (mean === undefined) {\n    mean = 0;\n  }\n\n  return mean;\n}\n\n// Same as compute shortest paths, but with an additional next parameter for reconstruction\nfunction hivtrace_compute_shortest_paths_with_reconstruction(\n  obj,\n  subset,\n  use_actual_distances\n) {\n  // Floyd-Warshall implementation\n  var distances = [];\n  var next = [];\n  var nodes = obj.Nodes;\n  var edges = obj.Edges;\n  var node_ids = [];\n\n  var adjacency_list = hivtrace_cluster_adjacency_list(obj);\n\n  if (!subset) {\n    subset = Object.keys(adjacency_list);\n  }\n\n  var node_count = subset.length;\n\n  for (var i = 0; i < subset.length; i++) {\n    var a_node = subset[i];\n    var empty_arr = _.range(node_count).map(function(d) {\n      return null;\n    });\n    var zeroes = _.range(node_count).map(function(d) {\n      return null;\n    });\n    distances.push(zeroes);\n    next.push(empty_arr);\n  }\n\n  for (var index = 0; index < subset.length; index++) {\n    var a_node = subset[index];\n    for (var index2 = 0; index2 < subset.length; index2++) {\n      var second_node = subset[index2];\n      if (second_node != a_node) {\n        if (\n          adjacency_list[a_node]\n            .map(function(n) {\n              return n.id;\n            })\n            .indexOf(second_node) != -1\n        ) {\n          distances[index][index2] = 1;\n          distances[index2][index] = 1;\n        }\n      }\n    }\n  }\n\n  for (var index_i = 0; index_i < subset.length; index_i++) {\n    var n_i = subset[index_i];\n    for (var index_j = 0; index_j < subset.length; index_j++) {\n      var n_j = subset[index_j];\n      if (index_i == index_j) {\n        next[index_i][index_j] = [];\n      } else {\n        next[index_i][index_j] = [index_i];\n      }\n    }\n  }\n\n  // clone distances\n  var distances2 = _.map(distances, _.clone);\n  var c = 0;\n\n  for (var index_k = 0; index_k < subset.length; index_k++) {\n    var n_k = subset[index_k];\n    for (var index_i = 0; index_i < subset.length; index_i++) {\n      var n_i = subset[index_i];\n      for (var index_j = 0; index_j < subset.length; index_j++) {\n        var n_j = subset[index_j];\n\n        if (n_i != n_j) {\n          d_ik = distances[index_k][index_i];\n          d_jk = distances[index_k][index_j];\n          d_ij = distances[index_i][index_j];\n\n          if (d_ik !== null && d_jk !== null) {\n            d_ik += d_jk;\n            if (d_ij === null || d_ij > d_ik) {\n              distances2[index_i][index_j] = d_ik;\n              distances2[index_j][index_i] = d_ik;\n              next[index_i][index_j] = [];\n              next[index_i][index_j] = next[index_i][index_j].concat(\n                next[index_k][index_j]\n              );\n              continue;\n            } else if (d_ij == d_ik) {\n              next[index_i][index_j] = next[index_i][index_j].concat(\n                next[index_k][index_j]\n              );\n            }\n          }\n          c++;\n          distances2[index_j][index_i] = distances[index_j][index_i];\n          distances2[index_i][index_j] = distances[index_i][index_j];\n        }\n      }\n    }\n\n    var t = distances2;\n    distances2 = distances;\n    distances = t;\n  }\n\n  return {\n    ordering: subset,\n    distances: distances,\n    next: next\n  };\n}\n\nfunction hivtrace_filter_to_node_in_cluster(node, obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges,\n    cluster_id = null;\n\n  // Retrieve nodes that are part of the cluster\n  var node_obj = nodes.filter(function(n) {\n    return node == n.id;\n  });\n\n  if (node_obj) {\n    cluster_id = node_obj[0].cluster;\n  } else {\n    console.log(\"could not find node\");\n    return null;\n  }\n\n  // Filter out all edges and nodes that belong to the cluster\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster_id == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n  return filtered_obj;\n}\n\nfunction hivtrace_compute_betweenness_centrality_all_nodes_in_cluster(\n  cluster,\n  obj,\n  cb\n) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n\n  // get length of cluster\n  if (nodes_in_cluster.length > 70) {\n    cb(\"cluster too large\", null);\n    return;\n  }\n\n  // get paths\n  var paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n\n  var betweenness = {};\n  nodes_in_cluster.forEach(function(n) {\n    betweenness[n.id] = hivtrace_compute_betweenness_centrality(\n      n.id,\n      filtered_obj,\n      paths\n    );\n  });\n\n  cb(null, betweenness);\n  return;\n}\n\n// Returns dictionary of nodes' betweenness centrality\n// Utilizes the Floyd-Warshall Algorithm with reconstruction\nfunction hivtrace_compute_betweenness_centrality(node, obj, paths) {\n  if (!paths) {\n    var filtered_obj = hivtrace_filter_to_node_in_cluster(node, obj);\n    paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  }\n\n  // find index of id\n  var index = paths.ordering.indexOf(node);\n\n  if (index == -1) {\n    return null;\n  }\n\n  var length = paths.distances.length;\n\n  if (length != 2) {\n    scale = 1 / ((length - 1) * (length - 2));\n  } else {\n    scale = 1;\n  }\n\n  // If s->t goes through 1, add to sum\n  // Reconstruct each shortest path and check if node is in it\n  var paths_with_node = [];\n  for (var i in _.range(length)) {\n    for (var j in _.range(length)) {\n      paths_with_node.push(hivtrace_paths_with_node(index, paths.next, i, j));\n    }\n  }\n\n  return d3.sum(paths_with_node) * scale;\n}\n\nfunction hivtrace_compute_node_degrees(obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  for (var n in nodes) {\n    nodes[n].degree = 0;\n  }\n\n  for (var e in edges) {\n    nodes[edges[e].source].degree++;\n    nodes[edges[e].target].degree++;\n  }\n}\n\nfunction hivtrace_get_node_by_id(id, obj) {\n  return (\n    obj.Nodes.filter(function(n) {\n      return id == n.id;\n    })[0] || undefined\n  );\n}\n\nfunction hivtrace_compute_cluster_betweenness(obj, callback) {\n  var nodes = obj.Nodes;\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  // Get all unique clusters\n  var clusters = nodes.map(function(n) {\n    return n.cluster;\n  });\n  var unique_clusters = clusters.filter(onlyUnique);\n\n  var cb_count = 0;\n\n  function cb(err, results) {\n    cb_count++;\n\n    for (var node in results) {\n      hivtrace_get_node_by_id(node, obj)[\"betweenness\"] = results[node];\n    }\n\n    if (cb_count >= unique_clusters.length) {\n      callback(\"done\");\n    }\n  }\n\n  // Compute betweenness in parallel\n  unique_clusters.forEach(function(cluster_id) {\n    hivtrace_betweenness_centrality_all_nodes_in_cluster(cluster_id, obj, cb);\n  });\n\n  // once all settled callback\n}\n\nfunction hivtrace_is_contaminant(node) {\n  return node.attributes.indexOf(\"problematic\") != -1;\n}\n\nfunction hivtrace_convert_to_csv(obj, callback) {\n  //Translate nodes to rows, and then use d3.format\n  hivtrace_compute_node_degrees(obj);\n\n  hivtrace_compute_cluster_betweenness(obj, function(err) {\n    var node_array = obj.Nodes.map(function(d) {\n      return [\n        d.id,\n        d.cluster,\n        d.degree,\n        d.betweenness,\n        hivtrace_is_contaminant(d),\n        d.attributes.join(\";\")\n      ];\n    });\n    node_array.unshift([\n      \"seqid\",\n      \"cluster\",\n      \"degree\",\n      \"betweenness\",\n      \"is_contaminant\",\n      \"attributes\"\n    ]);\n    node_csv = d3.csv.format(node_array);\n    callback(null, node_csv);\n  });\n}\n\nfunction hivtrace_export_csv_button(graph, tag) {\n  var data = hivtrace_convert_to_csv(graph, function(err, data) {\n    if (data !== null) {\n      var pom = document.createElement(\"a\");\n      pom.setAttribute(\n        \"href\",\n        \"data:text/csv;charset=utf-8,\" + encodeURIComponent(data)\n      );\n      pom.setAttribute(\"download\", \"export.csv\");\n      pom.className = \"btn btn-default btn-sm\";\n      pom.innerHTML =\n        '<span class=\"glyphicon glyphicon-floppy-save\"></span> Export Results';\n      $(tag).append(pom);\n    }\n  });\n}\n\nfunction hiv_trace_export_table_to_text(parent_id, table_id, sep) {\n  var the_button = d3.select(parent_id);\n  the_button.selectAll(\"[data-type='download-button']\").remove();\n\n  the_button = the_button\n    .append(\"a\")\n    .attr(\"target\", \"_blank\")\n    .attr(\"data-type\", \"download-button\")\n    .on(\"click\", function(data, element) {\n      d3.event.preventDefault();\n      var table_tag = d3.select(this).attr(\"data-table\");\n      var table_text = helpers.table_to_text(table_tag);\n      helpers.export_handler(\n        table_text,\n        table_tag.substring(1) + \".tsv\",\n        \"text/tab-separated-values\"\n      );\n    })\n    .attr(\"data-table\", table_id);\n\n  the_button.append(\"i\").classed(\"fa fa-download fa-2x\", true);\n  return the_button;\n}\n\nvar hivtrace_compute_local_clustering_coefficients = _.once(function(obj) {\n  hivtrace_new_cluster_adjacency_list(obj);\n\n  var nodes = obj.Nodes;\n\n  nodes.forEach(function(n) {\n    var a_node = n;\n    var neighborhood_size = a_node.neighbors.size();\n\n    if (neighborhood_size < 2) {\n      a_node.lcc = undefined;\n    } else {\n      if (neighborhood_size > 500) {\n        a_node.lcc = hivtrace_too_large;\n      } else {\n        // count triangles\n        neighborhood = a_node.neighbors.values();\n        counter = 0;\n        for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n          for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n            if (nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])) {\n              counter++;\n            }\n          }\n        }\n        a_node.lcc = 2 * counter / neighborhood_size / (neighborhood_size - 1);\n      }\n    }\n  });\n});\n\nfunction hivtrace_render_settings(settings, explanations) {\n  // TODO:\n  //d3.json (explanations, function (error, expl) {\n  //    //console.log (settings);\n  //});\n}\n\nfunction hivtrace_format_value(value, formatter) {\n  if (typeof value === \"undefined\") {\n    return \"Not computed\";\n  }\n  if (value === hivtrace_undefined) {\n    return \"Undefined\";\n  }\n  if (value === hivtrace_too_large) {\n    return \"Size limit\";\n  }\n\n  if (value === hivtrace_processing) {\n    return '<span class=\"fa fa-spin fa-spinner\"></span>';\n  }\n\n  return formatter ? formatter(value) : value;\n}\n\nfunction hivtrace_plot_cluster_dynamics(\n  time_series,\n  container,\n  x_title,\n  y_title,\n  y_scale,\n  bin_by,\n  options\n) {\n  options = options || {\n    base_line: 20,\n    top: 40,\n    right: 30,\n    bottom: 3 * 20,\n    left: 5 * 20,\n    font_size: 18,\n    rect_size: 22,\n    width: 1024,\n    height: 600\n  };\n\n  var skip_cumulative = options && options[\"skip_cumulative\"];\n\n  var width = options.width - options.left - options.right;\n  var height = options.height - options.top - options.bottom;\n\n  bin_by =\n    bin_by ||\n    function(date) {\n      var year = date.getFullYear(),\n        nearest_quarter = new Date(),\n        mid_point = new Date();\n\n      nearest_quarter.setDate(1);\n      nearest_quarter.setFullYear(year);\n      mid_point.setFullYear(year);\n\n      var quarter = Math.floor(date.getMonth() / 3) + 1;\n      nearest_quarter.setMonth(quarter * 3);\n      nearest_quarter.setHours(0, 0, 0);\n      mid_point.setHours(0, 0, 0);\n\n      nearest_quarter.setFullYear(year + (quarter == 4 ? 1 : 0));\n      mid_point.setMonth(quarter * 3 + 1);\n      mid_point.setDate(15);\n\n      return [\"Q\" + quarter + \" \" + year, nearest_quarter, mid_point];\n    };\n\n  /** plot_data is an array with entries like \n        {\n            \"time\": DATE,\n            \"sex_trans\":\"IDU-Male\"\n        }\n        \n        \"time\" is required, everything else are optional attributes\n        \n        1. First, we bin everything into ranges (like years or quarters, this is returned by the mapper callback)\n        2. Second, we compute growth dynamics of total counts and individual attributes\n        3. Third, if additional attributes are present, one that's tagged for display is stratified by values and \n           converted into time series\n        \n    */\n\n  var x = d3.time.scale().range([0, width]);\n\n  var y = y_scale ? y_scale : d3.scale.linear();\n\n  y.range([height, 0]);\n\n  var xAxis = d3.svg\n    .axis()\n    .scale(x)\n    .orient(\"bottom\")\n    .ticks(8)\n    .tickFormat(d3.time.format(\"%m/%Y\"));\n\n  var yAxis = d3.svg.axis().scale(y).orient(\"left\").ticks(8, \"f\");\n\n  var binned = {};\n  var values_by_attribute = {};\n  var total_id = \"total\";\n  var total_color = \"#555555\";\n  var prefix = options && options[\"prefix\"] ? options[\"prefix\"] : null;\n  var max_bin = 0;\n\n  _.each(time_series, function(point, index) {\n    var bin_tag = bin_by(point[\"time\"]);\n    if (!(bin_tag[0] in binned)) {\n      binned[bin_tag[0]] = { time: bin_tag[1], x: bin_tag[2] };\n      binned[bin_tag[0]][total_id] = 0;\n      _.each(point, function(v, k) {\n        if (k != \"time\") {\n          binned[bin_tag[0]][k] = {};\n        }\n      });\n    }\n\n    binned[bin_tag[0]][total_id] += 1;\n    max_bin = Math.max(max_bin, binned[bin_tag[0]][total_id]);\n\n    var y = {};\n    y[total_id] = index + 1;\n    _.each(point, function(v, k) {\n      if (k != \"time\") {\n        binned[bin_tag[0]][k][v] = binned[bin_tag[0]][k][v]\n          ? binned[bin_tag[0]][k][v] + 1\n          : 1;\n        if (!(k in values_by_attribute)) {\n          values_by_attribute[k] = {};\n        }\n        if (v in values_by_attribute[k]) {\n          values_by_attribute[k][v]++;\n        } else {\n          values_by_attribute[k][v] = 1;\n        }\n        max_bin = Math.max(max_bin, binned[bin_tag[0]][k][v]);\n        y[k] = _.clone(values_by_attribute[k]);\n      }\n    });\n\n    point[\"y\"] = y;\n    point[\"_bin\"] = bin_tag[1];\n  });\n\n  var binned_array = [];\n  _.each(binned, function(v, k) {\n    v[\"id\"] = k;\n    binned_array.push(v);\n  });\n\n  binned_array.sort(function(a, b) {\n    return b[\"time\"] > a[\"time\"] ? 1 : b[\"time\"] == a[\"time\"] ? 0 : -1;\n  });\n\n  var min_x = d3.min(time_series, function(d) {\n    return d[\"time\"] < d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n  });\n  var max_x = d3.max(time_series, function(d) {\n    return d[\"time\"] > d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n  });\n\n  x.domain([min_x, max_x]).clamp(true);\n  y\n    .domain([\n      0.0,\n      Math.round(skip_cumulative ? max_bin + 1 : time_series.length * 1.2)\n    ])\n    .clamp(true);\n\n  /* step-plot generator*/\n\n  /*var svg = container.append(\"svg\")//.style(\"display\", \"table-cell\")\n        .attr(\"width\", width + options.left + options.right)\n        .attr(\"height\", height + options.top + options.bottom);*/\n\n  container.selectAll(\"*\").remove(); // clean up previous plots\n\n  var legend_area = container\n    .append(\"g\")\n    .attr(\n      \"transform\",\n      \"translate(\" +\n        (options.left + options.font_size * 2.5) +\n        \",\" +\n        (options.top + options.font_size) +\n        \")\"\n    );\n\n  var svg = container\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + options.left + \",\" + options.top + \")\");\n\n  /* set the domain for the codons */\n\n  var y_key = _.keys(values_by_attribute)[0];\n\n  var color_scale =\n    \"colorizer\" in options &&\n    options[\"colorizer\"] &&\n    y_key in options[\"colorizer\"]\n      ? options[\"colorizer\"][y_key]\n      : d3.scale.category10();\n\n  color_scale = _.wrap(color_scale, function(func, arg) {\n    if (arg == total_id) return total_color;\n    return func(arg);\n  });\n\n  var plot_types = _.keys(values_by_attribute[y_key]);\n  plot_types.push(total_id);\n  plot_types.sort();\n\n  if (options && options[\"drag\"]) {\n    var drag = d3.behavior.drag();\n    drag.on(\"drag\", function() {\n      options[\"drag\"].x += d3.event.dx;\n      options[\"drag\"].y += d3.event.dy;\n      d3\n        .select(this)\n        .attr(\n          \"transform\",\n          \"translate(\" + options[\"drag\"].x + \",\" + options[\"drag\"].y + \")\"\n        );\n    });\n    container.call(drag);\n  }\n\n  var legend_lines = legend_area.selectAll(\"g\").data(plot_types);\n\n  legend_lines.enter().append(\"g\").attr(\"class\", \"annotation-text\");\n\n  function opacity_toggle(tag, on_off) {\n    d3\n      .select('[data-plotid=\"' + tag + '\"]')\n      .style(\"fill-opacity\", on_off ? 0.5 : 0.1);\n    d3\n      .select('[data-curveid=\"' + tag + '\"]')\n      .style(\"stroke-width\", on_off ? 3 : 1);\n  }\n\n  legend_lines\n    .selectAll(\"text\")\n    .data(function(d) {\n      return [d];\n    })\n    .enter()\n    .append(\"text\")\n    .attr(\"transform\", function(d, i, j) {\n      return (\n        \"translate(\" +\n        options.rect_size +\n        \",\" +\n        (options.rect_size * (plot_types.length - 1 - j) -\n          (options.rect_size - options.font_size)) +\n        \")\"\n      );\n    })\n    .attr(\"dx\", \"0.2em\")\n    .style(\"font-size\", options.font_size)\n    .text(function(d) {\n      return d;\n    })\n    .on(\"mouseover\", function(d) {\n      opacity_toggle(prefix + d, true);\n    })\n    .on(\"mouseout\", function(d) {\n      opacity_toggle(prefix + d, false);\n    });\n\n  legend_lines\n    .selectAll(\"rect\")\n    .data(function(d) {\n      return [d];\n    })\n    .enter()\n    .append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", function(d, i, j) {\n      return options.rect_size * (plot_types.length - 2 - j);\n    })\n    .attr(\"width\", options.rect_size)\n    .attr(\"height\", options.rect_size)\n    .attr(\"class\", \"area\")\n    .style(\"fill\", function(d, i, j) {\n      return color_scale(d);\n    })\n    .on(\"mouseover\", function(d) {\n      opacity_toggle(prefix + d, true);\n    })\n    .on(\"mouseout\", function(d) {\n      opacity_toggle(prefix + d, false);\n    });\n\n  var last = _.clone(time_series[time_series.length - 1]);\n  last[\"time\"] = x.domain()[1];\n  time_series.push(last);\n\n  _.each(plot_types, function(plot_key, idx) {\n    var plot_color = color_scale(plot_key);\n    var y_accessor = function(d) {\n      //console.log ((plot_key in d['y']) ? d['y'][plot_key] : 0);\n      if (plot_key in d[\"y\"]) {\n        return d[\"y\"][plot_key];\n      }\n      if (y_key in d[\"y\"]) {\n        if (plot_key in d[\"y\"][y_key]) {\n          return d[\"y\"][y_key][plot_key];\n        }\n      }\n      return 0.0;\n    };\n\n    var bin_accessor = function(d) {\n      if (y_key && plot_key in d[y_key]) {\n        return d[y_key][plot_key];\n      } else {\n        if (plot_key in d) {\n          return d[plot_key];\n        }\n      }\n      return 0.0;\n    };\n\n    if (!skip_cumulative) {\n      var curve = d3.svg\n        .area()\n        .x(function(d) {\n          return x(d[\"time\"]);\n        })\n        .y1(function(d) {\n          return y(y_accessor(d));\n        })\n        .y0(function(d) {\n          return y(0);\n        })\n        .interpolate(\"step\");\n\n      svg\n        .append(\"path\")\n        .datum(time_series)\n        .classed(\"trend\", true)\n        .style(\"fill\", plot_color)\n        .style(\"stroke\", plot_color)\n        .attr(\"d\", curve)\n        .attr(\"data-plotid\", prefix + plot_key);\n    }\n\n    binned_array.forEach(function(d) {\n      svg\n        .append(\"circle\")\n        .attr(\"cx\", x(d[\"time\"]))\n        .attr(\"cy\", y(bin_accessor(d)))\n        .attr(\"r\", \"5\")\n        .classed(\"node\", true)\n        .style(\"fill\", plot_color)\n        .style(\"stroke\", plot_color)\n        .attr(\"title\", plot_key + \" : \" + bin_accessor(d));\n    });\n\n    var curve_year = d3.svg\n      .line()\n      .x(function(d) {\n        return x(d[\"time\"]);\n      })\n      .y(function(d) {\n        return y(bin_accessor(d));\n      })\n      .interpolate(\"cardinal\");\n\n    svg\n      .append(\"path\")\n      .datum(binned_array)\n      .classed(\"tracer\", true)\n      .style(\"stroke\", plot_color)\n      .attr(\"d\", curve_year)\n      .attr(\"data-curveid\", prefix + plot_key);\n  });\n\n  /* x-axis */\n  var x_axis = svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .style(\"font-size\", options.font_size)\n    .call(xAxis);\n\n  x_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(45)\")\n    .attr(\"dy\", \"1em\")\n    .attr(\"dx\", \"1em\");\n\n  x_axis\n    .append(\"text\")\n    .attr(\"x\", width)\n    .attr(\"dy\", \"-.5em\")\n    .style(\"text-anchor\", \"end\")\n    .style(\"font-size\", options.font_size)\n    .text(x_title);\n\n  /* y-axis*/\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .style(\"font-size\", options.font_size)\n    .call(yAxis)\n    .append(\"text\")\n    .style(\"font-size\", options.font_size)\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", 6)\n    .attr(\"dy\", \".71em\")\n    .style(\"text-anchor\", \"end\")\n    .text(y_title); // beta - alpha\n}\n\nmodule.exports.compute_node_degrees = hivtrace_compute_node_degrees;\nmodule.exports.export_csv_button = hivtrace_export_csv_button;\nmodule.exports.convert_to_csv = hivtrace_convert_to_csv;\nmodule.exports.betweenness_centrality = hivtrace_compute_betweenness_centrality;\nmodule.exports.betweenness_centrality_all_nodes_in_cluster = hivtrace_compute_betweenness_centrality_all_nodes_in_cluster;\nmodule.exports.cluster_adjacency_list = hivtrace_cluster_adjacency_list;\nmodule.exports.new_cluster_adjacency_list = hivtrace_new_cluster_adjacency_list;\nmodule.exports.analysis_settings = hivtrace_render_settings;\nmodule.exports.export_table_to_text = hiv_trace_export_table_to_text;\nmodule.exports.compute_local_clustering = hivtrace_compute_local_clustering_coefficients;\nmodule.exports.undefined = {};\nmodule.exports.too_large = {};\nmodule.exports.processing = {};\nmodule.exports.format_value = hivtrace_format_value;\nmodule.exports.polygon = hivtrace_generate_svg_polygon;\nmodule.exports.symbol = hivtrace_generate_svg_symbol;\nmodule.exports.cluster_dynamics = hivtrace_plot_cluster_dynamics;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc.js","var download = require(\"downloadjs\");\n\nvar datamonkey_error_modal = function(msg) {\n  $(\"#modal-error-msg\").text(msg);\n  $(\"#errorModal\").modal();\n};\n\nfunction b64toBlob(b64, onsuccess, onerror) {\n  var img = new Image();\n\n  img.onerror = onerror;\n\n  img.onload = function onload() {\n    var canvas = document.getElementById(\"hyphy-chart-canvas\");\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    var ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n    if (canvas.msToBlob) {\n      var blob = canvas.msToBlob(onsuccess);\n      onsuccess(blob);\n      window.navigator.msSaveBlob(blob, \"image.png\");\n    } else {\n      canvas.toBlob(onsuccess);\n    }\n  };\n\n  img.src = b64;\n}\n\nvar datamonkey_export_csv_button = function(data) {\n  data = d3.csv.format(data);\n  if (data !== null) {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\n      \"href\",\n      \"data:text/csv;charset=utf-8,\" + encodeURIComponent(data)\n    );\n    pom.setAttribute(\"download\", \"export.csv\");\n    pom.className = \"btn btn-default btn-sm\";\n    pom.innerHTML =\n      '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\nvar datamonkey_save_image = function(type, container) {\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  function get_styles(doc) {\n    function process_stylesheet(ss) {\n      try {\n        if (ss.cssRules) {\n          for (var i = 0; i < ss.cssRules.length; i++) {\n            var rule = ss.cssRules[i];\n            if (rule.type === 3) {\n              // Import Rule\n              process_stylesheet(rule.styleSheet);\n            } else {\n              // hack for illustrator crashing on descendent selectors\n              if (rule.selectorText) {\n                if (rule.selectorText.indexOf(\">\") === -1) {\n                  styles += \"\\n\" + rule.cssText;\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        console.log(\"Could not process stylesheet : \" + ss);\n      }\n    }\n\n    var styles = \"\",\n      styleSheets = doc.styleSheets;\n\n    if (styleSheets) {\n      for (var i = 0; i < styleSheets.length; i++) {\n        process_stylesheet(styleSheets[i]);\n      }\n    }\n\n    return styles;\n  }\n\n  var convert_svg_to_png = function(image_string) {\n    var image = document.getElementById(\"hyphy-chart-image\");\n\n    image.onload = function() {\n      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = \"#FFFFFF\";\n      context.fillRect(0, 0, image.width, image.height);\n      context.drawImage(image, 0, 0);\n      var img = canvas.toDataURL(\"image/png\");\n      var pom = document.createElement(\"a\");\n      pom.setAttribute(\"download\", \"image.png\");\n      pom.href = canvas.toDataURL(\"image/png\");\n      $(\"body\").append(pom);\n      pom.click();\n      pom.remove();\n    };\n\n    image.src = image_string;\n  };\n\n  var svg = $(container).find(\"svg\")[0];\n  if (!svg) {\n    svg = $(container)[0];\n  }\n\n  var styles = get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = new XMLSerializer()\n    .serializeToString(svg)\n    .replace(\"</style>\", \"<![CDATA[\" + styles + \"]]></style>\");\n  var rect = svg.getBoundingClientRect();\n  var doctype =\n    '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string =\n    \"data:image/svg+xml;base66,\" + encodeURIComponent(to_download);\n\n  if (navigator.msSaveBlob) {\n    // IE10\n    download(image_string, \"image.svg\", \"image/svg+xml\");\n  } else if (type == \"png\") {\n    b64toBlob(\n      image_string,\n      function(blob) {\n        var url = window.URL.createObjectURL(blob);\n        var pom = document.createElement(\"a\");\n        pom.setAttribute(\"download\", \"image.png\");\n        pom.setAttribute(\"href\", url);\n        $(\"body\").append(pom);\n        pom.click();\n        pom.remove();\n      },\n      function(error) {\n        console.log(error);\n      }\n    );\n  } else {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\"download\", \"image.svg\");\n    pom.setAttribute(\"href\", image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\nvar datamonkey_validate_date = function() {\n  // Check that it is not empty\n  if ($(this).val().length === 0) {\n    $(this).next(\".help-block\").remove();\n    $(this).parent().removeClass(\"has-success\");\n    $(this).parent().addClass(\"has-error\");\n\n    jQuery(\"<span/>\", {\n      class: \"help-block\",\n      text: \"Field is empty\"\n    }).insertAfter($(this));\n  } else if (isNaN(Date.parse($(this).val()))) {\n    $(this).next(\".help-block\").remove();\n    $(this).parent().removeClass(\"has-success\");\n    $(this).parent().addClass(\"has-error\");\n\n    jQuery(\"<span/>\", {\n      class: \"help-block\",\n      text: \"Date format should be in the format YYYY-mm-dd\"\n    }).insertAfter($(this));\n  } else {\n    $(this).parent().removeClass(\"has-error\");\n    $(this).parent().addClass(\"has-success\");\n    $(this).next(\".help-block\").remove();\n  }\n};\n\nfunction datamonkey_get_styles(doc) {\n  var styles = \"\",\n    styleSheets = doc.styleSheets;\n\n  if (styleSheets) {\n    for (var i = 0; i < styleSheets.length; i++) {\n      processStyleSheet(styleSheets[i]);\n    }\n  }\n\n  function processStyleSheet(ss) {\n    if (ss.cssRules) {\n      for (var i = 0; i < ss.cssRules.length; i++) {\n        var rule = ss.cssRules[i];\n        if (rule.type === 3) {\n          // Import Rule\n          processStyleSheet(rule.styleSheet);\n        } else {\n          // hack for illustrator crashing on descendent selectors\n          if (rule.selectorText) {\n            if (rule.selectorText.indexOf(\">\") === -1) {\n              styles += \"\\n\" + rule.cssText;\n            }\n          }\n        }\n      }\n    }\n  }\n  return styles;\n}\n\nfunction datamonkey_save_newick_to_file() {\n  var top_modal_container = \"#neighbor-tree-modal\";\n  var nwk = $(top_modal_container).data(\"tree\");\n  var pom = document.createElement(\"a\");\n  pom.setAttribute(\n    \"href\",\n    \"data:text/octet-stream;charset=utf-8,\" + encodeURIComponent(nwk)\n  );\n  pom.setAttribute(\"download\", \"nwk.txt\");\n  $(\"body\").append(pom);\n  pom.click();\n  pom.remove();\n}\n\nfunction datamonkey_convert_svg_to_png(image_string) {\n  var image = document.getElementById(\"image\");\n  image.src = image_string;\n\n  image.onload = function() {\n    var canvas = document.getElementById(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#FFFFFF\";\n    context.fillRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n    var img = canvas.toDataURL(\"image/png\");\n\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\"download\", \"phylotree.png\");\n    pom.href = canvas.toDataURL(\"image/png\");\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  };\n}\n\nfunction datamonkey_save_newick_tree(type) {\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  var tree_container = \"#tree_container\";\n  var svg = $(\"#tree_container\").find(\"svg\")[0];\n  var styles = datamonkey_get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = new XMLSerializer()\n    .serializeToString(svg)\n    .replace(\"</style>\", \"<![CDATA[\" + styles + \"]]></style>\");\n  var rect = svg.getBoundingClientRect();\n  var doctype =\n    '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string =\n    \"data:image/svg+xml;base66,\" + encodeURIComponent(to_download);\n\n  if (type == \"png\") {\n    datamonkey_convert_svg_to_png(image_string);\n  } else {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\"download\", \"phylotree.svg\");\n    pom.setAttribute(\"href\", image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_validate_email(email) {\n  if ($(this).find(\"input[name='receive_mail']\")[0].checked) {\n    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    if (regex.test($(this).find(\"input[name='mail']\").val())) {\n      // Give them green. They like that.\n      $(this).removeClass(\"has-error\");\n      $(this).addClass(\"has-success\");\n      $(this).next(\".help-block\").remove();\n    } else {\n      $(this).next(\".help-block\").remove();\n      $(this).removeClass(\"has-error\");\n      $(this).removeClass(\"has-success\");\n      $(this).addClass(\"has-error\");\n      var span = jQuery(\"<span/>\", {\n        class: \"help-block col-lg-9 pull-right\",\n        text: \"Invalid Email\"\n      }).insertAfter($(this));\n    }\n  } else {\n    $(this).removeClass(\"has-error\");\n    $(this).removeClass(\"has-success\");\n    $(this).next(\".help-block\").remove();\n  }\n}\n\nfunction datamonkey_describe_vector(vector, as_list) {\n  var d = {};\n\n  if (vector.length) {\n    vector.sort(d3.ascending);\n\n    var d = {\n      min: d3.min(vector),\n      max: d3.max(vector),\n      median: d3.median(vector),\n      Q1: d3.quantile(vector, 0.25),\n      Q3: d3.quantile(vector, 0.75),\n      mean: d3.mean(vector)\n    };\n  } else {\n    var d = {\n      min: null,\n      max: null,\n      median: null,\n      Q1: null,\n      Q3: null,\n      mean: null\n    };\n  }\n\n  if (as_list) {\n    d =\n      \"<pre>Range  :\" +\n      d[\"min\"] +\n      \"-\" +\n      d[\"max\"] +\n      \"\\n\" +\n      \"IQR    :\" +\n      d[\"Q1\"] +\n      \"-\" +\n      d[\"Q3\"] +\n      \"\\n\" +\n      \"Mean   :\" +\n      d[\"mean\"] +\n      \"\\n\" +\n      \"Median :\" +\n      d[\"median\"] +\n      \"\\n\" +\n      \"</pre>\";\n\n    /*d =\n    \"<dl class = 'dl-horizontal'>\" +\n    \"<dt>Range</dt><dd>\" + d['min'] + \"-\" + d['max'] + \"</dd>\" +\n    \"<dt>IQR</dt><dd>\" + d['Q1'] + \"-\" + d['Q3'] +  \"</dd>\" +\n    \"<dt>Mean</dt><dd>\" + d['mean'] +  \"</dd>\" +\n    \"<dt>Median</dt><dd>\" + d['median'] + \"</dd></dl>\";*/\n  }\n\n  return d;\n}\n\nfunction datamonkey_export_handler(data, filename, mimeType) {\n  function msieversion() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n      return true;\n    }\n    return false;\n  }\n\n  if (msieversion()) {\n    var IEwindow = window.open();\n    IEwindow.document.write(data);\n    IEwindow.document.close();\n    IEwindow.document.execCommand(\"SaveAs\", true, filename + \".csv\");\n    IEwindow.close();\n  } else {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\n      \"href\",\n      \"data:\" +\n        (mimeType || \"text/plain\") +\n        \";charset=utf-8,\" +\n        encodeURIComponent(data)\n    );\n    pom.setAttribute(\"download\", filename || \"download.tsv\");\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_table_to_text(table_id, sep) {\n  sep = sep || \"\\t\";\n  var header_row = [];\n  d3.select(table_id + \" thead\").selectAll(\"th\").each(function() {\n    header_row.push(d3.select(this).text());\n  });\n  var data_rows = [];\n  d3.select(table_id + \" tbody\").selectAll(\"tr\").each(function(d, i) {\n    data_rows.push([]);\n    d3.select(this).selectAll(\"td\").each(function() {\n      data_rows[i].push(d3.select(this).text());\n    });\n  });\n\n  return (\n    header_row.join(sep) +\n    \"\\n\" +\n    data_rows\n      .map(function(d) {\n        return d.join(sep);\n      })\n      .join(\"\\n\")\n  );\n}\n\nfunction datamonkey_capitalize(s) {\n  if (s.length > 0) {\n    return s[0].toUpperCase() + s.slice(1);\n  } else {\n    return s;\n  }\n}\n\nfunction datamonkey_count_partitions(json) {\n  try {\n    return _.keys(json).length;\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_sum(object, accessor) {\n  accessor =\n    accessor ||\n    function(value) {\n      return value;\n    };\n  return _.reduce(\n    object,\n    function(sum, value, index) {\n      return sum + accessor(value, index);\n    },\n    0\n  );\n}\n\nfunction datamonkey_count_sites_from_partitions(json) {\n  try {\n    return datamonkey_sum(json[\"partitions\"], function(value) {\n      return value[\"coverage\"][0].length;\n    });\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_filter_list(list, predicate, context) {\n  var result = {};\n  predicate = _.bind(predicate, context);\n  _.each(\n    list,\n    _.bind(function(value, key) {\n      if (predicate(value, key)) {\n        result[key] = value;\n      }\n    }, context)\n  );\n  return result;\n}\n\nfunction datamonkey_map_list(list, transform, context) {\n  var result = {};\n  transform = _.bind(transform, context);\n  _.each(\n    list,\n    _.bind(function(value, key) {\n      result[key] = transform(value, key);\n    }, context)\n  );\n  return result;\n}\n\nmodule.exports.errorModal = datamonkey_error_modal;\nmodule.exports.export_csv_button = datamonkey_export_csv_button;\nmodule.exports.save_image = datamonkey_save_image;\nmodule.exports.validate_date = datamonkey_validate_date;\n\nmodule.exports.save_newick_to_file = datamonkey_save_newick_to_file;\nmodule.exports.convert_svg_to_png = datamonkey_convert_svg_to_png;\nmodule.exports.save_newick_tree = datamonkey_save_newick_tree;\nmodule.exports.validate_email = datamonkey_validate_email;\nmodule.exports.describe_vector = datamonkey_describe_vector;\nmodule.exports.table_to_text = datamonkey_table_to_text;\nmodule.exports.export_handler = datamonkey_export_handler;\nmodule.exports.capitalize = datamonkey_capitalize;\nmodule.exports.countPartitionsJSON = datamonkey_count_partitions;\nmodule.exports.countSitesFromPartitionsJSON = datamonkey_count_sites_from_partitions;\nmodule.exports.sum = datamonkey_sum;\nmodule.exports.filter = datamonkey_filter_list;\nmodule.exports.map = datamonkey_map_list;\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/downloadjs/download.js\n// module id = 46\n// module chunks = 0","var d3 = require(\"d3\"),\n  _ = require(\"underscore\");\n\nfunction hivtrace_render_scatterplot(points, w, h, id, labels, dates) {\n  var _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\n  var _defaultFloatFormat = d3.format(\",.2r\");\n  var _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\n\n  var margin = {\n      top: 10,\n      right: 10,\n      bottom: 100,\n      left: 100\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var x = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(\n      d3.extent(points, function(p) {\n        return p.x;\n      })\n    )\n    .range([0, width]);\n\n  var y = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(\n      d3.extent(points, function(p) {\n        return p.y;\n      })\n    )\n    .range([height, 0]);\n\n  var xAxis = d3.svg\n    .axis()\n    .scale(x)\n    .orient(\"bottom\")\n    .tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var yAxis = d3.svg\n    .axis()\n    .scale(y)\n    .orient(\"left\")\n    .tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (!histogram_svg.empty()) {\n    histogram_svg.remove();\n  }\n\n  histogram_svg = d3\n    .select(id)\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  points = histogram_svg.selectAll(\"circle\").data(points);\n  points.enter().append(\"circle\");\n\n  points\n    .attr(\"cx\", function(d) {\n      return x(d.x);\n    })\n    .attr(\"cy\", function(d) {\n      return y(d.y);\n    })\n    .attr(\"r\", 3)\n    .classed(\"node scatter\", true);\n\n  points.each(function(d) {\n    if (\"title\" in d) {\n      d3.select(this).append(\"title\").text(d.title);\n    }\n  });\n\n  var x_axis = histogram_svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n  x_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(-45)\")\n    .attr(\"dx\", \"-.5em\")\n    .attr(\"dy\", \".25em\")\n    .style(\"text-anchor\", \"end\");\n  x_axis\n    .append(\"text\")\n    .text(labels.x)\n    .attr(\"transform\", \"translate(\" + width + \",0)\")\n    .attr(\"dy\", \"-1em\")\n    .attr(\"text-anchor\", \"end\");\n\n  var y_axis = histogram_svg\n    .append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .attr(\"transform\", \"translate(0,\" + 0 + \")\")\n    .call(yAxis);\n\n  y_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(-45)\")\n    .attr(\"dx\", \"-.5em\")\n    .attr(\"dy\", \".25em\")\n    .style(\"text-anchor\", \"end\");\n  y_axis\n    .append(\"text\")\n    .text(labels.y)\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"dy\", \"1em\")\n    .attr(\"text-anchor\", \"end\");\n}\n\nmodule.exports.scatterPlot = hivtrace_render_scatterplot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/scatterplot.js","var d3 = require(\"d3\"),\n  _ = require(\"underscore\");\n\nfunction hivtrace_histogram(graph, histogram_tag, histogram_label) {\n  var defaultFloatFormat = d3.format(\",.2f\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  hivtrace_render_histogram(\n    graph[\"Degrees\"][\"Distribution\"],\n    graph[\"Degrees\"][\"fitted\"],\n    histogram_w,\n    histogram_h,\n    histogram_tag\n  );\n\n  var label =\n    \"Network degree distribution is best described by the <strong>\" +\n    graph[\"Degrees\"][\"Model\"] +\n    \"</strong> model, with &rho; of \" +\n    defaultFloatFormat(graph[\"Degrees\"][\"rho\"]);\n\n  if (graph[\"Degrees\"][\"rho CI\"] != undefined) {\n    label +=\n      \" (95% CI \" +\n      defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][0]) +\n      \" - \" +\n      defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][1]) +\n      \")\";\n  }\n\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_histogram_distances(graph, histogram_tag, histogram_label) {\n  var defaultFloatFormat = d3.format(\",.3p\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  var edge_lengths = _.map(graph[\"Edges\"], function(edge) {\n    return edge.length;\n  });\n\n  hivtrace_render_histogram_continuous(\n    edge_lengths,\n    histogram_w,\n    histogram_h,\n    histogram_tag\n  );\n\n  var label = \"Genetic distances among linked nodes.\";\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_render_histogram_continuous(data, w, h, id) {\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 10\n    },\n    width = w - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  if (data.length > 0) {\n    var histogram_data = d3.layout.histogram()(data);\n\n    var x = d3.scale.linear().domain(d3.extent(data));\n\n    var y = d3.scale\n      .linear()\n      .domain([\n        0,\n        d3.max(\n          _.map(histogram_data, function(b) {\n            return b.y;\n          })\n        )\n      ])\n      .range([height, 0]);\n\n    margin.left += 10 * Math.ceil(Math.log10(y.domain()[1]));\n    width -= margin.left;\n    x.range([0, width]);\n\n    var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n\n    var yAxis = d3.svg.axis().scale(y).orient(\"left\");\n\n    histogram_data.splice(0, 0, {\n      x: x.domain()[0],\n      y: 0,\n      dx: 0\n    });\n    histogram_data.splice(histogram_data.length, 0, {\n      x: x.domain()[1],\n      y: 0,\n      dx: 0\n    });\n\n    histogram_svg = d3\n      .select(id)\n      .insert(\"svg\", \".histogram-label\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n      .datum(histogram_data);\n\n    var histogram_line = d3.svg\n      .line()\n      .x(function(d) {\n        return x(d.x + d.dx);\n      })\n      .y(function(d) {\n        return y(d.y);\n      })\n      .interpolate(\"step-before\");\n\n    histogram_svg.selectAll(\"path\").remove();\n    histogram_svg\n      .append(\"path\")\n      .attr(\"d\", function(d) {\n        return histogram_line(d) + \"Z\";\n      })\n      .attr(\"class\", \"histogram\");\n\n    var x_axis = histogram_svg\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n    x_axis\n      .selectAll(\"text\")\n      .attr(\"transform\", \"rotate(45)\")\n      .attr(\"dx\", \"1em\")\n      .attr(\"dy\", \"0.5em\");\n\n    var y_axis = histogram_svg\n      .append(\"g\")\n      .attr(\"class\", \"y axis\")\n      //.attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(yAxis);\n  }\n}\n\nfunction hivtrace_render_histogram(counts, fit, w, h, id) {\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 30\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var x = d3.scale.linear().domain([0, counts.length + 1]).range([0, width]);\n\n  var y = d3.scale.log().domain([1, d3.max(counts)]).range([height, 0]);\n\n  var total = d3.sum(counts);\n\n  var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  var data_to_plot = counts.map(function(d, i) {\n    return {\n      x: i + 1,\n      y: d + 1\n    };\n  });\n  data_to_plot.push({\n    x: counts.length + 1,\n    y: 1\n  });\n  data_to_plot.push({\n    x: 0,\n    y: 1\n  });\n  data_to_plot.push({\n    x: 0,\n    y: counts[0] + 1\n  });\n\n  histogram_svg = d3\n    .select(id)\n    .insert(\"svg\", \".histogram-label\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    .datum(data_to_plot);\n\n  var histogram_line = d3.svg\n    .line()\n    .x(function(d) {\n      return x(d.x);\n    })\n    .y(function(d) {\n      return y(d.y);\n    })\n    .interpolate(\"step-before\");\n\n  histogram_svg.selectAll(\"path\").remove();\n  histogram_svg\n    .append(\"path\")\n    .attr(\"d\", function(d) {\n      return histogram_line(d) + \"Z\";\n    })\n    .attr(\"class\", \"histogram\");\n\n  if (fit) {\n    var fit_line = d3.svg\n      .line()\n      .interpolate(\"linear\")\n      .x(function(d, i) {\n        return x(i + 1) + (x(i + 1) - x(i)) / 2;\n      })\n      .y(function(d) {\n        return y(1 + d * total);\n      });\n    histogram_svg\n      .append(\"path\")\n      .datum(fit)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", function(d) {\n        return fit_line(d);\n      });\n  }\n\n  var x_axis = histogram_svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n  x_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(45)\")\n    .attr(\"dx\", \"1em\")\n    .attr(\"dy\", \"0.5em\");\n}\n\nexports.histogram = hivtrace_histogram;\nexports.histogramDistances = hivtrace_histogram_distances;\n\n\n\n// WEBPACK FOOTER //\n// ./src/histogram.js"],"sourceRoot":""}