{"version":3,"sources":["webpack:///./src/entry.js","webpack:///./~/font-awesome/css/font-awesome.css","webpack:///./src/hivtrace.css","webpack:///./src/hivtrace.js","webpack:///./~/bootstrap/dist/css/bootstrap.css","webpack:///./src/clusternetwork.js","webpack:///./src/misc.js","webpack:///./src/helpers.js","webpack:///./~/downloadjs/download.js","webpack:///./src/scatterplot.js","webpack:///./~/topojson/dist/topojson.node.js","webpack:///./~/topojson/~/topojson-client/dist/topojson-client.js","webpack:///./~/topojson/~/topojson-server/dist/topojson-server.js","webpack:///./~/topojson/~/topojson-simplify/dist/topojson-simplify.js","webpack:///./src/histogram.js"],"names":[],"mappings":"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ClD;AACA;;AAEA;AACA;AACA,sDAAqD;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAAyC;AACzC,wDAAuD;AACvD,iEAAgE;AAChE,qDAAoD;AACpD,8DAA6D;AAC7D,qDAAoD;AACpD,8DAA6D;AAC7D;AACA;AACA,aAAY;AACZ;;AAEA;AACA;;AAEA;AACA,wBAAuB;AACvB,2BAA0B;AAC1B,yBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,oEAAmE,gCAAgC,EAAE;AACrG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,kCAAkC,EAAE;AACjE;AACA;AACA;;AAEA;AACA;AACA,6BAA4B,wDAAwD,EAAE;;AAEtF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+DAA8D,OAAO;AACrE,WAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAkD,cAAc;AAChE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iEAAgE;AAChE,2CAA0C;AAC1C,gEAA+D;AAC/D,6CAA4C;AAC5C;AACA;;AAEA;;AAEA;AACA,0BAAyB,uBAAuB;AAChD,0BAAyB,0EAA0E,EAAE;;AAErG;AACA;;AAEA;AACA;AACA;AACA,yBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;AACA,yBAAwB;AACxB;AACA;;AAEA;;AAEA;AACA;AACA,iEAAgE;AAChE,uCAAsC;AACtC,oDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;;AAEA;AACA,6CAA4C,8BAA8B;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,YAAW;AACX,UAAS;AACT;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB;AACvB,2CAA0C,WAAW,EAAE;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,iCAAgC,cAAc,EAAE;AAChD;;AAEA;AACA,4EAA2E,gBAAgB,EAAE;AAC7F;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAqC,6BAA6B,iBAAiB,EAAE,EAAE;AACvF;;AAEA;;AAEA;AACA,mEAAkE,OAAO;AACzE,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA2C,gFAAgF;AAC3H,+BAA8B,8DAA8D;AAC5F,oCAAmC,uEAAuE;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kEAAiE;AACjE;AACA,0EAAyE;AACzE,uCAAsC;AACtC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA8C,cAAc;;AAE5D,EAAC;;;;;;;ACxfD;AACA;AACA;AACA;AACA,mDAAkD;AAClD,EAAC,4BAA4B;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAqC,qCAAqC,EAAE;AAC5E,yBAAwB,2BAA2B,EAAE;AACrD,8BAA6B,mCAAmC,EAAE;AAClE,8BAA6B,mBAAmB,EAAE;AAClD,mCAAkC,2BAA2B,EAAE;AAC/D,2BAA0B,2BAA2B,EAAE;AACvD,gCAA+B,gCAAgC;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB,UAAU;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB,UAAU;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,IAAI;AAChD,8BAA6B,IAAI,KAAK,IAAI;AAC1C;AACA;AACA,oBAAmB,IAAI;AACvB,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAqC,OAAO;AAC5C;AACA;;AAEA,gCAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD;AACA;AACA;AACA,qDAAoD;AACpD;;AAEA,sCAAqC,OAAO;AAC5C;AACA;;AAEA,gCAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4CAA2C,OAAO;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,sCAAqC,OAAO;AAC5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA,gCAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,UAAS,OAAO;AAChB;AACA;AACA;AACA,+BAA8B,YAAY;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAmD,aAAa;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAA+B,OAAO;AACtC,qBAAoB;AACpB;AACA,gCAA+B,OAAO;AACtC,qBAAoB;AACpB;;AAEA;AACA;;AAEA,gCAA+B,OAAO;AACtC;AACA;AACA;AACA,MAAK;AACL;;AAEA,gCAA+B,OAAO;AACtC;AACA,qBAAoB;AACpB;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAuC;AACvC,oCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAU,UAAU;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAU,UAAU;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oCAAmC;;AAEnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAqC,uCAAuC,EAAE;AAC9E,8BAA6B,8BAA8B,EAAE;AAC7D,mCAAkC,kCAAkC,EAAE;AACtE,2BAA0B,kCAAkC,EAAE;AAC9D,gCAA+B,uCAAuC;AACtE;;AAEA;AACA,qCAAoC,OAAO;AAC3C,gBAAe;AACf;AACA;AACA;;AAEA;AACA,qCAAoC,OAAO;AAC3C,gBAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAuD,WAAW;AAClE,iBAAgB,mBAAmB;AACnC;AACA;AACA,mBAAkB;AAClB;AACA;AACA;;AAEA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA,qDAAoD;AACpD;AACA;AACA,kCAAiC,sCAAsC,OAAO;AAC9E;AACA;;AAEA;AACA,8BAA6B;AAC7B,uDAAsD;AACtD,kEAAiE;AACjE,UAAS,2CAA2C;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gEAA+D;AAC/D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAqC,wCAAwC,EAAE;AAC/E,yBAAwB,8CAA8C,EAAE;AACxE,8BAA6B,kDAAkD,EAAE;AACjF,8BAA6B,+BAA+B,EAAE;AAC9D,mCAAkC,mCAAmC,EAAE;AACvE,2BAA0B,kCAAkC,EAAE;AAC9D,gCAA+B,sCAAsC;AACrE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAqC,qCAAqC,EAAE;AAC5E,8BAA6B,4BAA4B,EAAE;AAC3D,mCAAkC,gCAAgC,EAAE;AACpE,2BAA0B,gCAAgC,EAAE;AAC5D,gCAA+B,qCAAqC;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+CAA8C,cAAc;;AAE5D,EAAC;;;;;;;ACn0BD;AACA;AACA;AACA;AACA,mDAAkD;AAClD,EAAC,2CAA2C;;AAE5C;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yEAAwE;AACxE,+CAA8C;AAC9C,4DAA2D;AAC3D,oDAAmD;AACnD,8DAA6D;AAC7D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA2C,+EAA+E;AAC1H,oCAAmC,mDAAmD;AACtF,yCAAwC,4DAA4D;AACpG,iCAAgC,oDAAoD;AACpF,sCAAqC,8DAA8D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB,4BAA4B,IAAI;AACzD;AACA;AACA;AACA;AACA,iCAAgC,iCAAiC,IAAI;AACrE;AACA;AACA;AACA;AACA,iCAAgC,6CAA6C,IAAI;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qEAAoE;AACpE,wCAAuC;AACvC,qDAAoD;AACpD;AACA;;AAEA;AACA,qCAAoC,OAAO;AAC3C,uDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,qDAAoD,8BAA8B;AAClF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAqC,OAAO;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA,MAAK;AACL,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;A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","file":"hivtrace.js","sourcesContent":["window.jQuery = window.$ = $;\n\nrequire(\"font-awesome/css/font-awesome.css\");\nrequire(\"./hivtrace.css\");\nrequire(\"bootstrap\");\n\nvar hivtrace = require(\"./hivtrace.js\");\n\n// Create new hyphy-vision export\nwindow.hivtrace = hivtrace;\n\n\n\n// WEBPACK FOOTER //\n// ./src/entry.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/font-awesome/css/font-awesome.css\n// module id = 5\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hivtrace.css\n// module id = 15\n// module chunks = 0","import Bootstrap from \"bootstrap/dist/css/bootstrap.css\";\nimport { clusterNetwork, graphSummary } from \"./clusternetwork.js\";\nimport { histogram, histogramDistances } from \"./histogram.js\";\nimport { scatterPlot } from \"./scatterplot.js\";\n\nvar misc = require(\"./misc.js\");\nvar helpers = require(\"./helpers.js\");\n\nmodule.exports.clusterNetwork = clusterNetwork;\nmodule.exports.graphSummary = graphSummary;\nmodule.exports.histogram = histogram;\nmodule.exports.histogramDistances = histogramDistances;\nmodule.exports.helpers = helpers;\nmodule.exports.misc = misc;\nmodule.exports.scatterPlot = scatterPlot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/hivtrace.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bootstrap/dist/css/bootstrap.css\n// module id = 31\n// module chunks = 0","var d3 = require(\"d3\"),\n  _ = require(\"underscore\"),\n  misc = require(\"misc\"),\n  helpers = require(\"helpers\"),\n  scatterPlot = require(\"scatterplot\"),\n  topojson = require (\"topojson\");\n\nvar _networkGraphAttrbuteID = \"patient_attribute_schema\";\nvar _networkNodeAttributeID = \"patient_attributes\";\nvar _networkNodeIDField     = \"hivtrace_node_id\";\nvar _networkMissing = \"missing\";\nvar _networkMissingOpacity = \"0.1\";\nvar _networkMissingColor = \"#999\";\nvar _networkContinuousColorStops = 9;\nvar _networkShapeOrdering = [\n  \"circle\",\n  \"square\",\n  \"hexagon\",\n  \"diamond\",\n  \"cross\",\n  \"octagon\",\n  \"ellipse\",\n  \"pentagon\"\n];\nvar _defaultFloatFormat = d3.format(\",.2r\");\nvar _defaultPercentFormat = d3.format(\",.3p\");\nvar _defaultDateFormats = [\n  d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\"),\n  d3.time.format(\"%Y-%m-%dT%H:%M:%S.%LZ\")\n];\nvar _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\nvar _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\nvar _defaultDateViewFormatSlider = d3.time.format(\"%Y-%m-%d\");\nvar _networkDotFormatPadder = d3.format(\"08d\");\n\nvar _networkCategoricalBase = [\n  \"#a6cee3\",\n  \"#1f78b4\",\n  \"#b2df8a\",\n  \"#33a02c\",\n  \"#fb9a99\",\n  \"#e31a1c\",\n  \"#fdbf6f\",\n  \"#ff7f00\",\n  \"#cab2d6\",\n  \"#6a3d9a\",\n  \"#ffff99\",\n  \"#b15928\"\n];\n\n/*\nvar _networkCategoricalDashPatterns = [\n  \"1 0\",\n  \"4 2\",\n  \"2 4\",\n  \"1 1\"\n];\n*/\n\nvar _networkCategorical = [];\n\n_.each([0, -0.5, 0.5], function(k) {\n  _.each(_networkCategoricalBase, function(s) {\n    _networkCategorical.push(d3.rgb(s).darker(k).toString());\n  });\n});\n\nvar _maximumValuesInCategories = _networkCategorical.length;\n\nvar _networkSequentialColor = {\n  2: [\"#feb24c\", \"#e31a1c\"],\n  3: [\"#ffeda0\", \"#feb24c\", \"#f03b20\"],\n  4: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#e31a1c\"],\n  5: [\"#ffffb2\", \"#fecc5c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  6: [\"#ffffb2\", \"#fed976\", \"#feb24c\", \"#fd8d3c\", \"#f03b20\", \"#bd0026\"],\n  7: [\n    \"#ffffb2\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  8: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#b10026\"\n  ],\n  9: [\n    \"#ffffcc\",\n    \"#ffeda0\",\n    \"#fed976\",\n    \"#feb24c\",\n    \"#fd8d3c\",\n    \"#fc4e2a\",\n    \"#e31a1c\",\n    \"#bd0026\",\n    \"#800026\"\n  ]\n};\n\nvar _networkPresetColorSchemes = {\n  trans_categ: {\n    \"MSM-Male\": \"#1f78b4\",\n    \"MSM-Unknown sex\": \"#1f78b4\",\n    \"Heterosexual Contact-Male\": \"#e31a1c\",\n    \"Heterosexual Contact-Female\": \"#e31a1c\",\n    \"Heterosexual Contact-Unknown sex\": \"#e31a1c\",\n    \"IDU-Male\": \"#33a02c\",\n    \"MSM & IDU-Male\": \"#33a02c\",\n    \"IDU-Female\": \"#33a02c\",\n    \"IDU-Unknown sex\": \"#33a02c\",\n    \"Other/Unknown-Male\": \"#636363\",\n    \"Other/Unknown-Female\": \"#636363\",\n    \"Other-Male\": \"#636363\",\n    \"Other-Female\": \"#636363\",\n    Missing: \"#636363\",\n    \"\": \"#636363\",\n    \"Other/Unknown-Unknown sex\": \"#636363\",\n    Perinatal: \"#ff7f00\",\n    \"Other/Unknown-Child\": \"#ff7f00\",\n    \"Other-Child\": \"#ff7f00\"\n  },\n  race: {\n    \"Asian\": \"#1f77b4\",\n    \"Black/African American\": \"#bcbd22\",\n    \"Hispanic/Latino\": \"#9467bd\",\n    \"American Indian/Alaska Native\": \"#2ca02c\",\n    \"Native Hawaiian/Other Pacific Islander\": \"#17becf\",\n    \"Multiple Races\": \"#e377c2\",\n    \"Unknown race\": \"#999\",\n    Missing: \"#999\",\n    missing: \"#999\",\n    White: \"#d62728\"\n  }\n};\n\nvar _networkPresetShapeSchemes = {\n  birth_sex: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    Unknown: \"diamond\"\n  },\n  race: {\n    Asian: \"hexagon\",\n    \"Black/African American\": \"square\",\n    \"Hispanic/Latino\": \"triangle\",\n    \"American Indian/Alaska Native\": \"pentagon\",\n    \"Native Hawaiian/Other Pacific Islander\": \"octagon\",\n    \"Multiple Races\": \"diamond\",\n    \"Unknown race\": \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\",\n    White: \"ellipse\"\n  },\n  current_gender: {\n    Male: \"square\",\n    Female: \"ellipse\",\n    \"Transgender-Male to Female\": \"hexagon\",\n    \"Transgender-Female to Male\": \"pentagon\",\n    \"Additional Gender Identity\": \"diamond\",\n    Unknown: \"diamond\",\n    Missing: \"diamond\",\n    missing: \"diamond\"\n  }\n};\n\n// Constants for the map.\n\n\n// TODO: convert and save this data rather than do it each time.\n\n\nvar hivtrace_cluster_depthwise_traversal = function(\n  nodes,\n  edges,\n  edge_filter,\n  save_edges,\n  seed_nodes\n) {\n  var clusters = [],\n    adjacency = {},\n    by_node = {};\n\n  seed_nodes = seed_nodes || nodes;\n\n  _.each(nodes, function(n) {\n    n.visited = false;\n    adjacency[n.id] = [];\n  });\n\n  if (edge_filter) {\n    edges = _.filter(edges, edge_filter);\n  }\n\n  _.each(edges, function(e) {\n    try {\n      adjacency[nodes[e.source].id].push([nodes[e.target], e]);\n      adjacency[nodes[e.target].id].push([nodes[e.source], e]);\n    } catch (err) {\n      console.log(\n        \"Edge does not map to an existing node \" + e.source + \" to \" + e.target\n      );\n      throw \"Edge does not map to an existing node \" +\n        e.source +\n        \" to \" +\n        e.target;\n    }\n  });\n\n  var traverse = function(node) {\n    if (!(node.id in by_node)) {\n      clusters.push([node]);\n      by_node[node.id] = clusters.length - 1;\n      if (save_edges) {\n        save_edges.push([]);\n      }\n    }\n    node.visited = true;\n\n    _.each(adjacency[node.id], function(neighbor) {\n      if (!neighbor[0].visited) {\n        by_node[neighbor[0].id] = by_node[node.id];\n        clusters[by_node[neighbor[0].id]].push(neighbor[0]);\n        if (save_edges) {\n          save_edges[by_node[neighbor[0].id]].push(neighbor[1]);\n        }\n        traverse(neighbor[0]);\n      }\n    });\n  };\n\n  _.each(seed_nodes, function(n) {\n    if (!n.visited) {\n      traverse(n);\n    }\n  });\n\n  return clusters;\n};\n\nvar _networkUpperBoundOnDate = new Date().getFullYear();\nvar _networkCDCDateField = \"hiv_aids_dx_dt\";\n\nvar hivtrace_cluster_network_graph = function(\n  json,\n  network_container,\n  network_status_string,\n  network_warning_tag,\n  button_bar_ui,\n  attributes,\n  filter_edges_toggle,\n  clusters_table,\n  nodes_table,\n  parent_container,\n  options\n) {\n  // [REQ] json                        :          the JSON object containing network nodes, edges, and meta-information\n  // [REQ] network_container           :          the CSS selector of the DOM element where the SVG containing the network will be placed (e.g. '#element')\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] network_warning_tag         :          the CSS selector of the DOM element where the any warning messages would go (e.g. '#element')\n  // [OPT] button_bar_ui               :          the ID of the control bar which can contain the following elements (prefix = button_bar_ui value)\n  //                                                - [prefix]_cluster_operations_container : a drop-down for operations on clusters\n  //                                                - [prefix]_attributes :  a drop-down for operations on attributes\n  //                                                - [prefix]_filter : a text box used to search the graph\n  // [OPT] network_status_string       :          the CSS selector of the DOM element where the text describing the current state of the network is shown (e.g. '#element')\n  // [OPT] attributes                  :          A JSON object with mapped node attributes\n\n  // if schema is not set, set to empty dictionary\n  if (!json[_networkGraphAttrbuteID]) {\n    json[_networkGraphAttrbuteID] = {};\n  }\n\n  // annotate each node with patient_attributes if does not exist\n  json.Nodes.forEach(function(n) {\n    if(!n[_networkNodeAttributeID]) {\n      n[_networkNodeAttributeID] = [];\n    }\n  });\n\n  var self = {};\n\n  self._is_CDC_ = options && options[\"no_cdc\"] ? false : true;\n  self.ww =\n    options && options[\"width\"]\n      ? options[\"width\"]\n      : d3.select(parent_container).property(\"clientWidth\");\n  self.container = network_container;\n  self.nodes = [];\n  self.edges = [];\n  self.clusters = [];\n  self.cluster_sizes = [];\n  self.cluster_mapping = {};\n  self.percent_format = _defaultPercentFormat;\n  self.missing = _networkMissing;\n\n\n  if (options && _.isFunction(options[\"init_code\"])) {\n    options[\"init_code\"].call(null, self, options);\n  }\n\n  self.dom_prefix =\n    options && options[\"prefix\"] ? options[\"prefix\"] : \"hiv-trace\";\n  self.extra_cluster_table_columns =\n    options && options[\"cluster-table-columns\"]\n      ? options[\"cluster-table-columns\"]\n      : null;\n  self.subcluster_table = null;\n\n  if (self._is_CDC_) {\n    self.displayed_node_subset = [_networkNodeIDField, \"trans_categ\", \"race\", \"hiv_aids_dx_dt\", \"cur_city_name\"];\n    self.subcluster_table =\n      options && options[\"subcluster-table\"]\n        ? d3.select(options[\"subcluster-table\"])\n        : null;\n    self.extra_subcluster_table_columns = null;\n    var cdc_extra = [\n      {\n        description: {\n          value: \"Cases dx within 36 months\",\n          sort: function(c) {\n            return c.value.length ? c.value[0] : 0;\n          },\n          help: \"Number of cases diagnosed in the past 36 months connected only through cases diagnosed within the past 36 months\"\n        },\n        generator: function(cluster) {\n          return {\n            html: true,\n            value: cluster.recent_nodes,\n            format: function(v) {\n              if (v.length) {\n                return v.join(\", \");\n              } else {\n                return \"\";\n              }\n            }\n          };\n        }\n      },\n      {\n        description: {\n          value: \"Cases dx within 12 months\",\n          sort: \"value\",\n          presort : \"desc\",\n          help:\n            \"Number of cases diagnosed in the past 12 months connected only through cases diagnosed within the past 36 months\"\n        },\n        generator: function(cluster) {\n          return {\n            html: true,\n            value: cluster.priority_score,\n            format: function(v) {\n              if (v.length) {\n                var str = v.join(\", \");\n                if (v[0] >= 3) {\n                  var color = v[0] >= 5 ? 'red' : 'orange';\n                  return (\n                    \"<span style='color:\" + color + \"'>\" + str + \"</span>\"\n                  );\n                }\n                return str;\n              }\n              return \"\";\n            }\n          };\n        }\n      }\n    ];\n\n    if (self.subcluster_table) {\n      self.extra_subcluster_table_columns = cdc_extra;\n    } else {\n      if (self.extra_cluster_table_columns) {\n        self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat(\n          cdc_extra\n        );\n      } else {\n        self.extra_cluster_table_columns = cdc_extra;\n      }\n    }\n  }\n\n  self.extra_node_table_columns =\n    options && options[\"node-table-columns\"]\n      ? options[\"node-table-columns\"]\n      : self._is_CDC_\n        ? [\n            {\n              description: {\n                value: \"Recent and Rapid\",\n                sort: \"value\",\n                help:\n                  \"Is the node a member of a regular or recent & rapid subcluster?\"\n              },\n              generator: function(node) {\n                return {\n                  callback: function(element, payload) {\n                    //payload = _.filter (payload, function (d) {return d});\n                    var this_cell = d3.select(element);\n\n                    var data_to_use = [\n                      [payload[0][0], payload[0][1], payload[0][2]],\n                      [payload[1][0] ? \"36 months\" : \"\", payload[1][1]],\n                      [payload[2][0] ? \"12 months\" : \"\", payload[2][1]],\n                      [\n                        payload.length > 3 && payload[3][0]\n                          ? \"Recent cluster ≥ 3\"\n                          : \"\",\n                        payload.length > 3 ? payload[3][1] : null\n                      ]\n                    ];\n\n                    var buttons = this_cell.selectAll(\"span\").remove();\n\n                    _.each(data_to_use, function(button_text) {\n                      //self.open_exclusive_tab_view (cluster_id)\n                      if (button_text[0].length) {\n                        var button_obj = this_cell\n                          .append(\"span\")\n                          .classed(\"btn btn-xs btn-node-property\", true)\n                          .classed(button_text[1], true)\n                          .text(button_text[0]);\n\n                        if (_.isFunction(button_text[2])) {\n                          button_obj.on(\"click\", button_text[2]);\n                        } else {\n                          button_obj.attr(\"disabled\", true);\n                        }\n                      }\n                    });\n                  },\n                  value: function() {\n                    return [\n                      [\n                        node.subcluster ? \"Subcluster \" + node.subcluster : \"\",\n                        \"btn-primary\",\n                        node.subcluster\n                          ? function() {\n                              self.view_subcluster(\n                                node.subcluster,\n                                function(n) {\n                                  return n.subcluster == node.subcluster;\n                                },\n                                \"Subcluster \" + node.subcluster\n                              );\n                            }\n                          : null\n                      ],\n\n                      [node.priority_flag == 3, \"btn-warning\"],\n                      [node.priority_flag == 1, \"btn-danger\"],\n                      [node.priority_flag == 2, \"btn-danger\"]\n                    ];\n                  }\n                };\n              }\n            }\n          ]\n        : null;\n\n  self.colorizer = {\n    selected: function(d) {\n      return d == \"selected\" ? d3.rgb(51, 122, 183) : \"#FFF\";\n    }\n  };\n\n  self.subcluster_threshold =\n    options && options[\"subcluster-thershold\"]\n      ? options[\"subcluster-thershold\"]\n      : 0.005;\n  self.today = options && options[\"today\"] ? options[\"today\"] : new Date();\n\n  self.node_shaper = {\n    id: null,\n    shaper: function() {\n      return \"circle\";\n    }\n  };\n  (self.filter_edges = true), (self.hide_hxb2 = false), (self.charge_correction = 5), (self.margin = {\n    top: 20,\n    right: 10,\n    bottom: 30,\n    left: 10\n  }), (self.width =\n    self.ww - self.margin.left - self.margin.right), (self.height =\n    self.width * 9 / 16), (self.cluster_table = d3.select(\n    clusters_table\n  )), (self.node_table = d3.select(\n    nodes_table\n  )), (self.needs_an_update = false), (self.json = json), (self.hide_unselected = false), (self.show_percent_in_pairwise_table = false), (self.gradient_id = 0);\n\n  self._calc_country_nodes = function (options) {\n      if (options && \"country-centers\" in options) {\n            self.mapProjection = d3.geo.mercator().translate([self.margin.left + self.width/2, self.margin.top + self.height/2]).scale(150 * self.width / 960);\n            _.each (self.countryCentersObject, function (value) {\n                value.countryXY = self.mapProjection ([value.longt, value.lat]);\n     });\n    }\n  };\n\n  if (options && \"country-centers\" in options && \"country-outlines\" in options) {\n    self.countryCentersObject = options[\"country-centers\"];\n    self.countryOutlines = options[\"country-outlines\"];\n    self._calc_country_nodes (options);\n    //console.log (self.countryCentersObject);\n    self.showing_on_map = options.showing_on_map;\n    //console.log (self.showing_on_map);\n  } else {\n    self.countryCentersObject = null;\n    self.showing_on_map = false;\n  }\n\n  self._additional_node_pop_fields = [];\n  /** this array contains fields that will be appended to node pop-overs in the network tab\n      they will precede all the fields that are shown based on selected labeling */\n\n  if (options && \"minimum size\" in options) {\n    self.minimum_cluster_size = options[\"minimum size\"];\n  } else {\n    if (self._is_CDC_) {\n      self.minimum_cluster_size = 5;\n    } else {\n      self.minimum_cluster_size = 0;\n    }\n  }\n\n  if (options && \"cluster-time\" in options) {\n    self.cluster_time_scale = options[\"cluster-time\"];\n  }\n\n  if (self._is_CDC_) {\n    self._additional_node_pop_fields.push(_networkCDCDateField);\n    self.cluster_time_scale = self.cluster_time_scale || _networkCDCDateField;\n  }\n\n  if (options && \"core-link\" in options) {\n    self.core_link_length = options[\"core-link\"];\n  } else {\n    self.core_link_length = -1;\n  }\n\n  if (options && \"edge-styler\" in options) {\n    self.additional_edge_styler = options[\"edge-styler\"];\n  } else {\n    self.additional_edge_styler = null;\n  }\n\n  self.filter_by_size = function(cluster) {\n    return cluster.children.length >= self.minimum_cluster_size;\n  };\n\n  self.cluster_filtering_functions = { size: self.filter_by_size };\n  self.cluster_display_filter = function(cluster) {\n    return _.every(self.cluster_filtering_functions, function(filter) {\n      return filter(cluster);\n    });\n  };\n\n  self.primary_graph = options && \"secondary\" in options ? false : true;\n  self.initial_packed =\n    options && options[\"initial_layout\"] == \"tiled\" ? false : true;\n\n  self.recent_rapid_definition = function(network, date) {\n    date = date || self.today;\n    var subcluster_enum = [\n      \"Subcluster\", // 0\n      \"12 months (on ar after \" + // 1\n        _defaultDateViewFormat(_n_months_ago(date, 12)) +\n        \")\",\n      \"12 months (on ar after \" + // 2\n        _defaultDateViewFormat(_n_months_ago(date, 12)) +\n        \") and R&R subcluster\",\n      \"36 months (on ar after \" + // 3\n        _defaultDateViewFormat(_n_months_ago(date, 36)) +\n        \")\",\n      \"Future node (after \" + _defaultDateViewFormat(date) + \")\", // 4\n      \"Not a member of subcluster (as of \" + _defaultDateViewFormat(date) + \")\", // 5\n      \"Not in a subcluster\"\n    ];\n\n    return {\n      depends: _networkCDCDateField,\n      label: \"Subcluster or Priority Node\",\n      enum: subcluster_enum,\n      type: \"String\",\n      volatile: true,\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain(subcluster_enum.concat([_networkMissing]))\n          .range(\n            _.union(\n              [\n                \"#CCCCCC\",\n                \"pink\",\n                \"red\",\n                \"blue\",\n                \"#9A4EAE\",\n                \"yellow\",\n                \"#FFFFFF\"\n              ],\n              [_networkMissingColor]\n            )\n          );\n      },\n\n      map: function(node) {\n        if (node.subcluster) {\n          if (node.priority_flag > 0) {\n            return subcluster_enum[node.priority_flag];\n          }\n          return subcluster_enum[0];\n        }\n        return subcluster_enum[6];\n      }\n    };\n  };\n\n  self._networkPredefinedAttributeTransforms = {\n    /** runtime computed node attributes, e.g. transforms of existing attributes */\n\n    binned_vl_recent_value: {\n      depends: \"vl_recent_value\",\n      label: \"binned_vl_recent_value\",\n      enum: [\"≤200\", \"200-10000\", \">10000\"],\n      type: \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\"≤200\", \"200-10000\", \">10000\", _networkMissing])\n          .range(_.union(_networkSequentialColor[3], [_networkMissingColor]));\n      },\n\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(\n          node,\n          \"vl_recent_value\",\n          true\n        );\n        if (vl_value != _networkMissing) {\n          if (vl_value <= 200) {\n            return \"≤200\";\n          }\n          if (vl_value <= 10000) {\n            return \"200-10000\";\n          }\n          return \">10000\";\n        }\n        return _networkMissing;\n      }\n    },\n\n    recent_rapid: self.recent_rapid_definition,\n\n    subcluster_index: {\n      depends: _networkCDCDateField,\n      label: \"Subcluster ID\",\n      type: \"String\",\n\n      map: function(node) {\n        return node.subcluster;\n      }\n    },\n\n    age_dx: {\n      depends: \"age\",\n      label: \"age_dx\",\n      enum: [\"<13\", \"13-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"≥60\"],\n      type: \"String\",\n      color_scale: function() {\n        return d3.scale\n          .ordinal()\n          .domain([\n            \"<13\",\n            \"13-19\",\n            \"20-29\",\n            \"30-39\",\n            \"40-49\",\n            \"50-59\",\n            \"≥60\",\n            _networkMissing\n          ])\n          .range([\n            \"#b10026\",\n            \"#e31a1c\",\n            \"#fc4e2a\",\n            \"#fd8d3c\",\n            \"#feb24c\",\n            \"#fed976\",\n            \"#ffffb2\",\n            \"#636363\"\n          ]);\n      },\n      map: function(node) {\n        var vl_value = self.attribute_node_value_by_id(node, \"age\");\n        if (vl_value == \">=60\") {\n          return \"≥60\";\n        }\n        return vl_value;\n      }\n    },\n\n    hiv_aids_dx_dt_year: {\n      depends: _networkCDCDateField,\n      label: \"hiv_aids_dx_dt_year\",\n      type: \"Number\",\n      label_format : d3.format (\".0f\"),\n      map: function(node) {\n        try {\n          var value = self._parse_dates(\n            self.attribute_node_value_by_id(node, _networkCDCDateField)\n          );\n          if (value) {\n            value = \"\" + value.getFullYear();\n          } else {\n            value = _networkMissing;\n          }\n          return value;\n        } catch (err) {\n          return _networkMissing;\n        }\n      },\n      color_scale: function(attr) {\n        var range_without_missing = _.without(\n          attr.value_range,\n          _networkMissing\n        );\n        var color_scale = _.compose(\n          d3.interpolateRgb(\"#ffffcc\", \"#800026\"),\n          d3.scale\n            .linear()\n            .domain([\n              range_without_missing[0],\n              range_without_missing[range_without_missing.length - 1]\n            ])\n            .range([0, 1])\n        );\n        return function(v) {\n          if (v == _networkMissing) {\n            return _networkMissingColor;\n          }\n          return color_scale(v);\n        };\n      }\n    }\n  };\n\n  if (options && options[\"computed-attributes\"]) {\n    _.extend(\n      self._networkPredefinedAttributeTransforms,\n      options[\"computed-attributes\"]\n    );\n  }\n\n  self._parse_dates = function(value) {\n    if (value instanceof Date) {\n      return value;\n    }\n    var parsed_value = null;\n\n    var passed = _.any(_defaultDateFormats, function(f) {\n      parsed_value = f.parse(value);\n      return parsed_value;\n    });\n\n    //console.log (value + \" mapped to \" + parsed_value);\n\n    if (passed) {\n      if (\n        self._is_CDC_ &&\n        (parsed_value.getFullYear() < 1970 ||\n          parsed_value.getFullYear() > _networkUpperBoundOnDate)\n      ) {\n        throw \"Invalid date\";\n      }\n      return parsed_value;\n    }\n\n    throw \"Invalid date\";\n  };\n\n  /*------------ Network layout code ---------------*/\n  var handle_cluster_click = function(cluster, release) {\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    var already_fixed = cluster && cluster.fixed == 1;\n\n    if (cluster) {\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Expand cluster\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          self.expand_cluster_handler(cluster, true);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Center on screen\")\n        .on(\"click\", function(d) {\n          cluster.fixed = 0;\n          center_cluster_handler(cluster);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          if (cluster.fixed) return \"Allow cluster to float\";\n          return \"Hold cluster at current position\";\n        })\n        .on(\"click\", function(d) {\n          cluster.fixed = !cluster.fixed;\n          menu_object.style(\"display\", \"none\");\n        });\n\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(function(d) {\n          return \"Show this cluster in separate tab\";\n        })\n        .on(\"click\", function(d) {\n          self.open_exclusive_tab_view(cluster.cluster_id);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      // Only show the \"Show on map\" option for clusters with valid country info (for now just 2 letter codes) for each node.\n      var show_on_map_enabled = self.countryCentersObject;\n\n\n      show_on_map_enabled = _.every(cluster.children, function(node) {\n        //console.log (node.patient_attributes);\n        return self._get_node_country (node).length == 2;\n      })\n\n      if (show_on_map_enabled) {\n        menu_object\n          .append(\"li\")\n          .append(\"a\")\n          .attr(\"tabindex\", \"-1\")\n          .text(\"Show on map\")\n          .on(\"click\", function(d) {\n            //console.log(cluster)\n            self.open_exclusive_tab_view(\n              cluster.cluster_id,\n              null,\n              (cluster_id) => { return \"Map of cluster: \" + cluster_id },\n              {'showing_on_map': true}\n            )\n          });\n      }\n\n      cluster.fixed = 1;\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      if (release) {\n        release.fixed = 0;\n      }\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_cluster_click(null, already_fixed ? null : cluster);\n      },\n      true\n    );\n  };\n\n  /*self._handle_inline_charts = function (e) {\n\n  }*/\n\n  self._get_node_country = function (node) {\n    var countryCodeAlpha2 =  self.attribute_node_value_by_id (node, \"country\");\n    if (countryCodeAlpha2 == _networkMissing) {\n        countryCodeAlpha2 =  self.attribute_node_value_by_id (node, \"Country\");\n    }\n    return countryCodeAlpha2;\n  };\n\n  self._draw_topomap = function (no_redraw) {\n    if (options && \"showing_on_map\" in options) {\n        var countries = topojson.feature(countryOutlines, countryOutlines.objects.countries).features;\n        var mapsvg = d3.select(\"#\" + self.dom_prefix + \"-network-svg\");\n        var path = d3.geo.path().projection(self.mapProjection);\n        var countries = mapsvg.selectAll(\".country\")\n          .data(countries);\n\n        countries.enter().append(\"path\");\n        countries.exit().remove();\n\n        self.countries_in_cluster = {};\n\n        _.each (self.nodes, function (node) {\n            var countryCodeAlpha2 =  self._get_node_country (node);\n             var countryCodeNumeric = self.countryCentersObject[countryCodeAlpha2].countryCodeNumeric;\n            if (!(countryCodeNumeric in self.countries_in_cluster)) {\n              self.countries_in_cluster[countryCodeNumeric] = true;\n            }\n        });\n\n\n        countries\n          .attr(\"class\", \"country\")\n          .attr(\"d\", path)\n          .attr(\"stroke\", \"saddlebrown\")\n          .attr(\"fill\", function(d) {\n            if (d.id in self.countries_in_cluster) {\n              return \"navajowhite\";\n            } else {\n              return \"bisque\";\n            }\n          })\n          .attr(\"stroke-width\", function(d) {\n            if (d.id in self.countries_in_cluster)  {\n              return 1.5;\n            } else {\n              return 0.5;\n            }\n          });\n    }\n    return self;\n  };\n\n  self._check_for_time_series = function(export_items) {\n    var event_handler = function (network, e) {\n          if (e) {\n            e = d3.select(e);\n          }\n          if (!network.network_cluster_dynamics) {\n            network.network_cluster_dynamics = network.network_svg\n              .append(\"g\")\n              .attr(\"id\", self.dom_prefix + \"-dynamics-svg\")\n              .attr(\"transform\", \"translate (\" + network.width * 0.45 + \",0)\");\n\n            network.handle_inline_charts = function(plot_filter) {\n              var attr = null;\n              var color = null;\n              if (\n                network.colorizer[\"category_id\"] &&\n                !network.colorizer[\"continuous\"]\n              ) {\n                var attr_desc =\n                  network.json[_networkGraphAttrbuteID][\n                    network.colorizer[\"category_id\"]\n                  ];\n                attr = {};\n                attr[network.colorizer[\"category_id\"]] = attr_desc[\"label\"];\n                color = {};\n                color[attr_desc[\"label\"]] = network.colorizer[\"category\"];\n              }\n\n              misc.cluster_dynamics(\n                network.extract_network_time_series(\n                  self.cluster_time_scale,\n                  attr,\n                  plot_filter\n                ),\n                network.network_cluster_dynamics,\n                \"Quarter of Diagnosis\", \"Number of Cases\",\n                null,\n                null,\n                {\n                  base_line: 20,\n                  top: network.margin.top,\n                  right: network.margin.right,\n                  bottom: 3 * 20,\n                  left: 5 * 20,\n                  font_size: 12,\n                  rect_size: 14,\n                  width: network.width / 2,\n                  height: network.height / 2,\n                  colorizer: color,\n                  prefix: network.dom_prefix,\n                  barchart: true,\n                  drag: {\n                    x: network.width * 0.45,\n                    y: 0\n                  }\n                }\n              );\n            };\n            network.handle_inline_charts();\n            if (e) {\n                e.text(\"Hide time-course plots\");\n            }\n          } else {\n            if (e) {\n                e.text(\"Show time-course plots\");\n            }\n            network.network_cluster_dynamics.remove();\n            network.network_cluster_dynamics = null;\n            network.handle_inline_charts = null;\n          }\n        };\n\n    if (self.cluster_time_scale) {\n      if (export_items) {\n          export_items.push([\n            \"Show time-course plots\",\n            event_handler\n          ]);\n       } else {\n          event_handler (self);\n       }\n    }\n  };\n\n  self.open_exclusive_tab_close = function(\n    tab_element,\n    tab_content,\n    restore_to_tag\n  ) {\n    $(\"#\" + restore_to_tag).tab(\"show\");\n    $(\"#\" + tab_element).remove();\n    $(\"#\" + tab_content).remove();\n  };\n\n  self.open_exclusive_tab_view = function(\n    cluster_id,\n    custom_filter,\n    custom_name,\n    additional_options,\n    include_injected_edges\n  ) {\n    var cluster = _.find(self.clusters, function(c) {\n      return c.cluster_id == cluster_id;\n    });\n\n    if (!cluster) {\n      return;\n    }\n\n    additional_options = additional_options || {};\n\n    var filtered_json = _extract_single_cluster(\n      custom_filter\n        ? _.filter(self.json.Nodes, custom_filter)\n        : cluster.children,\n        null,\n        null,\n        null,\n        include_injected_edges\n    );\n\n    if (_networkGraphAttrbuteID in json) {\n      filtered_json[_networkGraphAttrbuteID] = {};\n      jQuery.extend(\n        true,\n        filtered_json[_networkGraphAttrbuteID],\n        json[_networkGraphAttrbuteID]\n      );\n    }\n\n    var export_items = [\n      [\n        \"Export cluster to .CSV\",\n        function(network) {\n          helpers.export_csv_button(\n            self._extract_attributes_for_nodes(\n              self._extract_nodes_by_id(cluster_id),\n              self._extract_exportable_attributes()\n            )\n          );\n        }\n      ]\n    ];\n\n    //self._check_for_time_series(export_items);\n\n    if (\"extra_menu\" in additional_options) {\n      _.each(export_items, function(item) {\n        additional_options[\"extra_menu\"][\"items\"].push(item);\n      });\n    } else {\n      _.extend(additional_options, {\n        extra_menu: {\n          title: \"Action\",\n          items: export_items\n        }\n      });\n    }\n\n    return self.open_exclusive_tab_view_aux(\n      filtered_json,\n      custom_name ? custom_name(cluster_id) : \"Cluster \" + cluster_id,\n      additional_options\n    );\n  };\n\n\n  self.open_exclusive_tab_view_aux = function(\n    filtered_json,\n    title,\n    option_extras\n  ) {\n    var random_id = function(alphabet, length) {\n      var s = \"\";\n      for (var i = 0; i < length; i++) {\n        s += _.sample(alphabet);\n      }\n      return s;\n    };\n\n    var letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n\n    var random_prefix = random_id(letters, 32);\n    var random_tab_id = random_prefix + \"_tab\";\n    var random_content_id = random_prefix + \"_div\";\n    var random_button_bar = random_prefix + \"_ui\";\n\n    while (\n      $(\"#\" + random_tab_id).length ||\n      $(\"#\" + random_content_id).length ||\n      $(\"#\" + random_button_bar).length\n    ) {\n      random_prefix = random_id(letters, 32);\n      random_tab_id = random_prefix + \"_tab\";\n      random_content_id = random_prefix + \"_div\";\n      random_button_bar = random_prefix + \"_ui\";\n    }\n\n    var tab_container = \"top_level_tab_container\";\n    var content_container = \"top_level_tab_content\";\n    var go_here_when_closed = \"trace-default-tab\";\n\n    // add new tab to the menu bar and switch to it\n    var new_tab_header = $(\"<li></li>\").attr(\"id\", random_tab_id);\n    var new_link = $(\"<a></a>\")\n      .attr(\"href\", \"#\" + random_content_id)\n      .attr(\"data-toggle\", \"tab\")\n      .text(title);\n    $(\n      '<button type=\"button\" class=\"close\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>'\n    )\n      .appendTo(new_link)\n      .on(\"click\", function() {\n        self.open_exclusive_tab_close(\n          random_tab_id,\n          random_content_id,\n          go_here_when_closed\n        );\n      });\n\n    new_link.appendTo(new_tab_header);\n    $(\"#\" + tab_container).append(new_tab_header);\n\n    var new_tab_content = $(\"<div></div>\")\n      .addClass(\"tab-pane\")\n      .attr(\"id\", random_content_id)\n      .data(\"cluster\", option_extras.cluster_id);\n\n    if (option_extras.type == \"subcluster\") {\n\n      new_tab_content\n        .addClass(\"subcluster-view\")\n        .addClass(\"subcluster-\" + option_extras.cluster_id.replace(\".\", \"_\"));\n    }\n\n    //     <li class='disabled' id=\"attributes-tab\"><a href=\"#trace-attributes\" data-toggle=\"tab\">Attributes</a></li>\n    var new_button_bar = $('[data-hivtrace=\"cluster-clone\"]')\n      .clone()\n      .attr(\"data-hivtrace\", null);\n    new_button_bar\n      .find(\"[data-hivtrace-button-bar='yes']\")\n      .attr(\"id\", random_button_bar)\n      .addClass(\"cloned-cluster-tab\")\n      .attr(\"data-hivtrace-button-bar\", null);\n\n    new_button_bar.appendTo(new_tab_content);\n    new_tab_content.appendTo(\"#\" + content_container);\n\n    // show the new tab\n    $(new_link).tab(\"show\");\n\n    var cluster_options = {\n      no_cdc: options && options[\"no_cdc\"],\n      \"minimum size\": 0,\n      secondary: true,\n      prefix: random_prefix,\n      extra_menu:\n        options && \"extra_menu\" in options ? options[\"extra_menu\"] : null,\n      \"edge-styler\":\n        options && \"edge-styler\" in options ? options[\"edge-styler\"] : null,\n      \"no-subclusters\": true\n    };\n\n    if (option_extras) {\n      _.extend(cluster_options, option_extras);\n    }\n\n    if (option_extras.showing_on_map && self.countryCentersObject && self.countryOutlines) {\n      cluster_options[\"showing_on_map\"] = true;\n      cluster_options[\"country-centers\"] = self.countryCentersObject;\n      cluster_options[\"country-outlines\"] = self.countryOutlines;\n\n      // Create an array of the countries in the selected cluster for use in styling the map.\n        if (\"extra-graphics\" in cluster_options) {\n            var draw_map = function (other_code,network) {\n                other_code (network);\n                return network._draw_topomap();\n            };\n\n            cluster_options[\"extra-graphics\"] = _.wrap (draw_map, cluster_options[\"extra-graphics\"]);\n        } else {\n            cluster_options[\"extra-graphics\"] = function (network) {\n                return network._draw_topomap();\n            }\n        }\n    }\n\n\n\n\n    var cluster_view = hivtrace.clusterNetwork(\n      filtered_json,\n      \"#\" + random_content_id,\n      null,\n      null,\n      random_button_bar,\n      attributes,\n      null,\n      null,\n      null,\n      parent_container,\n      cluster_options\n    );\n\n    if (self.colorizer[\"category_id\"]) {\n      if (self.colorizer[\"continuous\"]) {\n        cluster_view.handle_attribute_continuous(self.colorizer[\"category_id\"]);\n      } else {\n        cluster_view.handle_attribute_categorical(\n          self.colorizer[\"category_id\"]\n        );\n      }\n    }\n\n    if (self.node_shaper[\"id\"]) {\n      cluster_view.handle_shape_categorical(self.node_shaper[\"id\"]);\n    }\n\n    if (self.colorizer[\"opacity_id\"]) {\n      cluster_view.handle_attribute_opacity(self.colorizer[\"opacity_id\"]);\n    }\n\n    cluster_view.expand_cluster_handler(cluster_view.clusters[0], true);\n    return cluster_view;\n\n\n    // copy all the divs other than the one matching the network tab ID\n    /*var cloned_empty_tab  = $('#trace-results').clone();\n    cloned_empty_tab.attr (\"id\", random_content_id);\n    console.log (cloned_empty_tab);\n\n    cloned_empty_tab.appendTo (\".tab-content\");    */\n\n    /*self.cluster_filtering_functions ['cluster_id'] = function (c) {return c.cluster_id == cluster.cluster_id;};\n    cluster.exclusive = 1;\n    self.has_exclusive_view = cluster.cluster_id;\n    self.draw_attribute_labels();\n    self.update(false);*/\n  };\n\n  self.get_ui_element_selector_by_role = function(role, not_nested) {\n    if (not_nested && !self.primary_graph) {\n      return undefined;\n    }\n    return (\n      (not_nested ? \"\" : \"#\" + self.ui_container_selector) +\n      \" [data-hivtrace-ui-role='\" +\n      role +\n      \"']\"\n    );\n  };\n\n  // ensure all checkboxes are unchecked at initialization\n  $('input[type=\"checkbox\"]').prop(\"checked\", false);\n\n  var handle_node_click = function(node) {\n    var container = d3.select(self.container);\n    var id = \"d3_context_menu_id\";\n    var menu_object = container.select(\"#\" + id);\n\n    if (menu_object.empty()) {\n      menu_object = container\n        .append(\"ul\")\n        .attr(\"id\", id)\n        .attr(\"class\", \"dropdown-menu\")\n        .attr(\"role\", \"menu\");\n    }\n\n    menu_object.selectAll(\"li\").remove();\n\n    if (node) {\n      node.fixed = 1;\n      menu_object\n        .append(\"li\")\n        .append(\"a\")\n        .attr(\"tabindex\", \"-1\")\n        .text(\"Collapse cluster\")\n        .on(\"click\", function(d) {\n          node.fixed = 0;\n          collapse_cluster_handler(node, true);\n          menu_object.style(\"display\", \"none\");\n        });\n\n      // SW20180605 : To be implemented\n\n      //menu_object\n      //  .append(\"li\")\n      //  .append(\"a\")\n      //  .attr(\"tabindex\", \"-1\")\n      //  .text(\"Show sequences used to make cluster\")\n      //  .on(\"click\", function(d) {\n      //    node.fixed = 0;\n      //    show_sequences_in_cluster (node, true);\n      //    menu_object.style(\"display\", \"none\");\n      //  });\n\n      menu_object\n        .style(\"position\", \"absolute\")\n        .style(\"left\", \"\" + d3.event.offsetX + \"px\")\n        .style(\"top\", \"\" + d3.event.offsetY + \"px\")\n        .style(\"display\", \"block\");\n    } else {\n      menu_object.style(\"display\", \"none\");\n    }\n\n    container.on(\n      \"click\",\n      function(d) {\n        handle_node_click(null);\n      },\n      true\n    );\n  };\n\n  function get_initial_xy(packed) {\n    // create clusters from nodes\n    var mapped_clusters = get_all_clusters(self.nodes);\n\n    var d_clusters = {\n      id: \"root\",\n      children: []\n    };\n\n    // filter out clusters that are to be excluded\n    if (self.exclude_cluster_ids) {\n      mapped_clusters = _.omit(mapped_clusters, self.exclude_cluster_ids);\n    }\n\n    d_clusters.children = _.map(mapped_clusters, (value, key) => {\n      return {\n        cluster_id: key,\n        children: value\n      };\n    });\n\n    var treemap = packed\n      ? d3.layout\n          .pack()\n          .size([self.width, self.height])\n          //.sticky(true)\n          .children(function(d) {\n            return d.children;\n          })\n          .value(function(d) {\n            return Math.pow(d.parent.children.length, 1.5);\n          })\n          .sort(function(a, b) {\n            return b.value - a.value;\n          })\n          .padding(5)\n      : d3.layout\n          .treemap()\n          .size([self.width, self.height])\n          //.sticky(true)\n          .children(function(d) {\n            return d.children;\n          })\n          .value(function(d) {\n            return Math.pow(d.parent.children.length, 1.0);\n          })\n          .sort(function(a, b) {\n            return a.value - b.value;\n          })\n          .ratio(1);\n\n    var clusters = treemap.nodes(d_clusters);\n    _.each(clusters, function(c) {\n      //c.fixed = true;\n    });\n    return clusters;\n  }\n\n  function prepare_data_to_graph() {\n    var graphMe = {};\n    graphMe.all = [];\n    graphMe.edges = [];\n    graphMe.nodes = [];\n    graphMe.clusters = [];\n\n    var expandedClusters = [];\n    var drawnNodes = [];\n\n    self.clusters.forEach(function(x) {\n      if (self.cluster_display_filter(x)) {\n        // Check if hxb2_linked is in a child\n        var hxb2_exists =\n          x.children.some(function(c) {\n            return c.hxb2_linked;\n          }) && self.hide_hxb2;\n        if (!hxb2_exists) {\n          if (x.collapsed) {\n            graphMe.clusters.push(x);\n            graphMe.all.push(x);\n          } else {\n            expandedClusters[x.cluster_id] = true;\n          }\n        }\n      }\n    });\n\n    self.nodes.forEach(function(x, i) {\n      if (expandedClusters[x.cluster]) {\n        drawnNodes[i] = graphMe.nodes.length + graphMe.clusters.length;\n        graphMe.nodes.push(x);\n        graphMe.all.push(x);\n      }\n    });\n\n    self.edges.forEach(function(x) {\n      if (!(x.removed && self.filter_edges)) {\n        if (\n          drawnNodes[x.source] !== undefined &&\n          drawnNodes[x.target] !== undefined\n        ) {\n          var y = {};\n          for (var prop in x) {\n            y[prop] = x[prop];\n          }\n\n          y.source = drawnNodes[x.source];\n          y.target = drawnNodes[x.target];\n          graphMe.edges.push(y);\n        }\n      }\n    });\n\n    return graphMe;\n  }\n\n  self._refresh_subcluster_view = function (set_date) {\n\n    self.annotate_priority_clusters(\n      _networkCDCDateField,\n      36,\n      12,\n      set_date\n    );\n    var field_def = self.recent_rapid_definition(\n      self,\n      set_date\n    );\n    self.inject_attribute_description(\"recent_rapid\", field_def);\n    self._aux_process_category_values(\n      self._aux_populate_category_fields(\n        field_def,\n        \"recent_rapid\"\n      )\n    );\n    self.handle_attribute_categorical(\"recent_rapid\");\n  };\n\n  self.view_subcluster = function(cluster, custom_filter, custom_name, options, custom_edge_filter, include_injected_edges) {\n\n    var filtered_json = _extract_single_cluster(\n      custom_filter\n        ? (_.isArray (custom_filter) ? custom_filter : _.filter(self.json.Nodes, custom_filter))\n        : cluster.children,\n      custom_edge_filter || function(e) {\n        return e.length <= self.subcluster_threshold;\n      },\n      false,\n      null,\n      include_injected_edges\n    );\n\n\n    _.each(filtered_json.Nodes, function(n) {\n      n.subcluster = \"1.1\";\n    });\n\n    if (_networkGraphAttrbuteID in json) {\n      filtered_json[_networkGraphAttrbuteID] = {};\n      jQuery.extend(\n        true,\n        filtered_json[_networkGraphAttrbuteID],\n        json[_networkGraphAttrbuteID]\n      );\n    }\n\n    options = options || new Object;\n\n    var extra_menu_items = [\n      [\n        function(network, item) {\n          var enclosure = item.append(\"div\").classed(\"form-group\", true);\n          var label = enclosure\n            .append(\"label\")\n            .text(\"Recalculate R&R from \")\n            .classed(\"control-label\", true);\n          var date = enclosure\n            .append(\"input\")\n            .attr(\"type\", \"date\")\n            .classed(\"form-control\", true)\n            .attr(\"value\", _defaultDateViewFormatSlider(self.today))\n            .attr(\"max\", _defaultDateViewFormatSlider(self.today))\n            .attr(\n              \"min\",\n              _defaultDateViewFormatSlider(\n                d3.min(network.nodes, function(node) {\n                  return network.attribute_node_value_by_id(\n                    node,\n                    _networkCDCDateField\n                  );\n                })\n              )\n            )\n            .on(\"input\", function(e) {\n              //d3.event.preventDefault();\n              var set_date = _defaultDateViewFormatSlider.parse(this.value);\n              if (this.value) {\n                network._refresh_subcluster_view (set_date);\n\n                enclosure\n                  .classed(\"has-success\", true)\n                  .classed(\"has-error\", false);\n              } else {\n                enclosure\n                  .classed(\"has-success\", false)\n                  .classed(\"has-error\", true);\n              }\n            });\n        },\n        null\n      ],\n      [\n        \"Export cluster to .CSV\",\n        function(network) {\n          helpers.export_csv_button(\n            network._extract_attributes_for_nodes(\n              network._extract_nodes_by_id(\"1.1\"),\n              network._extract_exportable_attributes()\n            )\n          );\n        }\n      ]\n    ];\n\n\n    options [\"type\"] = \"subcluster\";\n    options [\"cluster_id\"] = cluster.cluster_id;\n    if (\"extra_menu\" in options) {\n        options [\"extra_menu\"][\"items\"] = options [\"extra_menu\"][\"items\"].concat (extra_menu_items);\n    } else {\n        options [\"extra_menu\"] = {\n            title: \"Action\",\n            items: extra_menu_items\n          };\n    }\n\n    //self._check_for_time_series(extra_menu_items);\n    var cluster_view = self\n      .open_exclusive_tab_view_aux(\n        filtered_json,\n        custom_name || \"Subcluster \" + cluster.cluster_id,\n        options\n      );\n      cluster_view.handle_attribute_categorical(\"recent_rapid\");\n      return cluster_view;\n\n    /*var selector =\n      \".subcluster-\" +\n      cluster.id.replace(\".\", \"_\") +\n      \" .show-small-clusters-button\";\n\n    var item = $(\n      '<span class=\"input-group-addon btn view-parent-btn\">View Parent</span>'\n    )\n      .data(\"cluster_id\", cluster.parent_cluster.cluster_id)\n      .insertAfter(selector);\n\n    item.on(\"click\", function(e) {\n      self.open_exclusive_tab_view($(this).data(\"cluster_id\"));\n    });*/\n  };\n\n  function _n_months_ago(reference_date, months) {\n    var past_date = new Date(reference_date);\n    var past_months = past_date.getMonth();\n    var diff_year = Math.floor(months / 12);\n    var left_over = months - diff_year * 12;\n\n    if (left_over > past_months) {\n      past_date.setFullYear(past_date.getFullYear() - diff_year - 1);\n      past_date.setMonth(12 - (left_over - past_months));\n    } else {\n      past_date.setFullYear(past_date.getFullYear() - diff_year);\n      past_date.setMonth(past_months - left_over);\n    }\n\n    //past_date.setTime (past_date.getTime () - months * 30 * 24 * 3600000);\n    return past_date;\n  }\n\n  self.annotate_priority_clusters = function(\n    date_field,\n    span_months,\n    recent_months,\n    start_date\n  ) {\n    try {\n      start_date = start_date || self.today;\n\n      var filter_by_date = function(cutoff, node) {\n        var node_dx = self.attribute_node_value_by_id(node, date_field);\n        if (node_dx instanceof Date) {\n          return node_dx >= cutoff && node_dx <= start_date;\n        } else {\n          try {\n              node_dx = self._parse_dates(\n                self.attribute_node_value_by_id(node, date_field)\n              );\n              if (node_dx instanceof Date) {\n                return node_dx >= cutoff && node_dx <= start_date;\n              }\n          } catch (err) {\n            return undefined;\n          }\n        }\n        return false;\n      };\n\n      var cutoff_long = _n_months_ago(start_date, span_months);\n      var cutoff_short = _n_months_ago(start_date, recent_months);\n\n      var node_iterator;\n\n      if (start_date == self.today) {\n        node_iterator = self.nodes;\n      } else {\n        var beginning_of_time = new Date();\n        beginning_of_time.setYear(1900);\n        node_iterator = [];\n        _.each(self.nodes, function(node) {\n          var filter_result = filter_by_date (beginning_of_time, node);\n          if (_.isUndefined (filter_result)) {\n            node.priority_flag = 6;\n          } else {\n              if (filter_result) {\n                node.priority_flag = 5;\n                node_iterator.push(node);\n              } else {\n                node.priority_flag = 4;\n              }\n          }\n        });\n      }\n\n      var oldest_nodes_first = function(n1, n2) {\n        // consistent node sorting, older nodes first\n        var node1_dx = self.attribute_node_value_by_id(n1, date_field);\n        var node2_dx = self.attribute_node_value_by_id(n2, date_field);\n\n        if (node1_dx == node2_dx) {\n          return n1.id < n2.id ? -1 : 1;\n        } else {\n          return node1_dx < node2_dx ? -1 : 1;\n        }\n        return 0;\n      };\n\n      // extract all clusters at once to avoid inefficiencies of multiple edge-set traverals\n\n      var split_clusters = {};\n      var node_id_to_local_cluster = {};\n\n      // reset all annotations\n\n      _.each(node_iterator, function(node) {\n        if (node.cluster) {\n          if (!(node.cluster in split_clusters)) {\n            split_clusters[node.cluster] = { Nodes: [], Edges: [] };\n          }\n          node_id_to_local_cluster[node.id] =\n            split_clusters[node.cluster][\"Nodes\"].length;\n          split_clusters[node.cluster][\"Nodes\"].push(node);\n        }\n      });\n\n      _.each(self.edges, function(edge) {\n        if (edge.length <= self.subcluster_threshold) {\n          var edge_cluster = json.Nodes[edge.source].cluster;\n\n          var source_id = json.Nodes[edge.source].id,\n            target_id = json.Nodes[edge.target].id;\n\n          if (\n            source_id in node_id_to_local_cluster &&\n            target_id in node_id_to_local_cluster\n          ) {\n            var copied_edge = _.clone(edge);\n\n            copied_edge.source = node_id_to_local_cluster[source_id];\n            copied_edge.target = node_id_to_local_cluster[target_id];\n\n            split_clusters[edge_cluster][\"Edges\"].push(copied_edge);\n          }\n        }\n      });\n\n      _.each(split_clusters, function(cluster_nodes, cluster_index) {\n        /** extract subclusters; all nodes at given threshold */\n        /** Sub-Cluster: all nodes connected at 0.005 subs/site; there can be multiple sub-clusters per cluster */\n\n        //var cluster_nodes       = _extract_single_cluster (cluster.children, null, true);\n\n        var array_index = self.cluster_mapping[cluster_index];\n\n        self.clusters[array_index].priority_score = 0;\n\n        /** all clusters with more than one member connected at 'threshold' edge length */\n        var edges = [];\n\n        var subclusters = _.filter(\n          hivtrace_cluster_depthwise_traversal(\n            cluster_nodes.Nodes,\n            cluster_nodes.Edges,\n            null,\n            edges\n          ),\n          function(cc) {\n            return cc.length > 1;\n          }\n        );\n\n        edges = _.filter(edges, function(es) {\n          return es.length > 1;\n        });\n\n        /** sort subclusters by oldest node */\n\n        _.each(subclusters, function(c, i) {\n          c.sort(oldest_nodes_first);\n        });\n\n        subclusters.sort(function(c1, c2) {\n          return oldest_nodes_first(c1[0], c2[0]);\n        });\n\n        subclusters = _.map(subclusters, function(c, i) {\n          var label = self.clusters[array_index].cluster_id + \".\" + (i + 1);\n\n          _.each(c, function(n) {\n            n.subcluster = label;\n            n.priority_flag = 0;\n            n.in_rr = 0;\n          });\n\n          return {\n            children: _.clone(c),\n            parent_cluster: self.clusters[array_index],\n            cluster_id: label,\n            distances: helpers.describe_vector(\n              _.map(edges[i], function(e) {\n                return e.length;\n              })\n            )\n          };\n        });\n\n        _.each(subclusters, function(c) {\n          _compute_cluster_degrees(c);\n        });\n\n        self.clusters[array_index].subclusters = subclusters;\n\n        /** now, for each subcluster, extract the recent and rapid part */\n\n        /** Recent & Rapid (R&R) Cluster: the part of the Sub-Cluster inferred using only cases dx’d in the previous 36 months\n                and at least two cases dx’d in the previous 12 months; there is a path between all nodes in an R&R Cluster\n\n                20180406 SLKP: while unlikely, this definition could result in multiple R&R clusters\n                per subclusters; for now we will add up all the cases for prioritization, and\n                display the largest R&R cluster if there is more than one\n            */\n\n        _.each(subclusters, function(sub) {\n          // extract nodes based on dates\n          var subcluster_json = _extract_single_cluster(\n            _.filter(sub.children, _.partial(filter_by_date, cutoff_long)),\n            null,\n            true,\n            cluster_nodes\n          );\n          var rr_cluster = _.filter(\n            hivtrace_cluster_depthwise_traversal(\n              subcluster_json.Nodes,\n              _.filter(subcluster_json.Edges, function(e) {\n                return e.length <= self.subcluster_threshold;\n              })\n            ),\n            function(cc) {\n              return cc.length > 1;\n            }\n          );\n\n          sub.rr_count = rr_cluster.length;\n\n          rr_cluster.sort(function(a, b) {\n            return b.length - a.length;\n          });\n\n          sub.priority_score = [];\n          sub.recent_nodes = [];\n\n          _.each(rr_cluster, function(recent_cluster) {\n            var priority_nodes = _.groupBy(\n              recent_cluster,\n              _.partial(filter_by_date, cutoff_short)\n            );\n            sub.recent_nodes.push(recent_cluster.length);\n            if (true in priority_nodes) {\n              sub.priority_score.push(priority_nodes[true].length);\n              _.each(priority_nodes[true], function(n) {\n                n.priority_flag = filter_by_date(start_date, n) ? 4 : 1;\n                if (priority_nodes[true].length >= 3) {\n                  n.in_rr = true;\n                  if (n.priority_flag == 1) {\n                    n.priority_flag = 2;\n                  }\n                }\n              });\n            }\n            if (false in priority_nodes) {\n              _.each(priority_nodes[false], function(n) {\n                n.priority_flag = 3;\n              });\n            }\n          });\n\n          //console.log (sub.recent_nodes);\n\n          self.clusters[array_index].priority_score = sub.priority_score;\n        });\n      });\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  };\n\n  function default_layout(packed) {\n    // let's create an array of clusters from the json\n\n    var init_layout = get_initial_xy(packed);\n\n    if (self.clusters.length == 0) {\n      self.clusters = init_layout.filter(function(v, i, obj) {\n        return !(typeof v.cluster_id === \"undefined\");\n      });\n    } else {\n      var coordinate_update = {};\n      _.each(self.clusters, function(c) {\n        coordinate_update[c.cluster_id] = c;\n      });\n      _.each(init_layout, function(c) {\n        if (\"cluster_id\" in c) {\n          _.extendOwn(coordinate_update[c.cluster_id], c);\n        }\n      });\n    }\n\n    //var sizes = network_layout.size();\n\n    var set_init_coords = packed\n      ? function(n) {\n          n.x += n.r * 0.5;\n          n.y += n.r * 0.5;\n        }\n      : function(n) {\n          n.x += n.dx * 0.5;\n          n.y += n.dy * 0.5;\n        };\n\n    _.each([self.nodes, self.clusters], function(list) {\n      _.each(list, set_init_coords);\n    });\n\n    self.clusters.forEach(collapse_cluster);\n  }\n\n  function change_spacing(delta) {\n    self.charge_correction = self.charge_correction * delta;\n    network_layout.start();\n  }\n\n  function change_window_size(delta, trigger) {\n    if (delta) {\n      var x_scale = (self.width + delta / 2) / self.width;\n      var y_scale = (self.height + delta / 2) / self.height;\n\n      self.width += delta;\n      self.height += delta;\n\n      var rescale_x = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.x;\n        })\n      );\n      rescale_x.range(\n        _.map(rescale_x.domain(), function(v) {\n          return v * x_scale;\n        })\n      );\n      //.range ([50,self.width-50]),\n      var rescale_y = d3.scale.linear().domain(\n        d3.extent(network_layout.nodes(), function(node) {\n          return node.y;\n        })\n      );\n      rescale_y.range(\n        _.map(rescale_y.domain(), function(v) {\n          return v * y_scale;\n        })\n      );\n\n      _.each(network_layout.nodes(), function(node) {\n        node.x = rescale_x(node.x);\n        node.y = rescale_y(node.y);\n      });\n    }\n\n    self.width = Math.min(Math.max(self.width, 200), 4000);\n    self.height = Math.min(Math.max(self.height, 200), 4000);\n\n    network_layout.size([self.width, self.height]);\n    self.network_svg.attr(\"width\", self.width).attr(\"height\", self.height);\n    self._calc_country_nodes (options);\n    self._draw_topomap (true);\n    if (trigger) {\n      network_layout.start();\n    } else {\n      if (delta) {\n        self.update(true);\n      }\n    }\n  }\n\n  self.compute_adjacency_list = _.once(function() {\n    self.nodes.forEach(function(n) {\n      n.neighbors = d3.set();\n    });\n\n    self.edges.forEach(function(e) {\n      self.nodes[e.source].neighbors.add(e.target);\n      self.nodes[e.target].neighbors.add(e.source);\n    });\n  });\n\n  self.compute_local_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.nodes.forEach(function(n) {\n      _.defer(function(a_node) {\n        neighborhood_size = a_node.neighbors.size();\n        if (neighborhood_size < 2) {\n          a_node.lcc = misc.undefined;\n        } else {\n          if (neighborhood_size > 500) {\n            a_node.lcc = misc.too_large;\n          } else {\n            // count triangles\n            neighborhood = a_node.neighbors.values();\n            counter = 0;\n            for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n              for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n                if (\n                  self.nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])\n                ) {\n                  counter++;\n                }\n              }\n            }\n\n            a_node.lcc =\n              2 * counter / neighborhood_size / (neighborhood_size - 1);\n          }\n        }\n      }, n);\n    });\n  });\n\n  self.get_node_by_id = function(id) {\n    return self.nodes.filter(function(n) {\n      return n.id == id;\n    })[0];\n  };\n\n  self.compute_local_clustering_coefficients_worker = _.once(function() {\n    var worker = new Worker(\"workers/lcc.js\");\n\n    worker.onmessage = function(event) {\n      var nodes = event.data.Nodes;\n\n      nodes.forEach(function(n) {\n        node_to_update = self.get_node_by_id(n.id);\n        node_to_update.lcc = n.lcc ? n.lcc : misc.undefined;\n      });\n    };\n\n    var worker_obj = {};\n    worker_obj[\"Nodes\"] = self.nodes;\n    worker_obj[\"Edges\"] = self.edges;\n    worker.postMessage(worker_obj);\n  });\n\n  var estimate_cubic_compute_cost = _.memoize(\n    function(c) {\n      self.compute_adjacency_list();\n      return _.reduce(\n        _.first(_.pluck(c.children, \"degree\").sort(d3.descending), 3),\n        function(memo, value) {\n          return memo * value;\n        },\n        1\n      );\n    },\n    function(c) {\n      return c.cluster_id;\n    }\n  );\n\n  self.compute_global_clustering_coefficients = _.once(function() {\n    self.compute_adjacency_list();\n\n    self.clusters.forEach(function(c) {\n      _.defer(function(a_cluster) {\n        cluster_size = a_cluster.children.length;\n        if (cluster_size < 3) {\n          a_cluster.cc = misc.undefined;\n        } else {\n          if (estimate_cubic_compute_cost(a_cluster, true) >= 5000000) {\n            a_cluster.cc = misc.too_large;\n          } else {\n            // pull out all the nodes that have this cluster id\n            member_nodes = [];\n\n            var triads = 0;\n            var triangles = 0;\n\n            self.nodes.forEach(function(n, i) {\n              if (n.cluster == a_cluster.cluster_id) {\n                member_nodes.push(i);\n              }\n            });\n            member_nodes.forEach(function(node) {\n              my_neighbors = self.nodes[node].neighbors\n                .values()\n                .map(function(d) {\n                  return +d;\n                })\n                .sort(d3.ascending);\n              for (n1 = 0; n1 < my_neighbors.length; n1 += 1) {\n                for (n2 = n1 + 1; n2 < my_neighbors.length; n2 += 1) {\n                  triads += 1;\n                  if (\n                    self.nodes[my_neighbors[n1]].neighbors.has(my_neighbors[n2])\n                  ) {\n                    triangles += 1;\n                  }\n                }\n              }\n            });\n\n            a_cluster.cc = triangles / triads;\n          }\n        }\n      }, c);\n    });\n  });\n\n  self.mark_nodes_as_processing = function(property) {\n    self.nodes.forEach(function(n) {\n      n[property] = misc.processing;\n    });\n  };\n\n  self.compute_graph_stats = function() {\n    d3.select(this).classed(\"disabled\", true).select(\"i\").classed({\n      \"fa-calculator\": false,\n      \"fa-cog\": true,\n      \"fa-spin\": true\n    });\n    self.mark_nodes_as_processing(\"lcc\");\n    self.compute_local_clustering_coefficients_worker();\n    self.compute_global_clustering_coefficients();\n    d3.select(this).remove();\n  };\n\n  /*------------ Constructor ---------------*/\n  function initial_json_load() {\n    var connected_links = [];\n    var total = 0;\n    self.exclude_cluster_ids = {};\n    self.has_hxb2_links = false;\n    self.cluster_sizes = [];\n\n    graph_data.Nodes.forEach(function(d) {\n      if (typeof self.cluster_sizes[d.cluster - 1] === \"undefined\") {\n        self.cluster_sizes[d.cluster - 1] = 1;\n      } else {\n        self.cluster_sizes[d.cluster - 1]++;\n      }\n      if (\"is_lanl\" in d) {\n        d.is_lanl = d.is_lanl == \"true\";\n      }\n\n      if (d.attributes.indexOf(\"problematic\") >= 0) {\n        self.has_hxb2_links = d.hxb2_linked = true;\n      }\n    });\n\n    /* add buttons and handlers */\n    /* clusters first */\n\n    self.ui_container_selector = button_bar_ui;\n\n    self._extract_attributes_for_nodes = function(nodes, column_names) {\n      var result = [\n        _.map(column_names, function(c) {\n          return c.raw_attribute_key;\n        })\n      ];\n      _.each(nodes, function(n) {\n        result.push(\n          _.map(column_names, function(c) {\n            if (c.raw_attribute_key == _networkNodeIDField) {\n                return n.id;\n            }\n            return self.attribute_node_value_by_id(n, c.raw_attribute_key);\n          })\n        );\n      });\n      return result;\n    };\n\n    self._extract_exportable_attributes = function() {\n      var allowed_types = {\n        String: 1,\n        Date: 1,\n        Number: 1\n      };\n\n      var return_array = [{\n                        \"raw_attribute_key\" : _networkNodeIDField,\n                        \"type\" : \"String\",\n                        \"label\" : \"Node ID\",\n                        \"format\" : function () {return \"Node ID\";}\n                        }];\n\n      return_array.push(_.filter(self.json[_networkGraphAttrbuteID], function(d) {\n        return d.type in allowed_types;\n      }));\n\n\n      return _.flatten (return_array, true);\n    };\n\n    self._extract_nodes_by_id = function(id) {\n      var string_id = id.toString();\n      return _.filter(self.nodes, function(n) {\n        return n.cluster == id || n.subcluster == string_id;\n      });\n    };\n\n    self._cluster_list_view_render = function(\n      cluster_id,\n      group_by_attribute,\n      the_list\n    ) {\n      the_list.selectAll(\"*\").remove();\n      var column_ids = self._extract_exportable_attributes();\n      var cluster_nodes = self._extract_nodes_by_id(cluster_id);\n\n      d3\n        .select(\n          self.get_ui_element_selector_by_role(\"cluster_list_data_export\", true)\n        )\n        .on(\"click\", function(d) {\n          helpers.export_csv_button(\n            self._extract_attributes_for_nodes(cluster_nodes, column_ids)\n          );\n        });\n\n      if (group_by_attribute) {\n        _.each(column_ids, function(column) {\n          var binned = _.groupBy(cluster_nodes, function(n) {\n            return self.attribute_node_value_by_id(n, column.raw_attribute_key);\n          });\n          var sorted_keys = _.keys(binned).sort();\n          var attribute_record = the_list.append(\"li\");\n          attribute_record.append(\"code\").text(column.raw_attribute_key);\n          var attribute_list = attribute_record\n            .append(\"dl\")\n            .classed(\"dl-horizontal\", true);\n          _.each(sorted_keys, function(key) {\n            attribute_list.append(\"dt\").text(key);\n            attribute_list.append(\"dd\").text(\n              _.map(binned[key], function(n) {\n                return n.id;\n              }).join(\", \")\n            );\n          });\n        });\n      } else {\n        _.each(cluster_nodes, function(node) {\n          var patient_record = the_list.append(\"li\");\n          patient_record.append(\"code\").text(node.id);\n          var patient_list = patient_record\n            .append(\"dl\")\n            .classed(\"dl-horizontal\", true);\n          _.each(column_ids, function(column) {\n            patient_list.append(\"dt\").text(column.raw_attribute_key);\n            patient_list\n              .append(\"dd\")\n              .text(\n                self.attribute_node_value_by_id(node, column.raw_attribute_key)\n              );\n          });\n        });\n      }\n    };\n\n    self._setup_cluster_list_view = function() {\n      d3\n        .select(\n          self.get_ui_element_selector_by_role(\"cluster_list_view_toggle\", true)\n        )\n        .on(\"click\", function() {\n          d3.event.preventDefault();\n          var group_by_id = false;\n\n          var button_clicked = $(this);\n          if (button_clicked.data(\"view\") == \"id\") {\n            button_clicked.data(\"view\", \"attribute\");\n            button_clicked.text(\"Group by ID\");\n            group_by_id = false;\n          } else {\n            button_clicked.data(\"view\", \"id\");\n            button_clicked.text(\"Group by attribute\");\n            group_by_id = true;\n          }\n          self._cluster_list_view_render(\n            button_clicked.data(\"cluster\").toString(),\n            !group_by_id,\n            d3.select(\n              self.get_ui_element_selector_by_role(\"cluster_list_payload\", true)\n            )\n          );\n        });\n\n      $(\n        self.get_ui_element_selector_by_role(\"cluster_list\", true)\n      ).on(\"show.bs.modal\", function(event) {\n        var link_clicked = $(event.relatedTarget);\n        var cluster_id = link_clicked.data(\"cluster\");\n        var modal = d3.select(\n          self.get_ui_element_selector_by_role(\"cluster_list\", true)\n        );\n        modal\n          .selectAll(\".modal-title\")\n          .text(\"Listing nodes in cluster \" + cluster_id);\n        $(\n          self.get_ui_element_selector_by_role(\"cluster_list_view_toggle\", true)\n        ).data(\"cluster\", cluster_id);\n\n        self._cluster_list_view_render(\n          cluster_id,\n          $(\n            self.get_ui_element_selector_by_role(\n              \"cluster_list_view_toggle\",\n              true\n            )\n          ).data(\"view\") != \"id\",\n          modal.select(\n            self.get_ui_element_selector_by_role(\"cluster_list_payload\", true)\n          )\n        );\n      });\n    };\n\n    if (button_bar_ui) {\n      self._setup_cluster_list_view();\n\n      var cluster_ui_container = d3.select(\n        self.get_ui_element_selector_by_role(\"cluster_operations_container\")\n      );\n\n      cluster_ui_container.selectAll(\"li\").remove();\n\n      var fix_handler = function(do_fix) {\n        _.each([self.clusters, self.nodes], function(list) {\n          _.each(list, function(obj) {\n            obj.fixed = do_fix;\n          });\n        });\n      };\n\n      var layout_reset_handler = function(packed) {\n        var fixed = [];\n        _.each(self.clusters, function(obj) {\n          if (obj.fixed) {\n            fixed.push(obj);\n          }\n          obj.fixed = false;\n        });\n        default_layout(packed);\n        network_layout.tick();\n        self.update();\n        _.each(fixed, function(obj) {\n          obj.fixed = true;\n        });\n      };\n\n      var cluster_commands = [\n        [\n          \"Expand All\",\n          function() {\n            return self.expand_some_clusters();\n          },\n          true,\n          \"hivtrace-expand-all\"\n        ],\n        [\n          \"Collapse All\",\n          function() {\n            return self.collapse_some_clusters();\n          },\n          true,\n          \"hivtrace-collapse-all\"\n        ],\n        [\n          \"Expand Filtered\",\n          function() {\n            return self.expand_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-expand-filtered\"\n        ],\n        [\n          \"Collapse Filtered\",\n          function() {\n            return self.collapse_some_clusters(\n              self.select_some_clusters(function(n) {\n                return n.match_filter;\n              })\n            );\n          },\n          true,\n          \"hivtrace-collapse-filtered\"\n        ],\n        [\n          \"Fix all objects in place\",\n          _.partial(fix_handler, true),\n          true,\n          \"hivtrace-fix-in-place\"\n        ],\n        [\n          \"Allow all objects to float\",\n          _.partial(fix_handler, false),\n          true,\n          \"hivtrace-allow-to-float\"\n        ],\n        [\n          \"Reset layout [packed]\",\n          _.partial(layout_reset_handler, true),\n          true,\n          \"hivtrace-reset-layout\"\n        ],\n        [\n          \"Reset layout [tiled]\",\n          _.partial(layout_reset_handler, false),\n          true,\n          \"hivtrace-reset-layout\"\n        ],\n        [\n          \"Hide problematic clusters\",\n          function(item) {\n            d3\n              .select(item)\n              .text(\n                self.hide_hxb2\n                  ? \"Hide problematic clusters\"\n                  : \"Show problematic clusters\"\n              );\n            self.toggle_hxb2();\n          },\n          self.has_hxb2_links,\n          \"hivtrace-hide-problematic-clusters\"\n        ]\n      ];\n\n      if (!self._is_CDC_) {\n        cluster_commands.push([\n          \"Show removed edges\",\n          function(item) {\n            self.filter_edges = !self.filter_edges;\n            d3\n              .select(item)\n              .text(\n                self.filter_edges ? \"Show removed edges\" : \"Hide removed edges\"\n              );\n            self.update(false);\n          },\n          function() {\n            return _.some(self.edges, function(d) {\n              return d.removed;\n            });\n          },\n          \"hivtrace-show-removed-edges\"\n        ]);\n      }\n\n      cluster_commands.forEach(function(item, index) {\n        var handler_callback = item[1];\n        if (item[2]) {\n          this.append(\"li\")\n            .append(\"a\")\n            .text(item[0])\n            .attr(\"href\", \"#\")\n            //.attr(\"id\", item[3])\n            .on(\"click\", function(e) {\n              handler_callback(this);\n              d3.event.preventDefault();\n            });\n        }\n      }, cluster_ui_container);\n\n      var button_group = d3.select(\n        self.get_ui_element_selector_by_role(\"button_group\")\n      );\n\n      if (!button_group.empty()) {\n        button_group.selectAll(\"button\").remove();\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Expand spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(5 / 4);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-plus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Compress spacing\")\n          .on(\"click\", function(d) {\n            change_spacing(4 / 5);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-minus\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Enlarge window\")\n          .on(\"click\", function(d) {\n            change_window_size(100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-expand\", true);\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Shrink window\")\n          .on(\"click\", function(d) {\n            change_window_size(-100, true);\n          })\n          .append(\"i\")\n          .classed(\"fa fa-compress\", true);\n\n        if (!self._is_CDC_) {\n          button_group\n            .append(\"button\")\n            .classed(\"btn btn-default btn-sm\", true)\n            .attr(\"title\", \"Compute graph statistics\")\n            .attr(\"id\", \"hivtrace-compute-graph-statistics\")\n            .on(\"click\", function(d) {\n              _.bind(self.compute_graph_stats, this)();\n            })\n            .append(\"i\")\n            .classed(\"fa fa-calculator\", true);\n        } else {\n           button_group\n            .append(\"button\")\n            .classed(\"btn btn-default btn-sm\", true)\n            .attr(\"title\", \"Toggle epi-curve\")\n            .attr(\"id\", \"hivtrace-toggle-epi-curve\")\n            .on(\"click\", function(d) {\n              self._check_for_time_series();\n            })\n            .append(\"i\")\n            .classed(\"fa fa-line-chart\", true);\n        }\n\n        button_group\n          .append(\"button\")\n          .classed(\"btn btn-default btn-sm\", true)\n          .attr(\"title\", \"Save Image\")\n          //.attr(\"id\", \"hivtrace-export-image\")\n          .on(\"click\", function(d) {\n            helpers.save_image(\"png\", \"#\" + self.dom_prefix + \"-network-svg\");\n          })\n          .append(\"i\")\n          .classed(\"fa fa-image\", true);\n      }\n\n      $(self.get_ui_element_selector_by_role(\"filter\")).on(\n        \"input propertychange\",\n        _.throttle(function(e) {\n          var filter_value = $(this).val();\n          self.filter(\n            filter_value\n              .split(\" \")\n              .filter(function(d) {\n                return d.length > 0;\n              })\n              .map(function(d) {\n                if (d.length > 2) {\n                  if (d[0] == '\"' && d[d.length - 1] == '\"') {\n                    return {\n                      type: \"re\",\n                      value: new RegExp(\n                        \"^\" + d.substr(1, d.length - 2) + \"$\",\n                        \"i\"\n                      )\n                    };\n                  }\n                  if (d[0] == \"<\") {\n                    var distance_threshold = parseFloat(d.substr(1));\n                    if (distance_threshold > 0) {\n                      return {\n                        type: \"distance\",\n                        value: distance_threshold\n                      };\n                    }\n                  }\n                }\n                return {\n                  type: \"re\",\n                  value: new RegExp(d, \"i\")\n                };\n              })\n          );\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role(\"hide_filter\")).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.hide_unselected = !self.hide_unselected;\n          self.filter_visibility();\n          self.update(true);\n        }, 250)\n      );\n\n      $(self.get_ui_element_selector_by_role(\"show_small_clusters\")).on(\n        \"change\",\n        _.throttle(function(e) {\n          if (\"size\" in self.cluster_filtering_functions) {\n            delete self.cluster_filtering_functions[\"size\"];\n          } else {\n            self.cluster_filtering_functions[\"size\"] = self.filter_by_size;\n          }\n\n          self.update(false);\n        }, 250)\n      );\n\n      $(\n        self.get_ui_element_selector_by_role(\"pairwise_table_pecentage\", true)\n      ).on(\n        \"change\",\n        _.throttle(function(e) {\n          self.show_percent_in_pairwise_table = !self.show_percent_in_pairwise_table;\n          render_binned_table(\n            \"attribute_table\",\n            self.colorizer[\"category_map\"],\n            self.colorizer[\"category_pairwise\"]\n          );\n        }, 250)\n      );\n    }\n\n    if (_networkGraphAttrbuteID in json) {\n      attributes = json[_networkGraphAttrbuteID];\n    } else {\n      if (attributes && \"hivtrace\" in attributes) {\n        attributes = attributes[\"hivtrace\"];\n      }\n    }\n\n    // Initialize class attributes\n    singletons = graph_data.Nodes.filter(function(v, i) {\n      return v.cluster === null;\n    }).length;\n    self.nodes = graph_data.Nodes.filter(function(v, i) {\n      if (\n        v.cluster &&\n        typeof self.exclude_cluster_ids[v.cluster] === \"undefined\"\n      ) {\n        connected_links[i] = total++;\n        return true;\n      }\n      return false;\n    });\n    self.edges = graph_data.Edges.filter(function(v, i) {\n      return (\n        connected_links[v.source] != undefined &&\n        connected_links[v.target] != undefined\n      );\n    });\n    self.edges = self.edges.map(function(v, i) {\n      v.source = connected_links[v.source];\n      v.target = connected_links[v.target];\n      v.id = i;\n      return v;\n    });\n\n    compute_node_degrees(self.nodes, self.edges);\n\n    default_layout(self.initial_packed);\n    self.clusters.forEach(function(d, i) {\n      self.cluster_mapping[d.cluster_id] = i;\n      d.hxb2_linked = d.children.some(function(c) {\n        return c.hxb2_linked;\n      });\n      _compute_cluster_degrees(d);\n      d.distances = [];\n    });\n\n    try {\n      if (options && options[\"extra_menu\"]) {\n        var extra_ui_container = d3.select(\n          self.get_ui_element_selector_by_role(\"extra_operations_container\")\n        );\n\n        d3\n          .select(\n            self.get_ui_element_selector_by_role(\"extra_operations_enclosure\")\n          )\n          .selectAll(\"button\")\n          .text(options[\"extra_menu\"][\"title\"])\n          .append(\"span\")\n          .classed(\"caret\", \"true\");\n        //extra_ui_container\n        extra_ui_container.selectAll(\"li\").remove();\n\n        options[\"extra_menu\"][\"items\"].forEach(function(item, index) {\n          //console.log (item);\n          var handler_callback = item[1];\n          if (_.isFunction(item[0])) {\n            item[0](self, this.append(\"li\"));\n          } else {\n            this.append(\"li\")\n              .append(\"a\")\n              .text(item[0])\n              .attr(\"href\", \"#\")\n              .on(\"click\", function(e) {\n                handler_callback(self, this);\n                d3.event.preventDefault();\n              });\n          }\n        }, extra_ui_container);\n\n        d3\n          .select(\n            self.get_ui_element_selector_by_role(\"extra_operations_enclosure\")\n          )\n          .style(\"display\", null);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    self._menu_label_gen = function (d) {\n          return (\n            (d[\"annotation\"] ? \"[\" + d[\"annotation\"] + \"] \" : \"\") + d[\"label\"]\n          );\n    };\n\n\n    self._aux_populate_category_menus = function() {\n      if (button_bar_ui) {\n        // decide if the variable can be considered categorical by examining its range\n\n        //console.log (\"self._aux_populate_category_menus\");\n        var valid_cats = _.filter(\n          _.map(\n            graph_data[_networkGraphAttrbuteID],\n            self._aux_populate_category_fields\n          ),\n          function(d) {\n            //console.log (d);\n            return (\n              d.discrete &&\n              \"value_range\" in d &&\n              d[\"value_range\"].length <= _maximumValuesInCategories\n            );\n          }\n        );\n\n        var valid_shapes = _.filter(valid_cats, function(d) {\n          return (\n            (d.discrete && d.dimension <= 7) ||\n            d[\"raw_attribute_key\"] in _networkPresetShapeSchemes\n          );\n        });\n\n        // sort values alphabetically for consistent coloring\n\n        _.each([valid_cats, valid_shapes], function(list) {\n          _.each(list, self._aux_process_category_values);\n        });\n\n        var valid_scales = _.filter(\n          _.map(graph_data[_networkGraphAttrbuteID], function(d, k) {\n            function determine_scaling(d, values, scales) {\n              var low_var = Infinity;\n\n              _.each(scales, function(scl) {\n                d[\"value_range\"] = d3.extent(values);\n                var bins = _.map(\n                  _.range(_networkContinuousColorStops),\n                  function() {\n                    return 0;\n                  }\n                );\n                scl\n                  .range([0, _networkContinuousColorStops - 1])\n                  .domain(d[\"value_range\"]);\n                _.each(values, function(v) {\n                  bins[Math.floor(scl(v))]++;\n                });\n\n                var mean = values.length / _networkContinuousColorStops;\n                var vrnc = _.reduce(bins, function(p, c) {\n                  return p + (c - mean) * (c - mean);\n                });\n\n                //console.log (d['value_range'], bins);\n\n                if (vrnc < low_var) {\n                  low_var = vrnc;\n                  d[\"scale\"] = scl;\n                }\n              });\n            }\n\n            d[\"raw_attribute_key\"] = k;\n            if (d.type == \"Number\") {\n              var values = _.filter(\n                _.map(graph_data.Nodes, function(nd) {\n                  return self.attribute_node_value_by_id(nd, k, true);\n                }),\n                function(v) {\n                  return v != _networkMissing;\n                }\n              );\n              // automatically determine the scale and see what spaces the values most evenly\n              determine_scaling(d, values, [\n                d3.scale.linear(),\n                d3.scale.log(),\n                d3.scale.pow().exponent(1 / 3),\n                d3.scale.pow().exponent(0.25),\n                d3.scale.pow().exponent(0.5),\n                d3.scale.pow().exponent(1 / 8),\n                d3.scale.pow().exponent(1 / 16)\n              ]);\n            } else {\n              if (d.type == \"Date\") {\n                var values = _.filter(\n                  _.map(graph_data.Nodes, function(nd) {\n                    try {\n                      var a_date = self.attribute_node_value_by_id(nd, k);\n                      //console.log (k, a_date);\n                      inject_attribute_node_value_by_id(\n                        nd,\n                        k,\n                        self._parse_dates(a_date)\n                      );\n                    } catch (err) {\n                      inject_attribute_node_value_by_id(nd, k, _networkMissing);\n                    }\n                    return self.attribute_node_value_by_id(nd, k);\n                  }),\n                  function(v) {\n                    return v == _networkMissing ? null : v;\n                  }\n                );\n                // automatically determine the scale and see what spaces the values most evenly\n                if (values.length == 0) {\n                  // invalid scale\n                  return {};\n                }\n                determine_scaling(d, values, [d3.time.scale()]);\n              }\n            }\n            return d;\n          }),\n          function(d) {\n            return d.type == \"Number\" || d.type == \"Date\";\n          }\n        );\n\n\n        //console.log (valid_scales);\n        //valid_cats.splice (0,0, {'label' : 'None', 'index' : -1});\n\n        [\n          d3.select(self.get_ui_element_selector_by_role(\"attributes\")),\n          d3.select(\n            self.get_ui_element_selector_by_role(\"attributes_cat\", true)\n          )\n        ].forEach(function(m) {\n          //console.log (m);\n\n          if (m.empty()) {\n            return;\n          }\n          m.selectAll(\"li\").remove();\n\n          var menu_items = [\n            [\n              [\"None\", null, _.partial(self.handle_attribute_categorical, null)]\n            ],\n            [[\"Categorical\", \"heading\", null]]\n          ].concat(\n            valid_cats.map(function(d, i) {\n              return [\n                [\n                  self._menu_label_gen(d),\n                  d[\"raw_attribute_key\"],\n                  _.partial(\n                    self.handle_attribute_categorical,\n                    d[\"raw_attribute_key\"]\n                  )\n                ]\n              ];\n            })\n          );\n\n          if (valid_scales.length) {\n            menu_items = menu_items\n              .concat([[[\"Continuous\", \"heading\", null]]])\n              .concat(\n                valid_scales.map(function(d, i) {\n                  return [\n                    [\n                      self._menu_label_gen(d),\n                      d[\"raw_attribute_key\"],\n                      _.partial(\n                        self.handle_attribute_continuous,\n                        d[\"raw_attribute_key\"]\n                      )\n                    ]\n                  ];\n                })\n              );\n          }\n\n          var cat_menu = m.selectAll(\"li\").data(menu_items);\n\n          cat_menu\n            .enter()\n            .append(\"li\")\n            .classed(\"disabled\", function(d) {\n              return d[0][1] == \"heading\";\n            })\n            .style(\"font-variant\", function(d) {\n              return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n            });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (d[1] == \"heading\") return \"font-style: italic\";\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        [\n          d3.select(self.get_ui_element_selector_by_role(\"shapes\"))\n        ].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_shape_categorical, null)]]\n            ].concat(\n              valid_shapes.map(function(d, i) {\n                return [\n                  [\n                    self._menu_label_gen(d),\n                    d[\"raw_attribute_key\"],\n                    _.partial(\n                      self.handle_shape_categorical,\n                      d[\"raw_attribute_key\"]\n                    )\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n\n        $(\n          self.get_ui_element_selector_by_role(\"opacity_invert\")\n        ).on(\"click\", function(e) {\n          if (self.colorizer[\"opacity_scale\"]) {\n            self.colorizer[\"opacity_scale\"].range(\n              self.colorizer[\"opacity_scale\"].range().reverse()\n            );\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        $(\n          self.get_ui_element_selector_by_role(\"attributes_invert\")\n        ).on(\"click\", function(e) {\n          if (self.colorizer[\"category_id\"]) {\n            graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n              \"scale\"\n            ].range(\n              graph_data[_networkGraphAttrbuteID][\n                self.colorizer[\"category_id\"]\n              ][\"scale\"]\n                .range()\n                .reverse()\n            );\n            self.clusters.forEach(function(the_cluster) {\n              the_cluster[\"gradient\"] = compute_cluster_gradient(\n                the_cluster,\n                self.colorizer[\"category_id\"]\n              );\n            });\n            self.update(true);\n            self.draw_attribute_labels();\n          }\n          $(this).toggleClass(\"btn-active btn-default\");\n        });\n\n        [\n          d3.select(self.get_ui_element_selector_by_role(\"opacity\"))\n        ].forEach(function(m) {\n          m.selectAll(\"li\").remove();\n          var cat_menu = m.selectAll(\"li\").data(\n            [\n              [[\"None\", null, _.partial(self.handle_attribute_opacity, null)]]\n            ].concat(\n              valid_scales.map(function(d, i) {\n                return [\n                  [\n                    d[\"label\"],\n                    d[\"raw_attribute_key\"],\n                    _.partial(\n                      self.handle_attribute_opacity,\n                      d[\"raw_attribute_key\"]\n                    )\n                  ]\n                ];\n              })\n            )\n          );\n\n          cat_menu.enter().append(\"li\").style(\"font-variant\", function(d) {\n            return d[0][1] < -1 ? \"small-caps\" : \"normal\";\n          });\n          cat_menu\n            .selectAll(\"a\")\n            .data(function(d) {\n              return d;\n            })\n            .enter()\n            .append(\"a\")\n            .text(function(d, i, j) {\n              return d[0];\n            })\n            .attr(\"style\", function(d, i, j) {\n              if (j == 0) {\n                return \" font-weight: bold;\";\n              }\n              return null;\n            })\n            .attr(\"href\", \"#\")\n            .on(\"click\", function(d) {\n              if (d[2]) {\n                d[2].call();\n              }\n            });\n        });\n      }\n    };\n\n    if (attributes) {\n      /*\n         map attributes into nodes and into the graph object itself using\n         _networkGraphAttrbuteID as the key\n      */\n\n      if (\"attribute_map\" in attributes) {\n        var attribute_map = attributes[\"attribute_map\"];\n\n        if (\"map\" in attribute_map && attribute_map[\"map\"].length > 0) {\n          graph_data[_networkGraphAttrbuteID] = attribute_map[\n            \"map\"\n          ].map(function(a, i) {\n            return {\n              label: a,\n              type: null,\n              values: {},\n              index: i,\n              range: 0\n            };\n          });\n\n          graph_data.Nodes.forEach(function(n) {\n            n[_networkGraphAttrbuteID] = n.id.split(attribute_map[\"delimiter\"]);\n            n[_networkGraphAttrbuteID].forEach(function(v, i) {\n              if (i < graph_data[_networkGraphAttrbuteID].length) {\n                if (!(v in graph_data[_networkGraphAttrbuteID][i][\"values\"])) {\n                  graph_data[_networkGraphAttrbuteID][i][\"values\"][v] =\n                    graph_data[_networkGraphAttrbuteID][i][\"range\"];\n                  graph_data[_networkGraphAttrbuteID][i][\"range\"] += 1;\n                }\n              }\n              //graph_data [_networkGraphAttrbuteID][i][\"values\"][v] = 1 + (graph_data [_networkGraphAttrbuteID][i][\"values\"][v] ? graph_data [_networkGraphAttrbuteID][i][\"values\"][v] : 0);\n            });\n          });\n\n          graph_data[_networkGraphAttrbuteID].forEach(function(d) {\n            if (\n              d[\"range\"] < graph_data.Nodes.length &&\n              d[\"range\"] > 1 &&\n              d[\"range\"] <= 20\n            ) {\n              d[\"type\"] = \"category\";\n            }\n          });\n        }\n      }\n\n      _.each(self._networkPredefinedAttributeTransforms, function(\n        computed,\n        key\n      ) {\n        if (_.isFunction(computed)) {\n          computed = computed(self);\n        }\n\n        if (\n          !computed[\"depends\"] ||\n          _.has(graph_data[_networkGraphAttrbuteID], computed[\"depends\"])\n        ) {\n          var extension = {};\n          extension[key] = computed;\n          _.extend(graph_data[_networkGraphAttrbuteID], extension);\n          self.inject_attribute_description(key, computed);\n          _.each(graph_data.Nodes, function(node) {\n            inject_attribute_node_value_by_id(\n              node,\n              key,\n              computed[\"map\"](node, self)\n            );\n          });\n        }\n      });\n\n      self._aux_populate_category_menus();\n\n      // populate the UI elements\n    }\n\n    if (self.cluster_sizes.length > max_points_to_render) {\n      var sorted_array = self.cluster_sizes\n        .map(function(d, i) {\n          return [d, i + 1];\n        })\n        .sort(function(a, b) {\n          return a[0] - b[0];\n        });\n\n      for (var k = 0; k < sorted_array.length - max_points_to_render; k++) {\n        self.exclude_cluster_ids[sorted_array[k][1]] = 1;\n      }\n\n      warning_string =\n        \"Excluded \" +\n        (sorted_array.length - max_points_to_render) +\n        \" clusters (maximum size \" +\n        sorted_array[k - 1][0] +\n        \" nodes) because only \" +\n        max_points_to_render +\n        \" objects can be shown at once.\";\n    }\n\n    self.edges.forEach(function(e, i) {\n      self.clusters[\n        self.cluster_mapping[self.nodes[e.target].cluster]\n      ].distances.push(e.length);\n    });\n\n    self.clusters.forEach(function(d, i) {\n      d.distances = helpers.describe_vector(d.distances);\n    });\n    //self.clusters\n\n    self.update();\n  }\n\n  function sort_table_toggle_icon(element, value) {\n     //console.log (value);\n     if (value) {\n      $(element).data(\"sorted\", value);\n      d3\n        .select(element)\n        .selectAll(\"i\")\n        .classed(\"fa-sort-amount-desc\", value == \"desc\")\n        .classed(\"fa-sort-amount-asc\", value == \"asc\")\n        .classed(\"fa-sort\", value == \"unsorted\");\n    } else {\n      var sorted_state = $(element).data(\"sorted\");\n      sort_table_toggle_icon(element, sorted_state == \"asc\" ? \"desc\" : \"asc\");\n      return sorted_state == \"asc\" ? d3.descending : d3.ascending;\n    }\n  }\n\n  /** element is the sortable clicker **/\n  function sort_table_by_column(element, datum) {\n    if (d3.event) {\n     d3.event.preventDefault();\n    }\n    var table_element = $(element).closest(\"table\");\n    if (table_element.length) {\n      var sort_on = parseInt($(element).data(\"column-id\"));\n      var sort_key = datum.sort;\n      var sorted_state = $(element).data(\"sorted\");\n      var sorted_function = sort_table_toggle_icon(element);\n\n      var sort_accessor;\n\n      if (sort_key) {\n        if (_.isFunction(sort_key)) {\n          sort_accessor = function(x) {\n            return sort_key(x);\n          };\n        } else {\n          sort_accessor = function(x) {\n            var val = x[sort_key];\n            if (_.isFunction(val)) return val();\n            return val;\n          };\n        }\n      } else {\n        sort_accessor = function(x) {\n          return x;\n        };\n      }\n\n      d3\n        .select(table_element[0])\n        .select(\"tbody\")\n        .selectAll(\"tr\")\n        .sort(function(a, b) {\n          return sorted_function(\n            sort_accessor(a[sort_on]),\n            sort_accessor(b[sort_on])\n          );\n        });\n\n      // select all other elements from thead and toggle their icons\n\n      $(table_element)\n        .find(\"thead [data-column-id]\")\n        .filter(function() {\n          return parseInt($(this).data(\"column-id\")) != sort_on;\n        })\n        .each(function() {\n          sort_table_toggle_icon(this, \"unsorted\");\n        });\n    }\n  }\n\n  function format_a_cell(data, index, item) {\n    var this_sel = d3.select(item);\n    var current_value =\n      typeof data.value === \"function\" ? data.value() : data.value;\n\n    var handle_sort = this_sel;\n\n    if (\"callback\" in data) {\n      handle_sort = data.callback(item, current_value);\n    } else {\n      var repr = \"format\" in data ? data.format(current_value) : current_value;\n      if (\"html\" in data) this_sel.html(repr);\n      else this_sel.text(repr);\n    }\n      if (handle_sort && (\"sort\" in data)) {\n        var clicker = handle_sort\n          .append(\"a\")\n          .property(\"href\", \"#\")\n          .on(\"click\", function(d) {\n            sort_table_by_column(this, d);\n          })\n          .attr(\"data-sorted\", \"unsorted\")\n          .attr(\"data-column-id\", index);\n        clicker\n          .append(\"i\")\n          .classed(\"fa fa-sort\", true)\n          .style(\"margin-left\", \"0.2em\");\n\n        if (\"presort\" in data) {\n            if (data[\"presort\"] == \"desc\") {\n                clicker.attr(\"data-sorted\", \"asc\");\n            }\n            sort_table_by_column (clicker.node(), data);\n        }\n    }\n    if (\"help\" in data) {\n      this_sel.attr(\"title\", data.help);\n    }\n  }\n\n  function add_a_sortable_table(container, headers, content, overwrite) {\n    var thead = container.selectAll(\"thead\");\n\n    var tbody = container.selectAll(\"tbody\");\n    if (tbody.empty() || overwrite) {\n      tbody.remove();\n      tbody = container.append(\"tbody\");\n      tbody\n        .selectAll(\"tr\")\n        .data(content)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            //handle_cluster_click;\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n\n   // head AFTER rows, so we can handle pre-sorting\n   if (thead.empty() || overwrite) {\n      thead.remove();\n      thead = container.append(\"thead\");\n      thead\n        .selectAll(\"tr\")\n        .data(headers)\n        .enter()\n        .append(\"tr\")\n        .selectAll(\"th\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"th\")\n        .call(function(selection) {\n          return selection.each(function(d, i) {\n            format_a_cell(d, i, this);\n          });\n        });\n    }\n  }\n\n  function _cluster_table_draw_id(element, payload) {\n    var this_cell = d3.select(element);\n    this_cell.selectAll(\"*\").remove();\n    var _is_subcluster = payload[1];\n    var cluster_id = payload[0];\n\n    if (_is_subcluster) {\n        //console.log (payload);\n\n      //this_cell.append(\"i\")\n      //      .classed(\"fa fa-arrow-circle-o-right\", true).style(\"padding-right\", \"0.25em\");\n\n      /*if (payload[2].rr_count) {\n        this_cell\n          .append(\"i\")\n          .classed(\"fa fa-exclamation-triangle\", true)\n          .attr(\"title\", \"Subcluster has recent/rapid nodes\");\n      }*/\n      this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n\n      this_cell\n        .append(\"button\")\n        .classed(\"btn btn-primary btn-xs pull-right\", true)\n        .text(\"view\")\n        .on(\"click\", function(e) {\n          self.view_subcluster(payload[2]);\n        });\n    } else {\n      this_cell.append(\"span\").text(cluster_id).style(\"padding-right\", \"0.5em\");\n      this_cell\n        .append(\"button\")\n        .classed(\"btn btn-primary btn-xs pull-right\", true)\n        .style(\"margin-right\", \"0.25em\")\n        .text(\"view\")\n        .on(\"click\", function(e) {\n          self.open_exclusive_tab_view(cluster_id);\n        });\n    }\n    this_cell\n      .append(\"button\")\n      .classed(\"btn btn-default btn-xs pull-right\", true)\n      .style(\"margin-right\", \"0.25em\")\n      .text(\"list\")\n      .attr(\"data-toggle\", \"modal\")\n      .attr(\n        \"data-target\",\n        self.get_ui_element_selector_by_role(\"cluster_list\", true)\n      )\n      .attr(\"data-cluster\", cluster_id);\n  }\n\n  function _cluster_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n    var labels = [[payload[0] ? \"expand\" : \"collapse\", 0]];\n    if (payload[1]) {\n      labels.push([\"problematic\", 1]);\n    }\n    if (payload[2]) {\n      labels.push([\"match\", 1]);\n    }\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-default btn-xs\", true)\n      .text(function(d) {\n        return d[0];\n      })\n      .style(\"margin-right\", \"0.25em\")\n      .attr(\"disabled\", function(d) {\n        return d[1] ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (d[1] == 0) {\n          if (payload[0]) {\n            expand_cluster(\n              self.clusters[payload[payload.length - 1] - 1],\n              true\n            );\n          } else {\n            collapse_cluster(self.clusters[payload[payload.length - 1] - 1]);\n          }\n          self.update_volatile_elements(self.cluster_table);\n          if (self.subcluster_table) {\n            self.update_volatile_elements(self.subcluster_table);\n          }\n        }\n      });\n  }\n\n  function _extract_single_cluster(nodes, filter, no_clone, given_json, include_extra_edges) {\n    /**\n        Extract the nodes and edges between them into a separate objects\n        @param nodes [array]  the list of nodes to extract\n        @param filter [function, optional] (edge) -> bool filtering function for deciding which edges will be used to define clusters\n        @param no_clone [bool] if set to T, node objects are not shallow cloned in the return object\n\n        @return [dict] the object representing \"Nodes\" and \"Edges\" in the extracted cluster\n\n    */\n\n    var cluster_json = {};\n    var map_to_id = {};\n\n    cluster_json.Nodes = _.map(nodes, function(c, i) {\n      map_to_id[c.id] = i;\n      if (no_clone) {\n        return c;\n      }\n      var cc = _.clone(c);\n      cc.cluster = 1;\n      return cc;\n    });\n\n    given_json = given_json || json;\n\n    cluster_json.Edges = _.filter(given_json.Edges, function(e) {\n      return (\n        given_json.Nodes[e.source].id in map_to_id &&\n        given_json.Nodes[e.target].id in map_to_id && (\n        include_extra_edges || !self.is_edge_injected (e))\n      );\n    });\n\n    if (filter) {\n      cluster_json.Edges = _.filter(cluster_json.Edges, filter);\n    }\n\n    cluster_json.Edges = _.map(cluster_json.Edges, function(e) {\n      var ne = _.clone(e);\n      ne.source = map_to_id[given_json.Nodes[e.source].id];\n      ne.target = map_to_id[given_json.Nodes[e.target].id];\n      return ne;\n    });\n\n    return cluster_json;\n  }\n\n  function _node_table_draw_buttons(element, payload) {\n    var this_cell = d3.select(element);\n    var labels = [\n      payload.length == 1\n        ? _.isString(payload[0])\n          ? [payload[0], 1, \"btn-warning\"]\n          : [\"can't be shown\", 1]\n        : [payload[0] ? \"hide\" : \"show\", 0]\n    ];\n\n    if (payload.length == 2 && payload[1] >= 1) {\n      labels.push([\n        \"view cluster\",\n        function() {\n          self.open_exclusive_tab_view(payload[1]);\n        }\n      ]);\n    }\n\n    var buttons = this_cell.selectAll(\"button\").data(labels);\n    buttons.enter().append(\"button\");\n    buttons.exit().remove();\n    buttons\n      .classed(\"btn btn-xs btn-node-property\", true)\n      .classed(\"btn-primary\", true)\n      //.classed(function (d) {return d.length >=3 ? d[2] : \"\";}, function (d) {return d.length >= 3;})\n      .text(function(d) {\n        return d[0];\n      })\n      .attr(\"disabled\", function(d) {\n        return d[1] && !_.isFunction(d[1]) ? \"disabled\" : null;\n      })\n      .on(\"click\", function(d) {\n        if (_.isFunction(d[1])) {\n          d[1].call(d);\n        } else {\n          if (d[1] == 0) {\n            if (payload[0]) {\n              collapse_cluster(\n                self.clusters[payload[payload.length - 1] - 1],\n                true\n              );\n            } else {\n              expand_cluster(self.clusters[payload[payload.length - 1] - 1]);\n            }\n            //format_a_cell(d3.select(element).datum(), null, element);\n            self.update_volatile_elements(self.node_table);\n          }\n        }\n      });\n    buttons.each(function(d, e) {\n      if (d.length >= 3) {\n        d3.select(this).classed(\"btn-primary\", false).classed(d[2], true);\n      }\n    });\n  }\n\n  self.update_volatile_elements = function(container) {\n    container\n      .selectAll(\"td\")\n      .filter(function(d, i) {\n        return \"volatile\" in d;\n      })\n      .each(function(d, i) {\n        format_a_cell(d, i, this);\n      });\n  };\n\n  self.draw_extended_node_table = function (node_list) {\n    if (self.node_table) {\n      node_list = node_list || self.nodes;\n      var column_ids = self._extract_exportable_attributes();\n\n      self.displayed_node_subset = _.map (self.displayed_node_subset, function (n, i) {\n        if (_.isString (n)) {\n\n\n            n = _.find (column_ids, function (cd) {\n                return cd.raw_attribute_key == n;\n            });\n\n            if (n) {\n                return n;\n            }\n            return column_ids[i];\n        }\n        return n;\n      });\n\n\n      var node_data = self._extract_attributes_for_nodes (node_list, self.displayed_node_subset);\n      node_data.splice (0,1);\n      var table_headers = _.map (self.displayed_node_subset, function (n, col_id) {\n        return {\n            value : n.raw_attribute_key,\n            sort : \"value\",\n            help : \"label\" in n ? n.label : n.raw_attribute_key,\n            callback: function(element, payload) {\n                var dropdown = d3.select (element).append (\"div\").classed (\"dropdown\", true);\n                var menu_id = \"hivtrace_node_column_\" + payload;\n                var dropdown_button = dropdown.append (\"button\").classed ({\"btn\" : true,\n                                                                           \"btn-default\": true,\n                                                                            \"dropdown-toggle\": true})\n                                              .attr (\"type\", \"button\").attr (\"data-toggle\", \"dropdown\")\n                                              .attr (\"aria-haspopup\", \"true\").attr (\"aria-expanded\", \"false\")\n                                              .attr (\"id\", menu_id);\n\n                if (\"format\" in n) {\n                    dropdown_button.text (n.format (payload));\n                } else {\n                    dropdown_button.text (payload);\n                }\n                dropdown_button.append (\"i\").classed({\n                      \"fa\": true,\n                      \"fa-caret-down\" : true,\n                      \"fa-lg\" : true\n                    });\n                var dropdown_list = dropdown.append (\"ul\")\n                                            .classed (\"dropdown-menu\", true)\n                                            .attr (\"aria-labelledby\", menu_id);\n\n                dropdown_list = dropdown_list.selectAll (\"li\").data (_.filter (column_ids, function (alt) {\n                    return alt.raw_attribute_key != n.raw_attribute_key;\n                }));\n                dropdown_list.enter ().append (\"li\");\n                dropdown_list.each (function (data, i) {\n                    var handle_change = d3.select(this).append (\"a\").attr (\"href\", \"#\").text (function (data) {\n                        return data.raw_attribute_key;\n                    });\n                    handle_change.on (\"click\", function (d) {\n                        self.displayed_node_subset[col_id] = d;\n                        self.draw_extended_node_table (node_list);\n                    });\n                });\n                return dropdown;\n            }\n        }\n      });\n\n      var table_rows = node_data.map (function(n, i) {\n            return _.map (n, function (cell, c) {\n                if (self.displayed_node_subset[c].type == \"Date\") {\n                    return {value : cell, format : function (v) {\n                        if (v == _networkMissing) {\n                            return v;\n                        }\n                        return _defaultDateViewFormatSlider (v);\n\n\n                    }};\n                } else {\n                    if (self.displayed_node_subset[c].type == \"Number\") {\n                        return {value : cell, format : d3.format(\".2f\")};\n                    }\n                }\n                return {value : cell};\n\n            });\n      });\n\n      self.draw_node_table (null, null, [table_headers], table_rows);\n\n    }\n  };\n\n  self.draw_node_table = function(extra_columns, node_list, headers, rows) {\n    if (self.node_table) {\n      node_list = node_list || self.nodes;\n\n     if (!headers) {\n         headers = [\n            [\n              {\n                value: \"ID\",\n                sort: \"value\",\n                help: \"Node ID\"\n              },\n              {\n                value: \"Action\",\n                sort: \"value\"\n              },\n              {\n                value: \"# of links\",\n                sort: \"value\",\n                help: \"Number of links (Node degree)\"\n              },\n              {\n                value: \"Cluster\",\n                sort: \"value\",\n                help: \"Which cluster does the node belong to\"\n              }\n            ]\n          ];\n\n          if (extra_columns) {\n            _.each(extra_columns, function(d) {\n              headers[0].push(d.description);\n            });\n          }\n\n        rows = node_list.map(function(n, i) {\n          var this_row = [\n          {\n            value: n.id,\n            help: \"Node ID\"\n          },\n          {\n            value: function() {\n              if (n.node_class != \"injected\") {\n                try {\n                  if (self.exclude_cluster_ids[n.cluster]) {\n                    // parent cluster can't be rendered\n                    // because of size restrictions\n                    return [n.cluster];\n                  }\n                  return [\n                    !self.clusters[self.cluster_mapping[n.cluster]].collapsed,\n                    n.cluster\n                  ];\n                } catch (err) {\n                  return [-1];\n                }\n              } else {\n                return [n.node_annotation];\n              }\n            },\n            callback: _node_table_draw_buttons,\n            volatile: true\n          },\n          {\n            value: \"degree\" in n ? n.degree : \"Not defined\",\n            help: \"Node degree\"\n          },\n          {\n            value: \"cluster\" in n ? n.cluster : \"Not defined\",\n            help: \"Which cluster does the node belong to\"\n          }\n        ];\n\n            if (extra_columns) {\n              _.each(extra_columns, function(ed) {\n                this_row.push(ed.generator(n, self));\n              });\n            }\n            return this_row;\n          });\n      }\n\n\n      add_a_sortable_table(\n        self.node_table,\n        headers,\n        rows,\n        true\n        // rows\n      );\n    }\n  };\n\n  self.draw_cluster_table = function(\n    extra_columns,\n    element,\n    options\n  ) {\n    var skip_clusters =    (options && options[\"no-clusters\"]) ? true  : false;\n    var skip_subclusters = (options && options[\"subclusters\"]) ? false  : true;\n\n    element = element || self.cluster_table;\n    if (element) {\n      var headers = [\n        [\n          {\n            value: \"Cluster ID\",\n            sort: function(c) {\n              return _.map(c.value[0].split(\".\"), function(ss) {\n                return _networkDotFormatPadder(+ss);\n              }).join(\"|\");\n            },\n            help: \"Unique cluster ID\"\n          },\n          {\n            value: \"Visibility\",\n            sort: \"value\",\n            help: \"Visibility in the network tab\"\n          },\n          {\n            value: \"Size\",\n            sort: \"value\",\n            help: \"Number of nodes in the cluster\"\n          }\n        ]\n      ];\n\n      if (!self._is_CDC_) {\n        headers[0].push({\n          value: \"# links/node<br>Mean [Median, IQR]\",\n          html: true\n        });\n\n        headers[0].push({\n          value: \"Genetic distance<br>Mean [Median, IQR]\",\n          help: \"Genetic distance among nodes in the cluster\",\n          html: true\n        });\n      }\n\n      if (extra_columns) {\n        _.each(extra_columns, function(d) {\n          headers[0].push(d.description);\n        });\n      }\n\n      if (options && options [\"headers\"]) {\n        options[\"headers\"] (headers);\n      }\n\n      var rows = [];\n\n      _.each(self.clusters, function(cluster) {\n        var make_row = function(d, is_subcluster) {\n          var this_row = [\n            {\n              value: [d.cluster_id, is_subcluster, d], //.cluster_id,\n              callback: _cluster_table_draw_id\n            },\n            {\n              value: function() {\n                var actual_cluster = is_subcluster ? d.parent_cluster : d;\n\n                return [\n                  actual_cluster.collapsed,\n                  actual_cluster.hxb2_linked,\n                  actual_cluster.match_filter,\n                  actual_cluster.cluster_id\n                ];\n              },\n              callback: _cluster_table_draw_buttons,\n              volatile: true\n            },\n            {\n              value: d.children.length\n            }\n          ];\n\n          if (!self._is_CDC_) {\n            this_row.push({\n              value: d.degrees,\n              format: function(d) {\n                try {\n                  return (\n                    _defaultFloatFormat(d[\"mean\"]) +\n                    \" [\" +\n                    _defaultFloatFormat(d[\"median\"]) +\n                    \", \" +\n                    _defaultFloatFormat(d[\"Q1\"]) +\n                    \" - \" +\n                    _defaultFloatFormat(d[\"Q3\"]) +\n                    \"]\"\n                  );\n                } catch (e) {\n                  return \"\";\n                }\n              }\n            });\n            this_row.push({\n              value: d.distances,\n              format: function(d) {\n                try {\n                  return (\n                    _defaultFloatFormat(d[\"mean\"]) +\n                    \" [\" +\n                    _defaultFloatFormat(d[\"median\"]) +\n                    \", \" +\n                    _defaultFloatFormat(d[\"Q1\"]) +\n                    \" - \" +\n                    _defaultFloatFormat(d[\"Q3\"]) +\n                    \"]\"\n                  );\n                } catch (e) {\n                  return \"\";\n                }\n              }\n            });\n          }\n          if (extra_columns) {\n            _.each(extra_columns, function(ed) {\n              this_row.push(ed.generator(d, self));\n            });\n          }\n\n          return this_row;\n        };\n\n        if (!skip_clusters) {\n          rows.push(make_row(cluster, false));\n        }\n\n        if (!skip_subclusters) {\n          _.each(cluster.subclusters, function(sub_cluster) {\n            rows.push(make_row(sub_cluster, true));\n          });\n        }\n      });\n\n      add_a_sortable_table(element, headers, rows, true);\n    }\n  };\n\n  /*------------ Update layout code ---------------*/\n  function update_network_string(node_count, edge_count) {\n    if (network_status_string) {\n      var clusters_shown = _.filter(self.clusters, function(c) {\n          return !c.collapsed;\n        }).length,\n        clusters_removed = self.cluster_sizes.length - self.clusters.length,\n        nodes_removed =\n          graph_data.Nodes.length - singletons - self.nodes.length;\n\n      var clusters_selected = _.filter(self.clusters, function(c) {\n        return (\n          !c.is_hidden && c.match_filter !== undefined && c.match_filter > 0\n        );\n      }).length;\n\n      var nodes_selected = _.filter(self.nodes, function(n) {\n        return n.match_filter && !n.is_hidden;\n      }).length;\n\n      /*var s = \"Displaying a network on <strong>\" + self.nodes.length + \"</strong> nodes, <strong>\" + self.clusters.length + \"</strong> clusters\"\n              + (clusters_removed > 0 ? \" (an additional \" + clusters_removed + \" clusters and \" + nodes_removed + \" nodes have been removed due to network size constraints)\" : \"\") + \". <strong>\"\n              + clusters_shown +\"</strong> clusters are expanded. Of <strong>\" + self.edges.length + \"</strong> edges, <strong>\" + draw_me.edges.length + \"</strong>, and of  <strong>\" + self.nodes.length  + \" </strong> nodes,  <strong>\" + draw_me.nodes.length + \" </strong> are displayed. \";\n      if (singletons > 0) {\n          s += \"<strong>\" +singletons + \"</strong> singleton nodes are not shown. \";\n      }*/\n\n      var s =\n        \"<span class = 'badge'>\" +\n        self.clusters.length +\n        \"</span> clusters <span class = 'label label-primary'>\" +\n        clusters_shown +\n        \" expanded / \" +\n        clusters_selected +\n        \" match </span> <span class = 'badge'> \" +\n        self.nodes.length +\n        \"</span> nodes <span class = 'label label-primary'>\" +\n        node_count +\n        \" shown / \" +\n        nodes_selected +\n        \" match </span> <span class = 'badge'> \" +\n        self.edges.length +\n        \"</span> \" +\n        (self._is_CDC_ ? \"links\" : \"edges\") +\n        \" <span class = 'label label-primary'>\" +\n        edge_count +\n        \" shown</span>\";\n\n      d3.select(network_status_string).html(s);\n    }\n  }\n\n  function draw_a_node(container, node) {\n    if (node) {\n      container = d3.select(container);\n\n      var symbol_type =\n        node.hxb2_linked && !node.is_lanl\n          ? \"cross\"\n          : node.is_lanl ? \"triangle-down\" : self.node_shaper[\"shaper\"](node);\n\n      node.rendered_size = Math.sqrt(node_size(node)) / 2 + 2;\n\n      container\n        .attr(\"d\", misc.symbol(symbol_type).size(node_size(node)))\n        .attr(\"class\", \"node\")\n        .classed(\"selected_object\", function(d) {\n          return d.match_filter;\n        })\n        .classed(\"injected_object\", function(d) {\n          return d.node_class == \"injected\";\n        })\n        .attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\";\n        })\n        .style(\"fill\", function(d) {\n          return node_color(d);\n        })\n        .style(\"opacity\", function(d) {\n          return node_opacity(d);\n        })\n        .style(\"display\", function(d) {\n          if (d.is_hidden) return \"none\";\n          return null;\n        })\n        .on(\"click\", handle_node_click)\n        .on(\"mouseover\", node_pop_on)\n        .on(\"mouseout\", node_pop_off)\n        .call(network_layout.drag().on(\"dragstart\", node_pop_off));\n    }\n  }\n\n  function draw_a_cluster(container, the_cluster) {\n    var container_group = d3.select(container);\n\n    var draw_from = the_cluster[\"binned_attributes\"]\n      ? the_cluster[\"binned_attributes\"].map(function(d) {\n          return d.concat([0]);\n        })\n      : [[null, 1, 0]];\n\n    if (the_cluster.match_filter) {\n      draw_from = draw_from.concat([\n        [\"selected\", the_cluster.match_filter, 1],\n        [\n          \"not selected\",\n          the_cluster.children.length - the_cluster.match_filter,\n          1\n        ]\n      ]);\n    }\n\n    var sums = [\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] == 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      ),\n      d3.sum(\n        draw_from.filter(function(d) {\n          return d[2] != 0;\n        }),\n        function(d) {\n          return d[1];\n        }\n      )\n    ];\n\n    var running_totals = [0, 0];\n\n    draw_from = draw_from.map(function(d) {\n      var index = d[2];\n      var v = {\n        container: container,\n        cluster: the_cluster,\n        startAngle: running_totals[index] / sums[index] * 2 * Math.PI,\n        endAngle: (running_totals[index] + d[1]) / sums[index] * 2 * Math.PI,\n        name: d[0],\n        rim: index > 0\n      };\n      running_totals[index] += d[1];\n      return v;\n    });\n\n    var arc_radius = cluster_box_size(the_cluster) * 0.5;\n    the_cluster.rendered_size = arc_radius + 2;\n    var paths = container_group.selectAll(\"path\").data(draw_from);\n    paths.enter().append(\"path\");\n    paths.exit().remove();\n\n    paths\n      .classed(\"cluster\", true)\n      .classed(\"hiv-trace-problematic\", function(d) {\n        return the_cluster.hxb2_linked && !d.rim;\n      })\n      .classed(\"hiv-trace-selected\", function(d) {\n        return d.rim;\n      })\n      .attr(\"d\", function(d) {\n        return (d.rim\n          ? d3.svg.arc().innerRadius(arc_radius + 2).outerRadius(arc_radius + 5)\n          : d3.svg.arc().innerRadius(0).outerRadius(arc_radius))(d);\n      })\n      .style(\"fill\", function(d, i) {\n        return d.rim\n          ? self.colorizer[\"selected\"](d.name)\n          : the_cluster[\"gradient\"]\n            ? \"url(#\" + the_cluster[\"gradient\"] + \")\"\n            : cluster_color(the_cluster, d.name);\n      })\n      .style(\"stroke-linejoin\", function(d, i) {\n        return draw_from.length > 1 ? \"round\" : \"\";\n      })\n      .style(\"display\", function(d) {\n        if (the_cluster.is_hidden) return \"none\";\n        return null;\n      });\n  }\n\n  function check_for_predefined_shapes(cat_id) {\n    //console.log (cat_id);\n\n    if (cat_id in _networkPresetShapeSchemes) {\n      var domain = _.range(\n        0,\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"].length\n      );\n\n      return {\n        domain: domain,\n        range: _.map(domain, function(v) {\n          return _networkPresetShapeSchemes[\n            cat_id\n          ][graph_data[_networkGraphAttrbuteID][cat_id][\"value_range\"][v]];\n        })\n      };\n    } else {\n      return {\n        domain: _.range(\n          0,\n          graph_data[_networkGraphAttrbuteID][cat_id].dimension\n        ),\n        range: _networkShapeOrdering\n      };\n    }\n  }\n\n  self.handle_shape_categorical = function(cat_id) {\n    var set_attr = \"None\";\n\n    [\"shapes\"].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl + \"_label\"))\n        .html(\"Shape: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    if (cat_id) {\n      var domain_range = check_for_predefined_shapes(cat_id);\n\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n      self.node_shaper[\"id\"] = cat_id;\n      self.node_shaper[\"shaper\"] = function(d) {\n        return shape_mapper(\n          graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"](\n            self.attribute_node_value_by_id(d, cat_id)\n          )\n        );\n      };\n      self.node_shaper[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n    } else {\n      self.node_shaper.id = null;\n      self.node_shaper.shaper = function() {\n        return \"circle\";\n      };\n      self.node_shaper[\"category_map\"] = null;\n    }\n    //console.log (graph_data [_networkGraphAttrbuteID][cat_id]['value_map'], self.node_shaper.domain(), self.node_shaper.range());\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.draw_attribute_labels = function() {\n\n    var determine_label_format_cont =   function (field_data) {\n        if (\"label_format\" in field_data) {\n            return field_data[\"label_format\"];\n        }\n        if (field_data[\"type\"] == \"Date\") {\n            return _defaultDateViewFormatShort;\n        }\n        return d3.format(\",.4r\");\n    };\n\n\n    self.legend_svg.selectAll(\"g.hiv-trace-legend\").remove();\n\n    var offset = 10;\n\n    if (self.legend_caption) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(self.legend_caption)\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n    }\n\n    if (self.edge_legend) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(self.edge_legend[\"caption\"])\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      _.each(self.edge_legend[\"types\"], function(value, key) {\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(key);\n\n        value.call(\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"line\")\n            .attr(\"x1\", \"0\")\n            .attr(\"y1\", \"-4\")\n            .attr(\"x2\", \"12\")\n            .attr(\"y2\", \"-4\")\n            .classed(\"legend\", true)\n        );\n\n        offset += 18;\n      });\n    }\n\n    if (self.colorizer[\"category_id\"]) {\n      //console.log (self.colorizer);\n      //_.each (self.colorizer[\"category_map\"](null, \"map\"), function (v){ console.log (v); });\n\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Color: \" + self._menu_label_gen (graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]]))\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      if (self.colorizer[\"continuous\"]) {\n        var anchor_format = determine_label_format_cont (graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]]);\n\n         var scale =\n          graph_data[_networkGraphAttrbuteID][self.colorizer[\"category_id\"]][\n            \"scale\"\n          ];\n\n        _.each(_.range(_networkContinuousColorStops), function(value) {\n          var x = scale.invert(value);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(anchor_format(x));\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](x));\n\n          offset += 18;\n        });\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(\"missing\");\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", _networkMissingColor);\n\n        offset += 18;\n      } else {\n        _.each(self.colorizer[\"category_map\"](null, \"map\"), function(\n          value,\n          key\n        ) {\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(20,\" + offset + \")\")\n            .append(\"text\")\n            .text(key);\n          self.legend_svg\n            .append(\"g\")\n            .classed(\"hiv-trace-legend\", true)\n            .attr(\"transform\", \"translate(0,\" + offset + \")\")\n            .append(\"circle\")\n            .attr(\"cx\", \"8\")\n            .attr(\"cy\", \"-4\")\n            .attr(\"r\", \"8\")\n            .classed(\"legend\", true)\n            .style(\"fill\", self.colorizer[\"category\"](key));\n\n          offset += 18;\n        });\n      }\n    }\n\n    if (self.node_shaper[\"id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Shape: \" + self._menu_label_gen (graph_data[_networkGraphAttrbuteID][self.node_shaper[\"id\"]]))\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var domain_range = check_for_predefined_shapes(self.node_shaper[\"id\"]);\n      var shape_mapper = d3.scale\n        .ordinal()\n        .domain(domain_range[\"domain\"])\n        .range(domain_range[\"range\"]);\n\n      _.each(self.node_shaper[\"category_map\"](null, \"map\"), function(\n        value,\n        key\n      ) {\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(key);\n\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"path\")\n          .attr(\"transform\", \"translate(5,-5)\")\n          .attr(\"d\", misc.symbol(shape_mapper(value)).size(128))\n          .classed(\"legend\", true)\n          .style(\"fill\", \"none\");\n\n        offset += 18;\n      });\n    }\n\n    if (self.colorizer[\"opacity_id\"]) {\n      self.legend_svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .classed(\"hiv-trace-legend\", true)\n        .append(\"text\")\n        .text(\"Opacity: \" + self._menu_label_gen (graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]]))\n        .style(\"font-weight\", \"bold\");\n      offset += 18;\n\n      var anchor_format = determine_label_format_cont (graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]]);\n\n\n      var scale =\n        graph_data[_networkGraphAttrbuteID][self.colorizer[\"opacity_id\"]][\n          \"scale\"\n        ];\n\n      _.each(_.range(_networkContinuousColorStops), function(value) {\n        var x = scale.invert(value);\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(20,\" + offset + \")\")\n          .append(\"text\")\n          .text(anchor_format(x));\n        self.legend_svg\n          .append(\"g\")\n          .classed(\"hiv-trace-legend\", true)\n          .attr(\"transform\", \"translate(0,\" + offset + \")\")\n          .append(\"circle\")\n          .attr(\"cx\", \"8\")\n          .attr(\"cy\", \"-4\")\n          .attr(\"r\", \"8\")\n          .classed(\"legend\", true)\n          .style(\"fill\", \"black\")\n          .style(\"opacity\", self.colorizer[\"opacity\"](x));\n\n        offset += 18;\n      });\n\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(20,\" + offset + \")\")\n        .append(\"text\")\n        .text(\"missing\");\n      self.legend_svg\n        .append(\"g\")\n        .classed(\"hiv-trace-legend\", true)\n        .attr(\"transform\", \"translate(0,\" + offset + \")\")\n        .append(\"circle\")\n        .attr(\"cx\", \"8\")\n        .attr(\"cy\", \"-4\")\n        .attr(\"r\", \"8\")\n        .classed(\"legend\", true)\n        .style(\"fill\", \"black\")\n        .style(\"opacity\", _networkMissingOpacity);\n\n      offset += 18;\n    }\n  };\n\n  function compute_cluster_gradient(cluster, cat_id) {\n    if (cat_id) {\n      var id = self.dom_prefix + \"-cluster-gradient-\" + self.gradient_id++;\n      var gradient = self.network_svg\n        .selectAll(\"defs\")\n        .append(\"radialGradient\")\n        .attr(\"id\", id);\n      var values = _.map(cluster.children, function(node) {\n        var value = self.attribute_node_value_by_id(node, cat_id);\n        return value == _networkMissing ? Infinity : value;\n      }).sort(function(a, b) {\n        return 0 + a - (0 + b);\n      });\n      var finite = _.filter(values, function(d) {\n        return d < Infinity;\n      });\n      var infinite = values.length - finite.length;\n\n      if (infinite) {\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", _networkMissingColor);\n        gradient\n          .append(\"stop\")\n          .attr(\"offset\", \"\" + infinite / values.length * 100 + \"%\")\n          .attr(\"stop-color\", _networkMissingColor);\n      }\n\n      _.each(finite, function(value, index) {\n        gradient\n          .append(\"stop\")\n          .attr(\n            \"offset\",\n            \"\" + (1 + index + infinite) * 100 / values.length + \"%\"\n          )\n          .attr(\"stop-color\", self.colorizer[\"category\"](value));\n      });\n      //gradient.append (\"stop\").attr (\"offset\", \"100%\").attr (\"stop-color\", self.colorizer['category'] (dom[1]));\n\n      return id;\n    }\n    return null;\n  }\n\n  self.handle_attribute_opacity = function(cat_id) {\n    var set_attr = \"None\";\n\n    [\"opacity\"].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl + \"_label\"))\n        .html(\"Opacity: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role(\"opacity_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    self.colorizer[\"opacity_id\"] = cat_id;\n    if (cat_id) {\n      var scale = graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"];\n      self.colorizer[\"opacity_scale\"] = d3.scale\n        .linear()\n        .domain([0, _networkContinuousColorStops - 1])\n        .range([0.25, 1]);\n      self.colorizer[\"opacity\"] = function(v) {\n        if (v == _networkMissing) {\n          return _networkMissingOpacity;\n        }\n        return self.colorizer[\"opacity_scale\"](scale(v));\n      };\n    } else {\n      self.colorizer[\"opacity\"] = null;\n      self.colorizer[\"opacity_scale\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.handle_attribute_continuous = function(cat_id) {\n    var set_attr = \"None\";\n\n    render_chord_diagram(\"aux_svg_holder\", null, null);\n    render_binned_table(\"attribute_table\", null, null);\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"binned_attributes\"];\n      delete the_cluster[\"gradient\"];\n    });\n\n    [[\"attributes\", false], [\"attributes_cat\", true]].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0], lbl[1]))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    d3\n      .select(self.get_ui_element_selector_by_role(\"attributes_invert\"))\n      .style(\"display\", set_attr == \"None\" ? \"none\" : \"inline\")\n      .classed(\"btn-active\", false)\n      .classed(\"btn-default\", true);\n\n    if (cat_id) {\n      //console.log (graph_data [_networkGraphAttrbuteID][cat_id]);\n\n      self.colorizer[\"category\"] = _.wrap(\n        d3.scale\n          .linear()\n          .range([\n            \"#fff7ec\",\n            \"#fee8c8\",\n            \"#fdd49e\",\n            \"#fdbb84\",\n            \"#fc8d59\",\n            \"#ef6548\",\n            \"#d7301f\",\n            \"#b30000\",\n            \"#7f0000\"\n          ])\n          .domain(_.range(_networkContinuousColorStops)),\n        function(func, arg) {\n          return func(\n            graph_data[_networkGraphAttrbuteID][cat_id][\"scale\"](arg)\n          );\n        }\n      ); //console.log (self.colorizer['category'].exponent ());\n\n      //console.log (self.colorizer['category'] (graph_data [_networkGraphAttrbuteID][cat_id]['value_range'][0]), self.colorizer['category'] (d['value_range'][1]));\n\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"continuous\"] = true;\n      self.clusters.forEach(function(the_cluster) {\n        the_cluster[\"gradient\"] = compute_cluster_gradient(the_cluster, cat_id);\n      });\n\n      var points = [];\n\n      _.each(self.edges, function(e) {\n        var src = self.attribute_node_value_by_id(\n            self.nodes[e.source],\n            cat_id,\n            true\n          ),\n          tgt = self.attribute_node_value_by_id(\n            self.nodes[e.target],\n            cat_id,\n            true\n          );\n\n        if (src != _networkMissing && tgt != _networkMissing) {\n          points.push({\n            x: src,\n            y: tgt,\n            title:\n              self.nodes[e.source].id +\n              \" (\" +\n              src +\n              \") -- \" +\n              self.nodes[e.target].id +\n              \" (\" +\n              tgt +\n              \")\"\n          });\n        }\n      });\n      d3\n        .select(\n          self.get_ui_element_selector_by_role(\"aux_svg_holder_enclosed\", true)\n        )\n        .style(\"display\", null);\n\n      scatterPlot.scatterPlot(\n        points,\n        400,\n        400,\n        self.get_ui_element_selector_by_role(\"aux_svg_holder\", true),\n        {\n          x: \"Source\",\n          y: \"Target\"\n        },\n        graph_data[_networkGraphAttrbuteID][cat_id][\"type\"] == \"Date\"\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"continuous\"] = false;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.handle_attribute_categorical = function(cat_id) {\n    var set_attr = \"None\";\n    d3\n      .select(self.get_ui_element_selector_by_role(\"attributes_invert\"))\n      .style(\"display\", \"none\");\n\n    self.network_svg.selectAll(\"radialGradient\").remove();\n\n    [[\"attributes\", false], [\"attributes_cat\", true]].forEach(function(lbl) {\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0], lbl[1]))\n        .selectAll(\"li\")\n        .selectAll(\"a\")\n        .attr(\"style\", function(d, i) {\n          if (d[1] == cat_id) {\n            set_attr = d[0];\n            return \" font-weight: bold;\";\n          }\n          return null;\n        });\n      d3\n        .select(self.get_ui_element_selector_by_role(lbl[0] + \"_label\", lbl[1]))\n        .html(\"Color: \" + set_attr + ' <span class=\"caret\"></span>');\n    });\n\n    self.clusters.forEach(function(the_cluster) {\n      delete the_cluster[\"gradient\"];\n      the_cluster[\"binned_attributes\"] = stratify(\n        attribute_cluster_distribution(the_cluster, cat_id)\n      );\n    });\n\n    self.colorizer[\"continuous\"] = false;\n\n    if (cat_id) {\n      if (cat_id in _networkPresetColorSchemes) {\n        var domain = [],\n          range = [];\n        _.each(_networkPresetColorSchemes[cat_id], function(value, key) {\n          domain.push(key);\n          range.push(value);\n        });\n        self.colorizer[\"category\"] = d3.scale\n          .ordinal()\n          .domain(domain)\n          .range(range);\n      } else {\n        if (graph_data[_networkGraphAttrbuteID][cat_id][\"color_scale\"]) {\n          self.colorizer[\"category\"] = graph_data[_networkGraphAttrbuteID][\n            cat_id\n          ][\"color_scale\"](graph_data[_networkGraphAttrbuteID][cat_id], self);\n        } else {\n          self.colorizer[\"category\"] = d3.scale\n            .ordinal()\n            .range(_networkCategorical);\n          var extended_range = _.clone(self.colorizer[\"category\"].range());\n          extended_range.push(_networkMissingColor);\n\n          self.colorizer[\"category\"].domain(\n            _.range(_maximumValuesInCategories + 1)\n          );\n          self.colorizer[\"category\"].range(extended_range);\n\n          if (graph_data[_networkGraphAttrbuteID][cat_id][\"stable-ish order\"]) {\n            self.colorizer[\"category\"] = _.wrap(\n              self.colorizer[\"category\"],\n              function(func, arg) {\n                if (arg == _networkMissing) {\n                  return func(_maximumValuesInCategories);\n                }\n                return func(\n                  graph_data[_networkGraphAttrbuteID][cat_id][\n                    \"stable-ish order\"\n                  ][arg]\n                );\n              }\n            );\n            //console.log (graph_data[_networkGraphAttrbuteID][cat_id]['stable-ish order']);\n          }\n        }\n      }\n      self.colorizer[\"category_id\"] = cat_id;\n      self.colorizer[\"category_map\"] =\n        graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"];\n\n      //console.log (cat_id, self.json[_networkGraphAttrbuteID][cat_id], graph_data[_networkGraphAttrbuteID][cat_id][\"value_map\"] (null, \"lookup\"));\n      //self.colorizer['category_map'][null] =  graph_data [_networkGraphAttrbuteID][cat_id]['range'];\n\n      //try {\n      //console.log (self.colorizer[\"category_map\"]);\n      self.colorizer[\"category_pairwise\"] = attribute_pairwise_distribution(\n        cat_id,\n        graph_data[_networkGraphAttrbuteID][cat_id].dimension,\n        self.colorizer[\"category_map\"]\n      );\n      //} catch (err) {\n      // TODO: there are still lingering issues with this \"category_map\"\n      //}\n\n      render_chord_diagram(\n        \"aux_svg_holder\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n      render_binned_table(\n        \"attribute_table\",\n        self.colorizer[\"category_map\"],\n        self.colorizer[\"category_pairwise\"]\n      );\n    } else {\n      self.colorizer[\"category\"] = null;\n      self.colorizer[\"category_id\"] = null;\n      self.colorizer[\"category_pairwise\"] = null;\n      self.colorizer[\"category_map\"] = null;\n      render_chord_diagram(\"aux_svg_holder\", null, null);\n      render_binned_table(\"attribute_table\", null, null);\n    }\n    if (self.handle_inline_charts) {\n      self.handle_inline_charts();\n    }\n\n    self.draw_attribute_labels();\n    self.update(true);\n    d3.event.preventDefault();\n  };\n\n  self.filter_visibility = function() {\n    self.clusters.forEach(function(c) {\n      c.is_hidden = self.hide_unselected && !c.match_filter;\n    });\n    self.nodes.forEach(function(n) {\n      n.is_hidden = self.hide_unselected && !n.match_filter;\n    });\n  };\n\n  self.filter = function(conditions, skip_update) {\n    var anything_changed = false;\n\n    conditions = _.map([\"re\", \"distance\"], function(cnd) {\n      return _.map(\n        _.filter(conditions, function(v) {\n          return v.type == cnd;\n        }),\n        function(v) {\n          return v.value;\n        }\n      );\n    });\n\n    if (conditions[1].length) {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n\n      _.each(self.edges, function(e) {\n        var did_match = _.some(conditions[1], function(d) {\n          return e.length <= d;\n        });\n\n        if (did_match) {\n          self.nodes[e.source].length_filter = true;\n          self.nodes[e.target].length_filter = true;\n        }\n      });\n    } else {\n      self.nodes.forEach(function(n) {\n        n.length_filter = false;\n      });\n    }\n\n    self.clusters.forEach(function(c) {\n      c.match_filter = 0;\n    });\n\n    self.nodes.forEach(function(n) {\n      var did_match = _.some(conditions[0], function(regexp) {\n        return (\n          regexp.test(n.id) ||\n          _.some(n[_networkNodeAttributeID], function(attr) {\n            return regexp.test(attr);\n          })\n        );\n      });\n\n      did_match = did_match || n.length_filter;\n\n      if (did_match != n.match_filter) {\n        n.match_filter = did_match;\n        anything_changed = true;\n      }\n\n      if (n.match_filter) {\n        n.parent.match_filter += 1;\n      }\n    });\n\n    if (anything_changed && self.handle_inline_charts) {\n        self.handle_inline_charts (function (n) {return n.match_filter;});\n    }\n\n    if (anything_changed && !skip_update) {\n      if (self.hide_unselected) {\n        self.filter_visibility();\n      }\n\n      self.update(true);\n    }\n  };\n\n  self.is_empty = function() {\n    return self.cluster_sizes.length == 0;\n  };\n\n  self.display_warning = function(warning_string, is_html) {\n    if (network_warning_tag) {\n      if (warning_string.length) {\n        var warning_box = d3.select(network_warning_tag);\n        warning_box.selectAll(\"div\").remove();\n        if (is_html) {\n          warning_box.append(\"div\").html(warning_string);\n        } else {\n          warning_box.append(\"div\").text(warning_string);\n        }\n        warning_box.style(\"display\", \"block\");\n        warning_string = \"\";\n      } else {\n        d3.select(network_warning_tag).style(\"display\", \"none\");\n      }\n    }\n  };\n\n  self.link_generator_function = function(d) {\n    var pull = d.pull || 0.0;\n    var path;\n\n    if (pull != 0.0) {\n      var dist_x = d.target.x - d.source.x;\n      var dist_y = d.target.y - d.source.y;\n      var pull = pull * Math.sqrt(dist_x * dist_x + dist_y * dist_y);\n\n      var theta = Math.PI / 6; // 18deg additive angle\n\n      var alpha = dist_x ? Math.atan(-dist_y / dist_x) : Math.PI / 2; // angle with the X axis\n\n      if (pull < 0) {\n        theta = -theta;\n        pull = -pull;\n      }\n\n      var dx = Math.cos(theta + alpha) * pull,\n        dx2 = Math.cos(theta - alpha) * pull;\n\n      var dy = Math.sin(theta + alpha) * pull,\n        dy2 = Math.sin(theta - alpha) * pull;\n\n      var s1, s2;\n      if (d.target.x >= d.source.x) {\n        s1 = [dx, -dy];\n        s2 = [-dx2, -dy2];\n      } else {\n        s1 = [-dx2, -dy2];\n        s2 = [dx, -dy];\n      }\n\n      path =\n        \"M\" +\n        d.source.x +\n        \" \" +\n        d.source.y +\n        \" C \" +\n        (d.source.x + s1[0]) +\n        \" \" +\n        (d.source.y + s1[1]) +\n        \", \" +\n        (d.target.x + s2[0]) +\n        \" \" +\n        (d.target.y + s2[1]) +\n        \", \" +\n        d.target.x +\n        \" \" +\n        d.target.y;\n    } else {\n      path =\n        \"M\" +\n        d.source.x +\n        \" \" +\n        d.source.y +\n        \" L \" +\n        d.target.x +\n        \" \" +\n        d.target.y;\n    }\n\n    d3.select(this).attr(\"d\", path);\n  };\n\n  self.update = function(soft, friction) {\n    self.needs_an_update = false;\n\n    if (options && options [\"extra-graphics\"]) {\n        options [\"extra-graphics\"].call(null, self, options);\n    }\n\n    if (friction) {\n      network_layout.friction(friction);\n    }\n    self.display_warning(warning_string);\n\n    var rendered_nodes, rendered_clusters, link;\n\n    if (!soft) {\n      var draw_me = prepare_data_to_graph();\n\n      network_layout.nodes(draw_me.all).links(draw_me.edges);\n      update_network_string(draw_me.nodes.length, draw_me.edges.length);\n\n      var edge_set = {};\n\n      _.each(draw_me.edges, function(d) {\n        d.pull = 0.0;\n        var tag = \"\";\n\n        if (d.source < d.target) {\n          tag = \"\" + d.source + \"|\" + d.target;\n        } else {\n          tag = \"\" + d.target + \"|\" + d.source;\n        }\n        if (tag in edge_set) {\n          edge_set[tag].push(d);\n        } else {\n          edge_set[tag] = [d];\n        }\n      });\n\n      _.each(edge_set, function(v) {\n        if (v.length > 1) {\n          var step = 1 / (v.length - 1);\n          _.each(v, function(edge, index) {\n            edge.pull = -0.5 + index * step;\n          });\n        }\n      });\n\n      link = self.network_svg\n        .selectAll(\".link\")\n        .data(draw_me.edges, function(d) {\n          return d.id;\n        });\n\n      //link.enter().append(\"line\").classed(\"link\", true);\n      link.enter().append(\"path\").classed(\"link\", true);\n      link.exit().remove();\n\n      link\n        .classed(\"removed\", function(d) {\n          return d.removed;\n        })\n        .classed(\"unsupported\", function(d) {\n          return \"support\" in d && d[\"support\"] > 0.05;\n        })\n        .classed(\"core-link\", function(d) {\n          //console.log (d[\"length\"] <= self.core_link_length);\n          return d[\"length\"] <= self.core_link_length;\n          //return false;\n        });\n\n      link\n        .on(\"mouseover\", edge_pop_on)\n        .on(\"mouseout\", edge_pop_off)\n        .filter(function(d) {\n          return d.directed;\n        })\n        .attr(\"marker-end\", \"url(#\" + self.dom_prefix + \"_arrowhead)\");\n\n      rendered_nodes = self.network_svg\n        .selectAll(\".node\")\n        .data(draw_me.nodes, function(d) {\n          return d.id;\n        });\n\n      rendered_nodes.exit().remove();\n      rendered_nodes.enter().append(\"path\");\n\n      rendered_clusters = self.network_svg\n        .selectAll(\".cluster-group\")\n        .data(\n          draw_me.clusters.map(function(d) {\n            return d;\n          }),\n          function(d) {\n            return d.cluster_id;\n          }\n        );\n\n      rendered_clusters.exit().remove();\n      rendered_clusters\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"cluster-group\")\n        .attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\";\n        })\n        .on(\"click\", handle_cluster_click)\n        .on(\"mouseover\", cluster_pop_on)\n        .on(\"mouseout\", cluster_pop_off)\n        .call(network_layout.drag().on(\"dragstart\", cluster_pop_off));\n\n      self.draw_cluster_table(\n        self.extra_cluster_table_columns,\n        self.cluster_table\n      );\n\n      if (self._is_CDC_ && !(options && options[\"no-subclusters\"])) {\n        self.annotate_priority_clusters(_networkCDCDateField, 36, 12);\n\n        try {\n            graph_data[_networkGraphAttrbuteID][\"recent_rapid\"] =\n                self._aux_process_category_values(self._aux_populate_category_fields (graph_data[_networkGraphAttrbuteID][\"recent_rapid\"],\"recent_rapid\"));\n        } catch (err) {\n            console.log (err);\n        }\n      }\n\n      if (self.subcluster_table) {\n        self.draw_cluster_table(\n          self.extra_subcluster_table_columns,\n          self.subcluster_table,\n          {\n            \"no-clusters\" : true,\n            \"subclusters\" : true,\n            \"headers\" : function (headers) {\n                headers[0][0].value = \"Subcluster ID\";\n                headers[0][2].help  = \"Number of total cases in the subcluster\";\n            }\n          }\n        );\n\n      }\n      if (self._is_CDC_) {\n        self.draw_extended_node_table ();\n      } else {\n        self.draw_node_table(self.extra_node_table_columns);\n      }\n    } else {\n      rendered_nodes = self.network_svg.selectAll(\".node\");\n      rendered_clusters = self.network_svg.selectAll(\".cluster-group\");\n      link = self.network_svg.selectAll(\".link\");\n      update_network_string(rendered_nodes.size(), link.size());\n    }\n\n    rendered_nodes.each(function(d) {\n      draw_a_node(this, d);\n    });\n\n    rendered_clusters.each(function(d) {\n      draw_a_cluster(this, d);\n    });\n\n    link.style(\"opacity\", function(d) {\n      return Math.max(node_opacity(d.target), node_opacity(d.source));\n    });\n\n    if (self.additional_edge_styler) {\n      link.each(function(d) {\n        self.additional_edge_styler(this, d, self);\n      });\n    }\n\n    link.style(\"display\", function(d) {\n      if (d.target.is_hidden || d.source.is_hidden || d.is_hidden) {\n        return \"none\";\n      }\n      return null;\n    });\n\n\n    if (!soft) {\n      currently_displayed_objects =\n        rendered_clusters[0].length + rendered_nodes[0].length;\n\n      network_layout.on(\"tick\", function() {\n        var sizes = network_layout.size();\n\n        rendered_nodes.attr(\"transform\", function(d) {\n\n          // Defalut values (just to keep nodes in the svg container rectangle).\n          var xBoundLower = 10;\n          var xBoundUpper = sizes[0] - 10;\n          var yBoundLower = 10;\n          var yBoundUpper = sizes[1] - 10;\n\n          if (self.showing_on_map) {\n            const allowed_offset_from_center_of_country = 15;\n            // If the country is in the list that we have, override the default values for the bounds.\n            var country_code = self._get_node_country (d);\n\n            if (country_code in self.countryCentersObject) {\n              let center = self.countryCentersObject[country_code].countryXY;\n\n              xBoundLower = center[0] - allowed_offset_from_center_of_country;\n              xBoundUpper = center[0] + allowed_offset_from_center_of_country;\n              yBoundLower = center[1]- allowed_offset_from_center_of_country;\n              yBoundUpper = center[1] + allowed_offset_from_center_of_country;\n            }\n          }\n\n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              xBoundLower,\n              Math.min(xBoundUpper, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              yBoundLower,\n              Math.min(yBoundUpper, d.y)\n            )) +\n            \")\"\n          );\n        });\n        rendered_clusters.attr(\"transform\", function(d) {\n          return (\n            \"translate(\" +\n            (d.x = Math.max(\n              d.rendered_size,\n              Math.min(sizes[0] - d.rendered_size, d.x)\n            )) +\n            \",\" +\n            (d.y = Math.max(\n              d.rendered_size,\n              Math.min(sizes[1] - d.rendered_size, d.y)\n            )) +\n            \")\"\n          );\n        });\n\n        link.each(self.link_generator_function);\n      });\n\n      network_layout.start();\n    } else {\n      link.each(self.link_generator_function);\n    }\n  };\n\n  function tick() {\n    var sizes = network_layout.size();\n\n    node\n      .attr(\"cx\", function(d) {\n        return (d.x = Math.max(10, Math.min(sizes[0] - 10, d.x)));\n      })\n      .attr(\"cy\", function(d) {\n        return (d.y = Math.max(10, Math.min(sizes[1] - 10, d.y)));\n      });\n\n    link\n      .attr(\"x1\", function(d) {\n        return d.source.x;\n      })\n      .attr(\"y1\", function(d) {\n        return d.source.y;\n      })\n      .attr(\"x2\", function(d) {\n        return d.target.x;\n      })\n      .attr(\"y2\", function(d) {\n        return d.target.y;\n      });\n  }\n\n  /*------------ Node Methods ---------------*/\n  function compute_node_degrees(nodes, edges) {\n    for (var n in nodes) {\n      nodes[n].degree = 0;\n    }\n\n    for (var e in edges) {\n      nodes[edges[e].source].degree++;\n      nodes[edges[e].target].degree++;\n    }\n  }\n\n  self.attribute_node_value_by_id = function(d, id, number) {\n    try {\n\n      if (_networkNodeAttributeID in d && id) {\n\n        if (id in d[_networkNodeAttributeID]) {\n          var v;\n\n          if (self.json[_networkGraphAttrbuteID][id].volatile) {\n            v = self.json[_networkGraphAttrbuteID][id].map(d, self);\n          } else {\n            v = d[_networkNodeAttributeID][id];\n          }\n\n          if (_.isString(v)) {\n            if (v.length == 0) {\n              return _networkMissing;\n            } else {\n              if (number) {\n                v = +v;\n                return _.isNaN(v) ? _networkMissing : v;\n              }\n            }\n          }\n          return v;\n        }\n      }\n    } catch (e) {\n      console.log(\"self.attribute_node_value_by_id\", e, d, id, number);\n    }\n    return _networkMissing;\n  };\n\n  function inject_attribute_node_value_by_id(d, id, value) {\n    //console.log (\"Injecting \" + id + \" with value \" + value);\n    if (_networkNodeAttributeID in d && id) {\n      d[_networkNodeAttributeID][id] = value;\n    }\n  }\n\n  self.inject_attribute_description = function(key, d) {\n    if (_networkGraphAttrbuteID in self.json) {\n      var new_attr = {};\n      new_attr[key] = d;\n      _.extend(self.json[_networkGraphAttrbuteID], new_attr);\n      //self.json[_networkGraphAttrbuteID][key] = _.clone (d);\n    }\n  };\n  function node_size(d) {\n    if (self.showing_on_map) {\n      return 50;\n    }\n    var r = 5 + Math.sqrt(d.degree); //return (d.match_filter ? 10 : 4)*r*r;\n    return 4 * r * r;\n  }\n\n  function node_color(d) {\n    /*if (d.match_filter) {\n        return \"white\";\n    }*/\n\n    if (self.colorizer[\"category_id\"]) {\n      var v = self.attribute_node_value_by_id(d, self.colorizer[\"category_id\"]);\n      if (self.colorizer[\"continuous\"]) {\n        if (v == _networkMissing) {\n          return _networkMissingColor;\n        }\n        //console.log (v, self.colorizer['category'](v));\n      }\n      return self.colorizer[\"category\"](v);\n    }\n    return d.hxb2_linked ? \"black\" : d.is_lanl ? \"red\" : \"gray\";\n  }\n\n  function node_opacity(d) {\n    if (self.colorizer[\"opacity\"]) {\n      return self.colorizer[\"opacity\"](\n        self.attribute_node_value_by_id(d, self.colorizer[\"opacity_id\"], true)\n      );\n    }\n    return 1;\n  }\n\n  function cluster_color(d, type) {\n    if (d[\"binned_attributes\"]) {\n      return self.colorizer[\"category\"](type);\n    }\n    return \"#bdbdbd\";\n  }\n\n  function hxb2_node_color(d) {\n    return \"black\";\n  }\n\n  function node_info_string(n) {\n    var str;\n\n    if (!self._is_CDC_) {\n      str =\n        \"Degree <em>\" +\n        n.degree +\n        \"</em><br>Clustering coefficient <em> \" +\n        misc.format_value(n.lcc, _defaultFloatFormat) +\n        \"</em>\";\n    } else {\n      str = \"# links <em>\" + n.degree + \"</em>\";\n    }\n\n    _.each(\n      _.union(self._additional_node_pop_fields, [\n        self.colorizer[\"category_id\"],\n        self.node_shaper[\"id\"],\n        self.colorizer[\"opacity_id\"]\n      ]),\n      function(key) {\n        if (key) {\n          if (key in graph_data[_networkGraphAttrbuteID]) {\n            var attribute = self.attribute_node_value_by_id(n, key);\n\n            if (graph_data[_networkGraphAttrbuteID][key][\"type\"] == \"Date\") {\n              try {\n                attribute = _defaultDateViewFormat(attribute);\n              } catch (err) {}\n            }\n            if (attribute) {\n              str += \"<br>\" + key + \" <em>\" + attribute + \"</em>\";\n            }\n          }\n        }\n      }\n    );\n\n    return str;\n  }\n\n  function edge_info_string(n) {\n    var str = \"Length <em>\" + _defaultFloatFormat(n.length) + \"</em>\";\n    if (\"support\" in n) {\n      str +=\n        \"<br>Worst triangle-based support (p): <em>\" +\n        _defaultFloatFormat(n.support) +\n        \"</em>\";\n    }\n\n    var attribute = self.attribute_node_value_by_id(\n      n,\n      self.colorizer[\"category_id\"]\n    );\n\n    return str;\n  }\n\n  function node_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      (self._is_CDC_ ? \"Individual \" : \"Node \") + d.id,\n      node_info_string(d),\n      self.container\n    );\n  }\n\n  function node_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  function edge_pop_on(e) {\n    toggle_tooltip(\n      this,\n      true,\n      e.source.id + \" - \" + e.target.id,\n      edge_info_string(e),\n      self.container\n    );\n  }\n\n  function edge_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  /*------------ Cluster Methods ---------------*/\n\n  /* Creates a new object that groups nodes by cluster\n   * @param nodes\n   * @returns clusters\n   */\n  function get_all_clusters(nodes) {\n    var by_cluster = _.groupBy(nodes, \"cluster\");\n    return by_cluster;\n  }\n\n  function compute_cluster_centroids(clusters) {\n    for (var c in clusters) {\n      var cls = clusters[c];\n      cls.x = 0;\n      cls.y = 0;\n      if (_.has(cls, \"children\")) {\n        cls.children.forEach(function(x) {\n          cls.x += x.x;\n          cls.y += x.y;\n        });\n        cls.x /= cls.children.length;\n        cls.y /= cls.children.length;\n      }\n    }\n  }\n\n  function collapse_cluster(x, keep_in_q) {\n    self.needs_an_update = true;\n    x.collapsed = true;\n    currently_displayed_objects -= self.cluster_sizes[x.cluster_id - 1] - 1;\n    if (!keep_in_q) {\n      var idx = open_cluster_queue.indexOf(x.cluster_id);\n      if (idx >= 0) {\n        open_cluster_queue.splice(idx, 1);\n      }\n    }\n    compute_cluster_centroids([x]);\n    return x.children.length;\n  }\n\n  function expand_cluster(x, copy_coord) {\n    self.needs_an_update = true;\n    x.collapsed = false;\n    currently_displayed_objects += self.cluster_sizes[x.cluster_id - 1] - 1;\n    open_cluster_queue.push(x.cluster_id);\n\n    if (copy_coord) {\n      x.children.forEach(function(n) {\n        n.x = x.x + (Math.random() - 0.5) * x.children.length;\n        n.y = x.y + (Math.random() - 0.5) * x.children.length;\n      });\n    } else {\n      x.children.forEach(function(n) {\n        n.x = self.width * 0.25 + (Math.random() - 0.5) * x.children.length;\n        n.y = 0.25 * self.height + (Math.random() - 0.5) * x.children.length;\n      });\n    }\n  }\n\n  function render_binned_table(id, the_map, matrix) {\n    var the_table = d3.select(self.get_ui_element_selector_by_role(id, true));\n    if (the_table.empty()) {\n      return;\n    }\n\n    the_table.selectAll(\"thead\").remove();\n    the_table.selectAll(\"tbody\").remove();\n\n    d3\n      .select(self.get_ui_element_selector_by_role(id + \"_enclosed\", true))\n      .style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var fill = self.colorizer[\"category\"];\n      var lookup = the_map(null, \"lookup\");\n\n      var headers = the_table.append(\"thead\").append(\"tr\").selectAll(\"th\").data(\n        [\"\"].concat(\n          matrix[0].map(function(d, i) {\n            return lookup[i];\n          })\n        )\n      );\n\n      headers.enter().append(\"th\");\n      headers\n        .html(function(d) {\n          return \"<span>&nbsp;\" + d + \"</span>\";\n        })\n        .each(function(d, i) {\n          if (i) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n\n      if (self.show_percent_in_pairwise_table) {\n        var sum = _.map(matrix, function(row) {\n          return _.reduce(\n            row,\n            function(p, c) {\n              return p + c;\n            },\n            0\n          );\n        });\n\n        matrix = _.map(matrix, function(row, row_index) {\n          return _.map(row, function(c) {\n            return c / sum[row_index];\n          });\n        });\n      }\n\n      var rows = the_table.append(\"tbody\").selectAll(\"tr\").data(\n        matrix.map(function(d, i) {\n          return [lookup[i]].concat(d);\n        })\n      );\n\n      rows.enter().append(\"tr\");\n      rows\n        .selectAll(\"td\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"td\")\n        .html(function(d, i) {\n          return i == 0\n            ? \"<span>&nbsp;\" + d + \"</span>\"\n            : self.show_percent_in_pairwise_table\n              ? _defaultPercentFormat(d)\n              : d;\n        })\n        .each(function(d, i) {\n          if (i == 0) {\n            d3\n              .select(this)\n              .insert(\"i\", \":first-child\")\n              .classed(\"fa fa-circle\", true)\n              .style(\"color\", function() {\n                return fill(d);\n              });\n          }\n        });\n    }\n  }\n\n  function render_chord_diagram(id, the_map, matrix) {\n    var container = d3.select(self.get_ui_element_selector_by_role(id, true));\n\n    if (container.empty()) {\n      return;\n    }\n\n    container.selectAll(\"svg\").remove();\n\n    d3\n      .select(self.get_ui_element_selector_by_role(id + \"_enclosed\", true))\n      .style(\"display\", matrix ? null : \"none\");\n\n    if (matrix) {\n      var lookup = the_map(null, \"lookup\");\n\n      var svg = container.append(\"svg\");\n\n      var chord = d3.layout\n        .chord()\n        .padding(0.05)\n        .sortSubgroups(d3.descending)\n        .matrix(matrix);\n\n      var text_offset = 20,\n        width = 450,\n        height = 450,\n        innerRadius = Math.min(width, height - text_offset) * 0.41,\n        outerRadius = innerRadius * 1.1;\n\n      var fill = self.colorizer[\"category\"],\n        font_size = 12;\n\n      var text_label = svg\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) + \")\"\n        )\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", font_size)\n        .text(\"\");\n\n      svg = svg\n        .attr(\"width\", width)\n        .attr(\"height\", height - text_offset)\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + width / 2 + \",\" + (height - text_offset) / 2 + \")\"\n        );\n\n      svg\n        .append(\"g\")\n        .selectAll(\"path\")\n        .data(chord.groups)\n        .enter()\n        .append(\"path\")\n        .style(\"fill\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .style(\"stroke\", function(d) {\n          return fill(lookup[d.index]);\n        })\n        .attr(\n          \"d\",\n          d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius)\n        )\n        .on(\"mouseover\", fade(0.1, true))\n        .on(\"mouseout\", fade(1, false));\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"chord\")\n        .selectAll(\"path\")\n        .data(chord.chords)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", d3.svg.chord().radius(innerRadius))\n        .style(\"fill\", function(d) {\n          return fill(d.target.index);\n        })\n        .style(\"opacity\", 1);\n\n      // Returns an event handler for fading a given chord group.\n      function fade(opacity, t) {\n        return function(g, i) {\n          text_label.text(t ? lookup[i] : \"\");\n          svg\n            .selectAll(\".chord path\")\n            .filter(function(d) {\n              return d.source.index != i && d.target.index != i;\n            })\n            .transition()\n            .style(\"opacity\", opacity);\n        };\n      }\n    }\n  }\n\n  function attribute_pairwise_distribution(id, dim, the_map, only_expanded) {\n    var scan_from = only_expanded ? draw_me.edges : self.edges;\n    var the_matrix = [];\n    for (var i = 0; i < dim; i += 1) {\n      the_matrix.push([]);\n      for (var j = 0; j < dim; j += 1) {\n        the_matrix[i].push(0);\n      }\n    }\n\n    _.each(scan_from, function(edge) {\n      //console.log (self.attribute_node_value_by_id(self.nodes[edge.source], id), self.attribute_node_value_by_id(self.nodes[edge.target], id));\n      the_matrix[\n        the_map(self.attribute_node_value_by_id(self.nodes[edge.source], id))\n      ][\n        the_map(self.attribute_node_value_by_id(self.nodes[edge.target], id))\n      ] += 1;\n    });\n    // check if there are null values\n\n    var haz_null = the_matrix.some(function(d, i) {\n      if (i == dim - 1) {\n        return d.some(function(d2) {\n          return d2 > 0;\n        });\n      }\n      return d[dim - 1] > 0;\n    });\n    if (!haz_null) {\n      the_matrix.pop();\n      for (i = 0; i < dim - 1; i += 1) {\n        the_matrix[i].pop();\n      }\n    }\n\n    // symmetrize the matrix\n\n    dim = the_matrix.length;\n\n    for (i = 0; i < dim; i += 1) {\n      for (j = i; j < dim; j += 1) {\n        the_matrix[i][j] += the_matrix[j][i];\n        the_matrix[j][i] = the_matrix[i][j];\n      }\n    }\n\n    return the_matrix;\n  }\n\n  self._aux_populate_category_fields = function(d, k) {\n    d[\"raw_attribute_key\"] = k;\n    if (!(\"label\" in d)) {\n        d[\"label\"] = k;\n    }\n    d.discrete = false;\n    if (d[\"type\"] == \"String\") {\n      d.discrete = true;\n      d[\"value_range\"] = _.keys(\n        _.countBy(graph_data.Nodes, function(nd) {\n          return self.attribute_node_value_by_id(nd, k);\n        })\n      );\n      d[\"dimension\"] = d[\"value_range\"].length;\n    } else {\n      if (\"enum\" in d) {\n        d.discrete = true;\n        d[\"value_range\"] = _.clone(d[\"enum\"]);\n        if (!(_networkMissing in d[\"value_range\"])) {\n          d[\"value_range\"].push(_networkMissing);\n        }\n        d[\"dimension\"] = d[\"value_range\"].length;\n        d[\"no-sort\"] = true;\n      }\n    }\n    return d;\n  };\n\n  self._aux_process_category_values = function(d) {\n    var values;\n    if (d[\"no-sort\"]) {\n      values = d[\"value_range\"];\n    } else {\n      if (d[\"type\"] == \"String\") {\n        values = d[\"value_range\"].sort();\n\n        if (d.dimension <= _maximumValuesInCategories) {\n          var string_hash = function(str) {\n            var hash = 5801;\n            for (var ci = 0; ci < str.length; ci++) {\n              var charCode = str.charCodeAt(ci);\n              hash = (hash << (5 + hash)) + charCode;\n            }\n            return hash;\n          };\n\n          var hashed = _.map(values, string_hash);\n          var available_keys = {};\n          var reindexed = {};\n\n          for (var i = 0; i < _maximumValuesInCategories; i++) {\n            available_keys[i] = true;\n          }\n\n          _.each(hashed, function(value, index) {\n            if (value < 0) {\n              value = -value;\n            }\n\n            var first_try = value % _maximumValuesInCategories;\n            if (first_try in available_keys) {\n              reindexed[values[index]] = first_try;\n              delete available_keys[first_try];\n              return;\n            }\n\n            var second_try =\n              Math.floor(value / _maximumValuesInCategories) %\n              _maximumValuesInCategories;\n            if (second_try in available_keys) {\n              reindexed[values[index]] = second_try;\n              delete available_keys[second_try];\n              return;\n            }\n\n            var last_resort = parseInt(_.keys(available_keys).sort()[0]);\n            reindexed[values[index]] = last_resort;\n            delete available_keys[last_resort];\n          });\n\n          d[\"stable-ish order\"] = reindexed;\n        }\n        //values = _.unzip(_.zip (d['value_range'], ordering_map).sort (function (a,b) { if (a[1] < b[1]) return -1; if (a[1] > b[1]) return 1; return 0}))[0]; //d['value_range'].sort ();\n      } else {\n        values = d[\"value_range\"].sort();\n      }\n    }\n\n    var map = new Object();\n\n    _.each(values, function(d2, i) {\n      map[d2] = i;\n    });\n\n    d[\"value_map\"] = function(v, key) {\n      return key ? (key == \"lookup\" ? _.invert(map) : map) : map[v];\n    };\n    return d;\n  };\n\n  function attribute_cluster_distribution(the_cluster, attribute_id) {\n    if (attribute_id && the_cluster) {\n      return the_cluster.children.map(function(d) {\n        return self.attribute_node_value_by_id(d, attribute_id);\n      });\n    }\n    return null;\n  }\n\n  function cluster_info_string(id) {\n    var the_cluster = self.clusters[self.cluster_mapping[id]],\n      attr_info = the_cluster[\"binned_attributes\"];\n\n    var str;\n\n    if (self._is_CDC_) {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> individuals.\" +\n        \"<br>Mean links/individual <em> = \" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max links/individual <em> = \" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\";\n    } else {\n      str =\n        \"<strong>\" +\n        self.cluster_sizes[id - 1] +\n        \"</strong> nodes.\" +\n        \"<br>Mean degree <em>\" +\n        _defaultFloatFormat(the_cluster.degrees[\"mean\"]) +\n        \"</em>\" +\n        \"<br>Max degree <em>\" +\n        the_cluster.degrees[\"max\"] +\n        \"</em>\" +\n        \"<br>Clustering coefficient <em> \" +\n        misc.format_value(the_cluster.cc, _defaultFloatFormat) +\n        \"</em>\";\n    }\n\n    if (attr_info) {\n      attr_info.forEach(function(d) {\n        str += \"<br>\" + d[0] + \" <em>\" + d[1] + \"</em>\";\n      });\n    }\n\n    return str;\n  }\n\n  function cluster_pop_on(d) {\n    toggle_tooltip(\n      this,\n      true,\n      \"Cluster \" + d.cluster_id,\n      cluster_info_string(d.cluster_id),\n      self.container\n    );\n  }\n\n  function cluster_pop_off(d) {\n    toggle_tooltip(this, false);\n  }\n\n  self.expand_cluster_handler = function(d, do_update, move_out) {\n    if (d.collapsed) {\n      var new_nodes = self.cluster_sizes[d.cluster_id - 1] - 1;\n\n      if (new_nodes > max_points_to_render) {\n        warning_string = \"This cluster is too large to be displayed\";\n      } else {\n        var leftover =\n          new_nodes + currently_displayed_objects - max_points_to_render;\n        if (leftover > 0) {\n          var k = 0;\n          for (; k < open_cluster_queue.length && leftover > 0; k++) {\n            var cluster =\n              self.clusters[self.cluster_mapping[open_cluster_queue[k]]];\n            leftover -= cluster.children.length - 1;\n            collapse_cluster(cluster, true);\n          }\n          if (k || open_cluster_queue.length) {\n            open_cluster_queue.splice(0, k);\n          }\n        }\n\n        if (leftover <= 0) {\n          expand_cluster(d, !move_out);\n        }\n      }\n\n      if (do_update) {\n        self.update(false, 0.6);\n      }\n    }\n    return \"\";\n  };\n\n  function show_sequences_in_cluster(d) {\n    var sequences = new Object();\n    _.each(\n      _extract_single_cluster(\n        self.clusters[self.cluster_mapping[d.cluster]].children,\n        null,\n        true\n      ).Edges,\n      function(e) {\n        _.each(e.sequences, function(s) {\n          if (!(s in sequences)) {\n            sequences[s] = 1;\n          }\n        });\n      }\n    );\n    //console.log (_.keys(sequences));\n  }\n\n  function _compute_cluster_degrees(d) {\n    var degrees = d.children.map(function(c) {\n      return c.degree;\n    });\n    degrees.sort(d3.ascending);\n    d.degrees = helpers.describe_vector(degrees);\n  }\n\n  function collapse_cluster_handler(d, do_update) {\n    collapse_cluster(self.clusters[self.cluster_mapping[d.cluster]]);\n    if (do_update) {\n      self.update(false, 0.4);\n    }\n  }\n\n  function center_cluster_handler(d) {\n    d.x = self.width / 2;\n    d.y = self.height / 2;\n    self.update(false, 0.4);\n  }\n\n  function cluster_box_size(c) {\n    return 8 * Math.sqrt(c.children.length);\n  }\n\n  self.extract_network_time_series = function(\n    time_attr,\n    other_attributes,\n    node_filter\n  ) {\n    var use_these_nodes = node_filter\n      ? _.filter(self.nodes, node_filter)\n      : self.nodes;\n\n    var result = _.map(use_these_nodes, function(node) {\n      var series = {\n        time: self.attribute_node_value_by_id(node, time_attr)\n      };\n      if (other_attributes) {\n        _.each(other_attributes, function(attr, key) {\n          series[attr] = self.attribute_node_value_by_id(node, key);\n        });\n      }\n      return series;\n    });\n\n    result.sort(function(a, b) {\n      if (a.time < b.time) return -1;\n      if (a.time == b.time) return 0;\n      return 1;\n    });\n\n    return result;\n  };\n\n  self.expand_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.is_hidden) {\n        self.expand_cluster_handler(x, false);\n      }\n    });\n    self.update();\n  };\n\n  self.select_some_clusters = function(condition) {\n    return self.clusters.filter(function(c, i) {\n      return _.some(c.children, function(n) {\n        return condition(n);\n      });\n    });\n  };\n\n  self.collapse_some_clusters = function(subset) {\n    subset = subset || self.clusters;\n    subset.forEach(function(x) {\n      if (!x.collapsed) collapse_cluster(x);\n    });\n    self.update();\n  };\n\n  self.toggle_hxb2 = function() {\n    self.hide_hxb2 = !self.hide_hxb2;\n    self.update();\n  };\n\n  function stratify(array) {\n    if (array) {\n      var dict = {},\n        stratified = [];\n\n      array.forEach(function(d) {\n        if (d in dict) {\n          dict[d] += 1;\n        } else {\n          dict[d] = 1;\n        }\n      });\n      for (var uv in dict) {\n        stratified.push([uv, dict[uv]]);\n      }\n      return stratified.sort(function(a, b) {\n        return a[0] - b[0];\n      });\n    }\n    return array;\n  }\n\n  self.is_edge_injected = function (e) {\n    //console.log (e, \"edge_type\" in e);\n    return \"edge_type\" in e;\n  }\n\n  /*------------ Node injection (social network) ---------------*/\n\n  self.load_nodes_edges = function(\n    nodes_and_attributes,\n    index_id,\n    edges_and_attributes,\n    annotation\n  ) {\n    annotation = annotation || \"Social\";\n    /**\n        1. Scan the list of nodes for\n            a. Nodes not present in the existing network\n            b. Attribute names\n            c. Attribute values\n\n        2. Scan the list of edges for\n            a. Edges not present in the existing network\n            b. Attribute names\n            c. Attribute values\n     */\n\n    var new_nodes = [];\n    var edge_types_dict = {};\n    var existing_nodes = 0;\n    try {\n      if (nodes_and_attributes && nodes_and_attributes.length) {\n        var injected_nodes = {};\n        var node_attributes = {};\n\n        if (!(index_id in nodes_and_attributes[0])) {\n          throw index_id +\n            \" is not one of the attributes in the imported node records\";\n        }\n\n        _.each(nodes_and_attributes[0], function(r, i) {\n          if (i != index_id) {\n            var attribute_definition = {\n              label: i,\n              type: \"String\",\n              annotation: annotation\n            };\n            self.inject_attribute_description(i, attribute_definition);\n          }\n        });\n\n        var existing_network_nodes = {},\n          node_name_2_id = {};\n\n        _.each(self.json.Nodes, function(n, i) {\n          existing_network_nodes[n.id] = n;\n          node_name_2_id[n.id] = i;\n        });\n\n        _.each(nodes_and_attributes, function(n) {\n          function handle_node_attributes(target) {\n            _.each(n, function(attribute_value, attribute_key) {\n              if (attribute_key != index_id) {\n                inject_attribute_node_value_by_id(\n                  target,\n                  attribute_key,\n                  attribute_value\n                );\n              }\n            });\n          }\n\n          if (n[index_id] in existing_network_nodes) {\n            handle_node_attributes(existing_network_nodes[n[index_id]]);\n            existing_nodes++;\n          } else {\n            var new_node = {\n              node_class: \"injected\",\n              node_annotation: annotation,\n              attributes: [],\n              degree: 0\n            };\n            new_node [_networkNodeAttributeID] = {};\n            new_node.id = n[index_id];\n            handle_node_attributes(new_node);\n            node_name_2_id[new_node.id] = self.json.Nodes.length;\n            self.json.Nodes.push(new_node);\n            new_nodes.push(new_node);\n          }\n        });\n\n        _.each(edges_and_attributes, function(e) {\n          try {\n            if (\"Index\" in e && \"Partner\" in e && \"Contact\" in e) {\n              if (!e[\"Index\"] in node_name_2_id) {\n                throw \"Invalid index node\";\n              }\n              if (!e[\"Partner\"] in node_name_2_id) {\n                throw \"Invalid partner node\";\n              }\n\n              edge_types_dict[e[\"Contact\"]] =\n                (edge_types_dict[e[\"Contact\"]]\n                  ? edge_types_dict[e[\"Contact\"]]\n                  : 0) + 1;\n\n              var new_edge = {\n                source: node_name_2_id[e[\"Index\"]],\n                target: node_name_2_id[e[\"Partner\"]],\n                edge_type: e[\"Contact\"],\n                length: 0.005,\n                directed: true\n              };\n\n              self.json.Edges.push(new_edge);\n            } else {\n              throw \"Missing required attribute\";\n            }\n          } catch (err) {\n            throw \"Invalid edge specification ( \" +\n              err +\n              \") \" +\n              JSON.stringify(e);\n          }\n        });\n\n        self._aux_populate_category_menus();\n        self.update_clusters_with_injected_nodes(null, null, annotation);\n        if (self._is_CDC_) {\n            self.draw_extended_node_table (self.json.Nodes);\n        } else {\n            self.draw_node_table(self.extra_node_table_columns, self.json.Nodes);\n        }\n        if (!self.extra_cluster_table_columns) {\n          self.extra_cluster_table_columns = [];\n        }\n        if (!self.extra_subcluster_table_columns) {\n          self.extra_subcluster_table_columns = [];\n        }\n\n        var edge_types_by_cluster = {};\n        _.each(self.json.Edges, function(e) {\n          var edge_clusters = _.union(\n            _.keys(self.json.Nodes[e.source].extended_cluster),\n            _.keys(self.json.Nodes[e.target].extended_cluster)\n          );\n          _.each(edge_clusters, function(c) {\n            if (!(c in edge_types_by_cluster)) {\n              edge_types_by_cluster[c] = {};\n            }\n            if (e.edge_type) {\n              edge_types_by_cluster[c][e.edge_type] = 1;\n            }\n          });\n        });\n\n\n        var edge_types_by_cluster_sorted = {};\n        _.each(edge_types_by_cluster, function(v, c) {\n          var my_keys = _.keys(v);\n          my_keys.sort();\n          edge_types_by_cluster_sorted[c] = my_keys;\n        });\n\n        var edge_types = _.keys(edge_types_dict);\n        edge_types.sort();\n        var _edge_colorizer = d3.scale\n          .ordinal()\n          .range(_networkCategoricalBase)\n          .domain(edge_types);\n\n        /*var _edge_dasher = d3.scale\n          .ordinal()\n          .range(_networkCategoricalDashPatterns)\n          .domain(edge_types);\n        */\n\n        var _social_view_options = function (labeled_links, shown_types) {\n            return {\n                \"edge-styler\": function(element, d, network) {\n                  if (_.has(d, \"edge_type\")) {\n                    d3\n                      .select(element)\n                      .style(\n                        \"stroke\",\n                        network._edge_colorizer(d[\"edge_type\"])\n                      );//.style (\"stroke-dasharray\", network._edge_dasher (d[\"edge_type\"]));\n\n                    d.is_hidden = !network.shown_types[\n                      d[\"edge_type\"]\n                    ];\n                  } else {\n                    d.is_hidden = !network.shown_types[\"\"];\n                  }\n                  d3.select(element).style (\"stroke-width\", \"5px\");\n                },\n\n                init_code: function(network) {\n                  function style_edge(type) {\n                    this.style(\"stroke-width\", \"5px\");\n                    if (type.length) {\n                      this.style(\n                        \"stroke\",\n                        network._edge_colorizer(type)\n                      );//.style (\"stroke-dasharray\", network._edge_dasher (type));\n                    } else {\n                      this.classed(\"link\", true);\n                      var def_color = this.style(\"stroke\");\n                      this.classed(\"link\", null);\n                      this.style(\"stroke\", def_color);\n                    }\n                  }\n                  network._edge_colorizer = _edge_colorizer;\n                  //network._edge_dasher   = _edge_dasher;\n                  network.shown_types = _.clone(shown_types);\n                  network.edge_legend = {\n                    caption: \"Network links\",\n                    types: {}\n                  };\n\n                  _.each(network.shown_types, function(ignore, t) {\n                    if (t.length) {\n                      network.edge_legend.types[t] = _.partial(\n                        style_edge,\n                        t\n                      );\n                    } else {\n                      network.edge_legend.types[\n                        \"Molecular links\"\n                      ] = _.partial(style_edge, t);\n                    }\n                  });\n                },\n\n                extra_menu: {\n                  title: \"Additional options\",\n                  items: _.map(labeled_links, function(edge_class) {\n                    return [\n                      function(network, element) {\n                        function toggle_element() {\n                          network.shown_types[edge_class] = !network\n                            .shown_types[edge_class];\n                          checkbox.attr(\n                            \"checked\",\n                            network.shown_types[edge_class]\n                              ? \"\"\n                              : null\n                          );\n                          network.update(true);\n                        }\n\n                        var link;\n\n                        if (edge_class.length) {\n                          link = element\n                            .append(\"a\")\n                            .text(edge_class + \" links\")\n                            .style(\n                              \"color\",\n                              network._edge_colorizer(edge_class)\n                            )\n                            .on(\"click\", toggle_element);\n                        } else {\n                          link = element\n                            .append(\"a\")\n                            .text(\"Molecular links\")\n                            .on(\"click\", toggle_element);\n                        }\n                        var checkbox = link\n                          .append(\"input\")\n                          .attr(\"type\", \"checkbox\")\n                          .attr(\"checked\", \"\");\n                      }\n                    ];\n                  })\n                }\n              };\n        };\n\n        var _social_view_handler = function(id, node_filter, labeled_links, shown_types, title, e) {\n\n            self.open_exclusive_tab_view(\n              id,\n              node_filter,\n              title,\n              _social_view_options (labeled_links, shown_types),\n            true);\n          };\n\n\n        var _injected_column_subcluster_button_handler = function (payload, edge_filter, title, e) {\n\n               function edge_filter_for_subclusters (edge) {\n                    return self.is_edge_injected(edge) || edge.length <= self.subcluster_threshold;\n               }\n\n                var subcluster_edges = [];\n\n                var direct_links_only = hivtrace_cluster_depthwise_traversal (\n                    self.json.Nodes,\n                    self.json.Edges,\n                    edge_filter || edge_filter_for_subclusters,\n                    //null,\n                    subcluster_edges,\n                    payload.children\n                );\n\n                var labeled_links = {}, shown_types = {};\n                _.each (subcluster_edges[0], function (e) {\n                    if (e.edge_type) {\n                        labeled_links[e.edge_type] = 1;\n                        shown_types[e.edge_type] = 1;\n                    }\n                });\n\n                labeled_links = _.keys (labeled_links);\n                labeled_links.sort ();\n                labeled_links.push (\"\");\n                shown_types[\"\"] = 1;\n\n                title = title || function (id) { return \"Subcluster \" + payload.cluster_id + \"[+ \" + annotation + \"]\"; };\n\n                //self.annotate_priority_clusters(_networkCDCDateField, 36, 12)\n\n                var cv = self.view_subcluster (payload, direct_links_only[0],  title (payload.cluster_id),\n                        _social_view_options (labeled_links, shown_types), edge_filter_for_subclusters, true);\n                //cv.annotate_priority_clusters(_networkCDCDateField, 36, 12);\n                //cv.handle_attribute_categorical(\"recent_rapid\");\n                cv._refresh_subcluster_view (new Date ());\n\n        };\n\n\n        var injected_column_subcluster = [\n          {\n            description: {\n              value: annotation + \" network\",\n              help: \"View subclusters with \" + annotation + \" data\"\n            },\n\n            generator: function (cluster) {\n                return {\n                    value : cluster,\n                    callback: function(element, payload) {\n                        var this_cell = d3.select(element);\n                        this_cell\n                          .append(\"button\")\n                          .classed(\"btn btn-primary btn-xs pull-right\", true)\n                          .style(\"margin-left\", \"1em\")\n                          .text(\"Complete \" + annotation)\n                          .on(\"click\", _.partial ( _injected_column_subcluster_button_handler, payload, null, null));\n\n                        var node_ids = {};\n\n                        _.each (payload.children, function (n) {\n                            node_ids[n.id] = 1;\n                        });\n\n                        this_cell\n                          .append(\"button\")\n                          .classed(\"btn btn-primary btn-xs pull-right\", true)\n                          .text(\"Directly linked \" + annotation)\n                          .on(\"click\", _.partial ( _injected_column_subcluster_button_handler, payload,\n                                function (edge) {\n                                     return (self.json.Nodes[edge.target].id in node_ids) || (self.json.Nodes[edge.source].id in node_ids);\n                                }\n                          , function (id) { return \"Subcluster \" + payload.cluster_id + \"[+ direct  \" + annotation + \"]\"; }));\n                    }\n                }\n            }\n          }\n         ];\n\n\n        var injected_column = [\n          {\n            description: {\n              value: annotation + \" network\",\n              sort: function(c) {\n                return c.value[0];\n              },\n              help: \"Nodes added and clusters merged through \" + annotation\n            },\n            generator: function(cluster) {\n\n              return {\n                value: [\n                  cluster.injected[annotation],\n                  cluster.linked_clusters,\n                  cluster.cluster_id\n                ],\n\n                callback: function(element, payload) {\n                  var this_cell = d3.select(element);\n                  this_cell.text(+payload[0] + \" \" + annotation + \" nodes. \");\n                  var other_clusters = [];\n                  if (payload[1]) {\n                    other_clusters = _.without(_.keys(payload[1]), payload[2]);\n                    if (other_clusters.length) {\n                      other_clusters.sort();\n                      this_cell\n                        .append(\"span\")\n                        .classed(\"label label-info\", true)\n                        .text(\n                          \"Bridges to \" + other_clusters.length + \" clusters\"\n                        )\n                        .attr(\"title\", other_clusters.join(\", \"));\n                    }\n                  }\n\n                  var labeled_links = _.clone(\n                    edge_types_by_cluster_sorted[payload[2]]\n                  );\n\n\n\n                  if (\n                    payload[0] > 0 ||\n                    other_clusters.length ||\n                    (edge_types_by_cluster_sorted[payload[2]] &&\n                      labeled_links.length)\n                  ) {\n                    labeled_links.push(\"\");\n\n                    var shown_types = {};\n                    _.each(labeled_links, function(t) {\n                      shown_types[t] = 1;\n                    });\n\n\n                    this_cell\n                      .append(\"button\")\n                      .classed(\"btn btn-primary btn-xs pull-right\", true)\n                      .text(\"Directly linked \" + annotation)\n                      .style(\"margin-left\", \"1em\")\n                      .on(\"click\", function (e) {\n                            var directly_linked_ids = {};\n                            var node_ids = {};\n\n                            _.each (cluster.children, function (n) {\n                                node_ids[n.id] = 1;\n                            });\n\n                            var direct_links_only = hivtrace_cluster_depthwise_traversal (\n                                self.json.Nodes,\n                                self.json.Edges,\n                                function (edge) {\n                                     return (self.json.Nodes[edge.target].id in node_ids) || (self.json.Nodes[edge.source].id in node_ids);\n                                },\n                                false,\n                                cluster.children\n                            );\n\n                            _.each (direct_links_only[0], function (n) {\n                                directly_linked_ids[n.id] = true;\n                            });\n\n                            //console.log (directly_linked_ids);\n\n\n                            _social_view_handler (payload[2], function(n) {\n                                    return n.id in directly_linked_ids;\n                                }, labeled_links, shown_types, function(id) {\n                                    return \"Cluster \" + id + \"[+ direct \" + annotation + \"]\";\n                                  }, e);\n                       });\n\n                    this_cell\n                      .append(\"button\")\n                      .classed(\"btn btn-primary btn-xs pull-right\", true)\n                      .text(\"Complete \" + annotation)\n                      .on(\"click\", _.partial (_social_view_handler, payload[2], function(n) {\n                        return (\n                          n.extended_cluster &&\n                          payload[2] in n.extended_cluster\n                        );\n                      }, labeled_links, shown_types, function(id) {\n                             return \"Cluster \" + id + \"[+ \" + annotation + \"]\";\n                        }));\n\n                  }\n                }\n              };\n            }\n          }\n        ];\n\n        if (self.extra_cluster_table_columns) {\n            self.extra_cluster_table_columns = self.extra_cluster_table_columns.concat(\n              injected_column\n            );\n        } else {\n            self.extra_cluster_table_columns = injected_column;\n        }\n\n        self.draw_cluster_table(\n          self.extra_cluster_table_columns,\n          self.cluster_table\n        );\n\n        if (self.subcluster_table) {\n            if (self.extra_subcluster_table_columns) {\n                self.extra_subcluster_table_columns = self.extra_subcluster_table_columns.concat(\n                    injected_column_subcluster\n                );\n            } else {\n                self.extra_subcluster_table_columns = injected_column_subcluster;\n            }\n            self.draw_cluster_table(\n                  self.extra_subcluster_table_columns,\n                  self.subcluster_table,\n                  {\"subclusters\" : true, \"no-clusters\" : true}\n            );\n        }\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    return {\n      nodes: new_nodes,\n      existing_nodes: existing_nodes,\n      edges: edge_types_dict\n    };\n  };\n\n\n  self.update_clusters_with_injected_nodes = function(\n    node_filter,\n    edge_filter,\n    annotation\n  ) {\n    var cluster_report = {};\n\n    try {\n      node_filter =\n        node_filter ||\n        function() {\n          return true;\n        };\n      edge_filter =\n        edge_filter ||\n        function() {\n          return true;\n        };\n\n      var split_clusters = {};\n      var node_id_to_local_cluster = {};\n\n      var recomputed_clusters = hivtrace_cluster_depthwise_traversal(\n        _.filter(self.json.Nodes, node_filter),\n        self.json.Edges,\n        null,\n        false\n      );\n\n      _.each(recomputed_clusters, function(c) {\n        var cluster_ids = {};\n        var injected_count = 0;\n\n        _.each(c, function(n) {\n          cluster_ids[n.cluster] = 1;\n          injected_count += n.cluster ? 0 : 1;\n        });\n\n        //var cluster_ids = _.keys (cluster_ids);\n\n        //console.log (cluster_ids.length);\n\n        // count how many \"injected\" nodes are there in the new cluster\n\n        if (injected_count) {\n          delete cluster_ids[undefined];\n        }\n\n        var cluster_count = _.keys(cluster_ids).length;\n\n        _.each(c, function(n) {\n          if (\"extended_cluster\" in n) {\n            _.extend(n[\"extended_cluster\"], cluster_ids);\n          } else {\n            n[\"extended_cluster\"] = cluster_ids;\n          }\n        });\n\n        _.each(cluster_ids, function(c, k) {\n          //console.log (k);\n          var existing_cluster = self.clusters[k - 1];\n          if (!existing_cluster.injected) {\n            existing_cluster.injected = {};\n          }\n          existing_cluster.injected[annotation] = injected_count;\n          if (\"linked_clusters\" in existing_cluster) {\n            _.extend(existing_cluster[\"linked_clusters\"], cluster_ids);\n          } else {\n            existing_cluster[\"linked_clusters\"] = cluster_ids;\n          }\n        });\n      });\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n\n    return recomputed_clusters;\n  };\n  /*------------ Event Functions ---------------*/\n  function toggle_tooltip(element, turn_on, title, tag, container) {\n    //if (d3.event.defaultPrevented) return;\n\n    if (turn_on && !element.tooltip) {\n      // check to see if there are any other tooltips shown\n      $(\"[role='tooltip']\").each(function(d) {\n        $(this).remove();\n      });\n\n      var this_box = $(element);\n      var this_data = d3.select(element).datum();\n      element.tooltip = this_box.tooltip({\n        title: title + \"<br>\" + tag,\n        html: true,\n        container: container ? container : \"body\"\n      });\n\n      //this_data.fixed = true;\n\n      _.delay(_.bind(element.tooltip.tooltip, element.tooltip), 500, \"show\");\n    } else {\n      if (turn_on == false && element.tooltip) {\n        element.tooltip.tooltip(\"destroy\");\n        element.tooltip = undefined;\n      }\n    }\n  }\n\n  /*------------ Init code ---------------*/\n\n  var l_scale = 5000, // link scale\n    graph_data = self.json, // the raw JSON network object\n    max_points_to_render = 2048,\n    warning_string = \"\",\n    singletons = 0,\n    open_cluster_queue = [],\n    currently_displayed_objects,\n    gravity_scale = d3.scale\n      .pow()\n      .exponent(0.5)\n      .domain([1, 100000])\n      .range([0.1, 0.15]);\n\n  /*------------ D3 globals and SVG elements ---------------*/\n\n  var network_layout = d3.layout\n    .force()\n    .on(\"tick\", tick)\n    .charge(function(d) {\n      if (self.showing_on_map) {\n        return -60\n      }\n      if (d.cluster_id)\n        return (\n          self.charge_correction * (-20 - 5 * Math.pow(d.children.length, 0.7))\n        );\n      return self.charge_correction * (-5 - 20 * Math.sqrt(d.degree));\n    })\n    .linkDistance(function(d) {\n      return Math.max(d.length, 0.005) * l_scale;\n    })\n    .linkStrength(function(d) {\n      if (self.showing_on_map) {\n        return 0.01;\n      }\n      if (d.support !== undefined) {\n        return 2 * (0.5 - d.support);\n      }\n      return 1;\n    })\n    .chargeDistance(l_scale * 0.25)\n    .gravity(self.showing_on_map ? 0 : gravity_scale(json.Nodes.length))\n    .friction(0.25);\n\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n  d3.select(self.container).selectAll(\"svg\").remove();\n  self.node_table.selectAll(\"*\").remove();\n  self.cluster_table.selectAll(\"*\").remove();\n\n  self.network_svg = d3\n    .select(self.container)\n    .append(\"svg:svg\")\n    //.style (\"border\", \"solid black 1px\")\n    .attr(\"id\", self.dom_prefix + \"-network-svg\")\n    .attr(\"width\", self.width + self.margin.left + self.margin.right)\n    .attr(\"height\", self.height + self.margin.top + self.margin.bottom);\n\n  self.network_cluster_dynamics = null;\n\n  //.append(\"g\")\n  // .attr(\"transform\", \"translate(\" + self.margin.left + \",\" + self.margin.top + \")\");\n\n  var legend_vertical_offset;\n  self.showing_on_map ? legend_vertical_offset = 100 : legend_vertical_offset = 5;\n  self.legend_svg = self.network_svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(5,\" + legend_vertical_offset + \")\");\n\n/*\n    self.network_svg\n    .append(\"defs\")\n    .append(\"marker\")\n    .attr(\"id\", self.dom_prefix + \"_arrowhead\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 2)\n    .attr(\"markerWidth\", 6)\n    .attr(\"markerHeight\", 4)\n    .attr(\"orient\", \"auto\")\n    .attr(\"stroke\", \"#666666\")\n    //.attr(\"markerUnits\", \"userSpaceOnUse\")\n    .attr(\"fill\", \"#AAAAAA\")\n    .append(\"path\")\n    .attr(\"d\", \"M 0,0 V 4 L6,2 Z\"); //this is actual shape for arrowhead\n\n*/\n    self.network_svg\n    .append(\"defs\")\n    .append(\"marker\")\n    .attr(\"id\", self.dom_prefix + \"_arrowhead\")\n    .attr(\"refX\", 18)\n    .attr(\"refY\", 6)\n    .attr(\"markerWidth\", 20)\n    .attr(\"markerHeight\", 16)\n    .attr(\"orient\", \"auto\")\n    .attr(\"stroke\", \"#666666\")\n    .attr(\"markerUnits\", \"userSpaceOnUse\")\n    .attr(\"fill\", \"#AAAAAA\")\n    .append(\"path\")\n    .attr(\"d\", \"M 0,0 L 2,6 L 0,12 L14,6 Z\"); //this is actual shape for arrowhead\n\n  change_window_size();\n\n  initial_json_load();\n\n\n  if (options) {\n    if (_.isNumber(options[\"charge\"])) {\n      self.charge_correction = options[\"charge\"];\n    }\n\n    if (\"colorizer\" in options) {\n      self.colorizer = options[\"colorizer\"];\n    }\n\n    if (\"node_shaper\" in options) {\n      self.node_shaper = options[\"node_shaper\"];\n    }\n\n    if (\"callbacks\" in options) {\n      options[\"callbacks\"](self);\n    }\n\n\n    if (_.isArray(options[\"expand\"])) {\n      self.expand_some_clusters(\n        _.filter(self.clusters, function(c) {\n          return options[\"expand\"].indexOf(c.cluster_id) >= 0;\n        })\n      );\n    }\n\n  }\n\n  self.draw_attribute_labels();\n  d3.select(self.container).selectAll(\".my_progress\").style(\"display\", \"none\");\n  network_layout.start();\n\n  return self;\n};\n\nvar hivtrace_cluster_graph_summary = function(graph, tag) {\n  var summary_table = d3.select(tag);\n\n  summary_table = d3.select(tag).select(\"tbody\");\n  if (summary_table.empty()) {\n    summary_table = d3.select(tag).append(\"tbody\");\n  }\n\n  var table_data = [];\n\n  if (!summary_table.empty()) {\n    _.each(graph[\"Network Summary\"], function(value, key) {\n      if (self._is_CDC_ && key == \"Edges\") {\n        key = \"Links\";\n      }\n      if (_.isNumber(value)) {\n        table_data.push([key, value]);\n      }\n    });\n  }\n\n  var degrees = [];\n  _.each(graph[\"Degrees\"][\"Distribution\"], function(value, index) {\n    for (var k = 0; k < value; k++) {\n      degrees.push(index + 1);\n    }\n  });\n  degrees = helpers.describe_vector(degrees);\n  table_data.push([\"Links/node\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  degrees = helpers.describe_vector(graph[\"Cluster sizes\"]);\n  table_data.push([\"Cluster sizes\", \"\"]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Mean</i>\",\n    _defaultFloatFormat(degrees[\"mean\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Median</i>\",\n    _defaultFloatFormat(degrees[\"median\"])\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Range</i>\",\n    degrees[\"min\"] + \" - \" + degrees[\"max\"]\n  ]);\n  table_data.push([\n    \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n    degrees[\"Q1\"] + \" - \" + degrees[\"Q3\"]\n  ]);\n\n  if (self._is_CDC_) {\n    degrees = helpers.describe_vector(\n      _.map(graph[\"Edges\"], function(e) {\n        return e.length;\n      })\n    );\n    table_data.push([\"Genetic distances (links only)\", \"\"]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Mean</i>\",\n      _defaultPercentFormat(degrees[\"mean\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Median</i>\",\n      _defaultPercentFormat(degrees[\"median\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Range</i>\",\n      _defaultPercentFormat(degrees[\"min\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"max\"])\n    ]);\n    table_data.push([\n      \"&nbsp;&nbsp;<i>Interquartile range</i>\",\n      _defaultPercentFormat(degrees[\"Q1\"]) +\n        \" - \" +\n        _defaultPercentFormat(degrees[\"Q3\"])\n    ]);\n  }\n\n  var rows = summary_table.selectAll(\"tr\").data(table_data);\n  rows.enter().append(\"tr\");\n  rows.exit().remove();\n  var columns = rows.selectAll(\"td\").data(function(d) {\n    return d;\n  });\n  columns.enter().append(\"td\");\n  columns.exit();\n  columns.html(function(d) {\n    return d;\n  });\n};\n\nmodule.exports.computeCluster = hivtrace_cluster_depthwise_traversal;\nmodule.exports.clusterNetwork = hivtrace_cluster_network_graph;\nmodule.exports.graphSummary = hivtrace_cluster_graph_summary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/clusternetwork.js","var d3 = require(\"d3\"),\n  _ = require(\"underscore\"),\n  helpers = require(\"./helpers.js\");\n\nfunction hivtrace_cluster_adjacency_list(obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  var adjacency_list = {};\n\n  edges.forEach(function(e, i) {\n    function in_nodes(n, id) {\n      return n.id == id;\n    }\n\n    var seq_ids = e[\"sequences\"];\n\n    var n1 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[0]);\n      })[0],\n      n2 = nodes.filter(function(n) {\n        return in_nodes(n, seq_ids[1]);\n      })[0];\n\n    adjacency_list[n1.id]\n      ? adjacency_list[n1.id].push(n2)\n      : (adjacency_list[n1.id] = [n2]);\n    adjacency_list[n2.id]\n      ? adjacency_list[n2.id].push(n1)\n      : (adjacency_list[n2.id] = [n1]);\n  });\n\n  return adjacency_list;\n}\n\nvar hivtrace_generate_svg_polygon_lookup = {};\n\n_.each(_.range(3, 20), function(d) {\n  var angle_step = Math.PI * 2 / d;\n  hivtrace_generate_svg_polygon_lookup[d] = _.map(_.range(1, d), function(i) {\n    return [Math.cos(angle_step * i), Math.sin(angle_step * i)];\n  });\n});\n\nfunction hivtrace_generate_svg_symbol(type) {\n  switch (type) {\n    case \"circle\":\n    case \"cross\":\n    case \"diamond\":\n    case \"square\":\n    case \"triangle-down\":\n    case \"triangle-up\":\n      return d3.svg.symbol().type(type);\n    case \"triangle\":\n      return new hivtrace_generate_svg_polygon().sides(3);\n    case \"pentagon\":\n      return new hivtrace_generate_svg_polygon().sides(5);\n    case \"hexagon\":\n      return new hivtrace_generate_svg_polygon().sides(6);\n    case \"septagon\":\n      return new hivtrace_generate_svg_polygon().sides(7);\n    case \"octagon\":\n      return new hivtrace_generate_svg_polygon().sides(8);\n    case \"ellipse\":\n      return new hivtrace_generate_svg_ellipse();\n  }\n  //console.log (type);\n  return d3.svg.symbol().type(\"circle\");\n}\n\nvar hivtrace_generate_svg_ellipse = function() {\n  var self = this;\n\n  self.ellipse = function() {\n    var path =\n      \"M \" +\n      self.radius +\n      \" 0 A \" +\n      self.radius * 1 +\n      \" \" +\n      self.radius * 0.75 +\n      \" 0 1 0 \" +\n      self.radius +\n      \" 0.00001\";\n    return path;\n  };\n\n  self.ellipse.type = function() {\n    return self.ellipse;\n  };\n\n  self.ellipse.size = function(attr) {\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(1.25 * attr / Math.PI);\n      return self.ellipse;\n    }\n\n    return self.size;\n  };\n\n  self.ellipse.size(64);\n\n  return self.ellipse;\n};\n\nvar hivtrace_generate_svg_polygon = function() {\n  var self = this;\n\n  self.polygon = function() {\n    var path = \" M\" + self.radius + \" 0\";\n\n    if (self.sides in hivtrace_generate_svg_polygon_lookup) {\n      path += hivtrace_generate_svg_polygon_lookup[self.sides]\n        .map(function(value) {\n          return \" L\" + self.radius * value[0] + \" \" + self.radius * value[1];\n        })\n        .join(\" \");\n    } else {\n      var angle_step = Math.PI * 2 / self.sides,\n        current_angle = 0;\n      for (i = 0; i < self.sides - 1; i++) {\n        current_angle += angle_step;\n        path +=\n          \" L\" +\n          self.radius * Math.cos(current_angle) +\n          \" \" +\n          self.radius * Math.sin(current_angle);\n      }\n    }\n\n    path += \" Z\";\n    return path;\n  };\n\n  self.polygon.sides = function(attr) {\n    if (_.isNumber(attr) && attr > 2) {\n      self.sides = attr;\n      return self.polygon;\n    }\n\n    return self.sides;\n  };\n\n  self.polygon.type = function() {\n    return self.polygon;\n  };\n\n  self.polygon.size = function(attr) {\n    if (_.isNumber(attr)) {\n      self.size = attr;\n      self.radius = Math.sqrt(attr / Math.PI);\n      return self.polygon;\n    }\n\n    return self.size;\n  };\n\n  self.polygon.size(64);\n  self.sides = 6;\n\n  return self.polygon;\n};\n\nfunction hivtrace_new_cluster_adjacency_list(obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  nodes.forEach(function(n) {\n    n.neighbors = d3.set();\n  });\n\n  edges.forEach(function(e) {\n    nodes[e.source].neighbors.add(e.target);\n    nodes[e.target].neighbors.add(e.source);\n  });\n}\n\n// Reconstructs path from floyd-warshall algorithm\nfunction hivtrace_get_path(next, i, j) {\n  var all_paths = [];\n  i = parseInt(i);\n  j = parseInt(j);\n\n  for (var c = 0; c < next[i][j].length; c++) {\n    var k = next[i][j][c];\n    var intermediate = k;\n\n    if (intermediate === null || intermediate == i) {\n      return [[parseInt(i), parseInt(j)]];\n    } else {\n      var paths_i_k = hivtrace_get_path(next, i, intermediate);\n      var paths_k_j = hivtrace_get_path(next, intermediate, j);\n\n      for (var i_k_index = 0; i_k_index < paths_i_k.length; i_k_index++) {\n        var i_k = paths_i_k[i_k_index];\n        for (var k_j_index = 0; k_j_index < paths_k_j.length; k_j_index++) {\n          var k_j = paths_k_j[k_j_index];\n          if (i_k.length) {\n            if (\n              i_k[0] == i &&\n              i_k[i_k.length - 1] == k &&\n              k_j[0] == k &&\n              k_j[k_j.length - 1] == j\n            ) {\n              i_k.pop();\n              all_paths.push(i_k.concat(k_j));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return all_paths;\n}\n\nfunction hivtrace_paths_with_node(node, next, i, j) {\n  var paths = hivtrace_get_path(next, i, j);\n\n  // Retrieve intermediary paths\n  paths = paths.map(function(sublist) {\n    return sublist.slice(1, -1);\n  });\n\n  if (!paths) {\n    return 0;\n  }\n\n  var num_nodes = [];\n\n  for (var k = 0; i < paths.length; k++) {\n    sublist = paths[k];\n    num_nodes.push(\n      d3.sum(\n        sublist.map(function(n) {\n          return n == node;\n        })\n      )\n    );\n  }\n\n  var mean = d3.mean(num_nodes);\n\n  if (mean === undefined) {\n    mean = 0;\n  }\n\n  return mean;\n}\n\n// Same as compute shortest paths, but with an additional next parameter for reconstruction\nfunction hivtrace_compute_shortest_paths_with_reconstruction(\n  obj,\n  subset,\n  use_actual_distances\n) {\n  // Floyd-Warshall implementation\n  var distances = [];\n  var next = [];\n  var nodes = obj.Nodes;\n  var edges = obj.Edges;\n  var node_ids = [];\n\n  var adjacency_list = hivtrace_cluster_adjacency_list(obj);\n\n  if (!subset) {\n    subset = Object.keys(adjacency_list);\n  }\n\n  var node_count = subset.length;\n\n  for (var i = 0; i < subset.length; i++) {\n    var a_node = subset[i];\n    var empty_arr = _.range(node_count).map(function(d) {\n      return null;\n    });\n    var zeroes = _.range(node_count).map(function(d) {\n      return null;\n    });\n    distances.push(zeroes);\n    next.push(empty_arr);\n  }\n\n  for (var index = 0; index < subset.length; index++) {\n    var a_node = subset[index];\n    for (var index2 = 0; index2 < subset.length; index2++) {\n      var second_node = subset[index2];\n      if (second_node != a_node) {\n        if (\n          adjacency_list[a_node]\n            .map(function(n) {\n              return n.id;\n            })\n            .indexOf(second_node) != -1\n        ) {\n          distances[index][index2] = 1;\n          distances[index2][index] = 1;\n        }\n      }\n    }\n  }\n\n  for (var index_i = 0; index_i < subset.length; index_i++) {\n    var n_i = subset[index_i];\n    for (var index_j = 0; index_j < subset.length; index_j++) {\n      var n_j = subset[index_j];\n      if (index_i == index_j) {\n        next[index_i][index_j] = [];\n      } else {\n        next[index_i][index_j] = [index_i];\n      }\n    }\n  }\n\n  // clone distances\n  var distances2 = _.map(distances, _.clone);\n  var c = 0;\n\n  for (var index_k = 0; index_k < subset.length; index_k++) {\n    var n_k = subset[index_k];\n    for (var index_i = 0; index_i < subset.length; index_i++) {\n      var n_i = subset[index_i];\n      for (var index_j = 0; index_j < subset.length; index_j++) {\n        var n_j = subset[index_j];\n\n        if (n_i != n_j) {\n          d_ik = distances[index_k][index_i];\n          d_jk = distances[index_k][index_j];\n          d_ij = distances[index_i][index_j];\n\n          if (d_ik !== null && d_jk !== null) {\n            d_ik += d_jk;\n            if (d_ij === null || d_ij > d_ik) {\n              distances2[index_i][index_j] = d_ik;\n              distances2[index_j][index_i] = d_ik;\n              next[index_i][index_j] = [];\n              next[index_i][index_j] = next[index_i][index_j].concat(\n                next[index_k][index_j]\n              );\n              continue;\n            } else if (d_ij == d_ik) {\n              next[index_i][index_j] = next[index_i][index_j].concat(\n                next[index_k][index_j]\n              );\n            }\n          }\n          c++;\n          distances2[index_j][index_i] = distances[index_j][index_i];\n          distances2[index_i][index_j] = distances[index_i][index_j];\n        }\n      }\n    }\n\n    var t = distances2;\n    distances2 = distances;\n    distances = t;\n  }\n\n  return {\n    ordering: subset,\n    distances: distances,\n    next: next\n  };\n}\n\nfunction hivtrace_filter_to_node_in_cluster(node, obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges,\n    cluster_id = null;\n\n  // Retrieve nodes that are part of the cluster\n  var node_obj = nodes.filter(function(n) {\n    return node == n.id;\n  });\n\n  if (node_obj) {\n    cluster_id = node_obj[0].cluster;\n  } else {\n    console.log(\"could not find node\");\n    return null;\n  }\n\n  // Filter out all edges and nodes that belong to the cluster\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster_id == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n  return filtered_obj;\n}\n\nfunction hivtrace_compute_betweenness_centrality_all_nodes_in_cluster(\n  cluster,\n  obj,\n  cb\n) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  var nodes_in_cluster = nodes.filter(function(n) {\n    return cluster == n.cluster;\n  });\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n  var edges_in_cluster = edges.filter(function(e) {\n    return node_ids.indexOf(e.sequences[0]) != -1;\n  });\n\n  var filtered_obj = {};\n  filtered_obj[\"Nodes\"] = nodes_in_cluster;\n  filtered_obj[\"Edges\"] = edges_in_cluster;\n\n  // get length of cluster\n  if (nodes_in_cluster.length > 70) {\n    cb(\"cluster too large\", null);\n    return;\n  }\n\n  // get paths\n  var paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  var node_ids = nodes_in_cluster.map(function(n) {\n    return n.id;\n  });\n\n  var betweenness = {};\n  nodes_in_cluster.forEach(function(n) {\n    betweenness[n.id] = hivtrace_compute_betweenness_centrality(\n      n.id,\n      filtered_obj,\n      paths\n    );\n  });\n\n  cb(null, betweenness);\n  return;\n}\n\n// Returns dictionary of nodes' betweenness centrality\n// Utilizes the Floyd-Warshall Algorithm with reconstruction\nfunction hivtrace_compute_betweenness_centrality(node, obj, paths) {\n  if (!paths) {\n    var filtered_obj = hivtrace_filter_to_node_in_cluster(node, obj);\n    paths = hivtrace_compute_shortest_paths_with_reconstruction(filtered_obj);\n  }\n\n  // find index of id\n  var index = paths.ordering.indexOf(node);\n\n  if (index == -1) {\n    return null;\n  }\n\n  var length = paths.distances.length;\n\n  if (length != 2) {\n    scale = 1 / ((length - 1) * (length - 2));\n  } else {\n    scale = 1;\n  }\n\n  // If s->t goes through 1, add to sum\n  // Reconstruct each shortest path and check if node is in it\n  var paths_with_node = [];\n  for (var i in _.range(length)) {\n    for (var j in _.range(length)) {\n      paths_with_node.push(hivtrace_paths_with_node(index, paths.next, i, j));\n    }\n  }\n\n  return d3.sum(paths_with_node) * scale;\n}\n\nfunction hivtrace_compute_node_degrees(obj) {\n  var nodes = obj.Nodes,\n    edges = obj.Edges;\n\n  for (var n in nodes) {\n    nodes[n].degree = 0;\n  }\n\n  for (var e in edges) {\n    nodes[edges[e].source].degree++;\n    nodes[edges[e].target].degree++;\n  }\n}\n\nfunction hivtrace_get_node_by_id(id, obj) {\n  return (\n    obj.Nodes.filter(function(n) {\n      return id == n.id;\n    })[0] || undefined\n  );\n}\n\nfunction hivtrace_compute_cluster_betweenness(obj, callback) {\n  var nodes = obj.Nodes;\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  // Get all unique clusters\n  var clusters = nodes.map(function(n) {\n    return n.cluster;\n  });\n  var unique_clusters = clusters.filter(onlyUnique);\n\n  var cb_count = 0;\n\n  function cb(err, results) {\n    cb_count++;\n\n    for (var node in results) {\n      hivtrace_get_node_by_id(node, obj)[\"betweenness\"] = results[node];\n    }\n\n    if (cb_count >= unique_clusters.length) {\n      callback(\"done\");\n    }\n  }\n\n  // Compute betweenness in parallel\n  unique_clusters.forEach(function(cluster_id) {\n    hivtrace_betweenness_centrality_all_nodes_in_cluster(cluster_id, obj, cb);\n  });\n\n  // once all settled callback\n}\n\nfunction hivtrace_is_contaminant(node) {\n  return node.attributes.indexOf(\"problematic\") != -1;\n}\n\nfunction hivtrace_convert_to_csv(obj, callback) {\n  //Translate nodes to rows, and then use d3.format\n  hivtrace_compute_node_degrees(obj);\n\n  hivtrace_compute_cluster_betweenness(obj, function(err) {\n    var node_array = obj.Nodes.map(function(d) {\n      return [\n        d.id,\n        d.cluster,\n        d.degree,\n        d.betweenness,\n        hivtrace_is_contaminant(d),\n        d.attributes.join(\";\")\n      ];\n    });\n    node_array.unshift([\n      \"seqid\",\n      \"cluster\",\n      \"degree\",\n      \"betweenness\",\n      \"is_contaminant\",\n      \"attributes\"\n    ]);\n    node_csv = d3.csv.format(node_array);\n    callback(null, node_csv);\n  });\n}\n\nfunction hivtrace_export_csv_button(graph, tag) {\n  var data = hivtrace_convert_to_csv(graph, function(err, data) {\n    if (data !== null) {\n      var pom = document.createElement(\"a\");\n      pom.setAttribute(\n        \"href\",\n        \"data:text/csv;charset=utf-8,\" + encodeURIComponent(data)\n      );\n      pom.setAttribute(\"download\", \"export.csv\");\n      pom.className = \"btn btn-default btn-sm\";\n      pom.innerHTML =\n        '<span class=\"glyphicon glyphicon-floppy-save\"></span> Export Results';\n      $(tag).append(pom);\n    }\n  });\n}\n\nfunction hiv_trace_export_table_to_text(parent_id, table_id, sep) {\n  var the_button = d3.select(parent_id);\n  the_button.selectAll(\"[data-type='download-button']\").remove();\n\n  the_button = the_button\n    .append(\"a\")\n    .attr(\"target\", \"_blank\")\n    .attr(\"data-type\", \"download-button\")\n    .on(\"click\", function(data, element) {\n      d3.event.preventDefault();\n      var table_tag = d3.select(this).attr(\"data-table\");\n      var table_text = helpers.table_to_text(table_tag);\n      helpers.export_handler(\n        table_text,\n        table_tag.substring(1) + \".tsv\",\n        \"text/tab-separated-values\"\n      );\n    })\n    .attr(\"data-table\", table_id);\n\n  the_button.append(\"i\").classed(\"fa fa-download fa-2x\", true);\n  return the_button;\n}\n\nvar hivtrace_compute_local_clustering_coefficients = _.once(function(obj) {\n  hivtrace_new_cluster_adjacency_list(obj);\n\n  var nodes = obj.Nodes;\n\n  nodes.forEach(function(n) {\n    var a_node = n;\n    var neighborhood_size = a_node.neighbors.size();\n\n    if (neighborhood_size < 2) {\n      a_node.lcc = undefined;\n    } else {\n      if (neighborhood_size > 500) {\n        a_node.lcc = hivtrace_too_large;\n      } else {\n        // count triangles\n        neighborhood = a_node.neighbors.values();\n        counter = 0;\n        for (n1 = 0; n1 < neighborhood_size; n1 += 1) {\n          for (n2 = n1 + 1; n2 < neighborhood_size; n2 += 1) {\n            if (nodes[neighborhood[n1]].neighbors.has(neighborhood[n2])) {\n              counter++;\n            }\n          }\n        }\n        a_node.lcc = 2 * counter / neighborhood_size / (neighborhood_size - 1);\n      }\n    }\n  });\n});\n\nfunction hivtrace_render_settings(settings, explanations) {\n  // TODO:\n  //d3.json (explanations, function (error, expl) {\n  //    //console.log (settings);\n  //});\n}\n\nfunction hivtrace_format_value(value, formatter) {\n  if (typeof value === \"undefined\") {\n    return \"Not computed\";\n  }\n  if (value === hivtrace_undefined) {\n    return \"Undefined\";\n  }\n  if (value === hivtrace_too_large) {\n    return \"Size limit\";\n  }\n\n  if (value === hivtrace_processing) {\n    return '<span class=\"fa fa-spin fa-spinner\"></span>';\n  }\n\n  return formatter ? formatter(value) : value;\n}\n\n\nfunction hivtrace_plot_case_time_series(\n  time_series,\n  container,\n  x_title,\n  y_title,\n  y_scale,\n  bin_by,\n  options\n) {\n  options = options || {\n    base_line: 20,\n    top: 40,\n    right: 30,\n    bottom: 3 * 20,\n    left: 5 * 20,\n    font_size: 18,\n    rect_size: 22,\n    width: 1024,\n    height: 600\n  };\n\n\n}\n\nfunction hivtrace_plot_cluster_dynamics(\n  time_series,\n  container,\n  x_title,\n  y_title,\n  y_scale,\n  bin_by,\n  options\n) {\n  options = options || {\n    base_line: 20,\n    top: 40,\n    right: 30,\n    bottom: 3 * 20,\n    left: 5 * 20,\n    font_size: 18,\n    rect_size: 22,\n    width: 1024,\n    height: 600\n  };\n\n  if (time_series.length == 0) {\n    return;\n  }\n\n  var do_barchart     = options && options[\"barchart\"];\n  var skip_cumulative = options && options[\"skip_cumulative\"] || do_barchart;\n\n\n\n  var width = options.width - options.left - options.right;\n  var height = options.height - options.top - options.bottom;\n  var min_diff;\n\n  if (!bin_by) {\n    bin_by = function(date) {\n      var year = date.getFullYear(),\n        nearest_quarter = new Date(),\n        mid_point = new Date();\n\n      nearest_quarter.setDate(1);\n      nearest_quarter.setFullYear(year);\n      mid_point.setFullYear(year);\n\n      var quarter = Math.floor(date.getMonth() / 3) + 1;\n      nearest_quarter.setMonth(quarter * 3);\n      nearest_quarter.setHours(0, 0, 0);\n      mid_point.setHours(0, 0, 0);\n\n      nearest_quarter.setFullYear(year + (quarter == 4 ? 1 : 0));\n      mid_point.setMonth(quarter * 3 + 1);\n      mid_point.setDate(15);\n\n      return [\"Q\" + quarter + \" \" + year, nearest_quarter, mid_point];\n    };\n\n    min_diff = new Date (2018,3,0) - new Date(2018,0,0);\n  }\n\n\n\n  var x_tick_format = function (d) {\n    var year = d.getFullYear();\n    var quarter = Math.floor(d.getMonth() / 3) + 1;\n\n    return \"\" + year + \"-Q\" + quarter;\n  };\n\n  if (options && options [\"x-tick-format\"]) {\n    x_tick_format = options [\"x-tick-format\"];\n  }\n\n  /** plot_data is an array with entries like\n        {\n            \"time\": DATE,\n            \"sex_trans\":\"IDU-Male\"\n        }\n\n        \"time\" is required, everything else are optional attributes\n\n        1. First, we bin everything into ranges (like years or quarters, this is returned by the mapper callback)\n        2. Second, we compute growth dynamics of total counts and individual attributes\n        3. Third, if additional attributes are present, one that's tagged for display is stratified by values and\n           converted into time series\n\n    */\n\n  var x = d3.time.scale().range([0, width]);\n\n  var y = y_scale ? y_scale : d3.scale.linear();\n\n\n  if (!y_scale) {\n    y.rangeRound ([height, 0]);\n  } else {\n    y.range([height, 0]);\n  }\n\n  var xAxis = d3.svg\n    .axis()\n    .scale(x)\n    .orient(\"bottom\")\n    .ticks(8)\n    .tickFormat(d3.time.format(\"%m/%Y\"));\n\n  if (x_tick_format) {\n    xAxis.tickFormat (x_tick_format);\n  }\n\n  var yAxis = d3.svg.axis().scale(y).orient(\"left\").tickFormat(function (v) {\n    if (v << 0 == v) { // an integer\n        return v;\n    }\n    return;\n  });\n\n  var binned = {};\n  var values_by_attribute = {};\n  var total_id = \"total\";\n  var total_color = \"#555555\";\n  var prefix = options && options[\"prefix\"] ? options[\"prefix\"] : \"\";\n  var max_bin = 0;\n\n  _.each(time_series, function(point, index) {\n    var bin_tag = bin_by(point[\"time\"]);\n    if (!(bin_tag[0] in binned)) {\n      binned[bin_tag[0]] = { time: bin_tag[1], x: bin_tag[2] };\n      binned[bin_tag[0]][total_id] = 0;\n      _.each(point, function(v, k) {\n        if (k != \"time\") {\n          binned[bin_tag[0]][k] = {};\n        }\n      });\n    }\n\n    binned[bin_tag[0]][total_id] += 1;\n    max_bin = Math.max(max_bin, binned[bin_tag[0]][total_id]);\n\n    var y = {};\n    y[total_id] = index + 1;\n    _.each(point, function(v, k) {\n      if (k != \"time\") {\n        binned[bin_tag[0]][k][v] = binned[bin_tag[0]][k][v]\n          ? binned[bin_tag[0]][k][v] + 1\n          : 1;\n        if (!(k in values_by_attribute)) {\n          values_by_attribute[k] = {};\n        }\n        if (v in values_by_attribute[k]) {\n          values_by_attribute[k][v]++;\n        } else {\n          values_by_attribute[k][v] = 1;\n        }\n        max_bin = Math.max(max_bin, binned[bin_tag[0]][k][v]);\n        y[k] = _.clone(values_by_attribute[k]);\n      }\n    });\n\n    point[\"y\"] = y;\n    point[\"_bin\"] = bin_tag[1];\n  });\n\n  var binned_array = [];\n  _.each(binned, function(v, k) {\n    v[\"id\"] = k;\n    binned_array.push(v);\n  });\n\n\n  binned_array.sort(function(a, b) {\n    return b[\"time\"] > a[\"time\"] ? 1 : b[\"time\"] == a[\"time\"] ? 0 : -1;\n  });\n\n\n  if (do_barchart) {\n    if (_.isUndefined (min_diff)) {\n      _.each(binned_array, function (d, i) {\n            if (i > 0) {\n                min_diff = Math.min (min_diff, -(d[\"time\"] - binned_array[i-1][\"time\"]));\n            }\n      });\n    }\n    min_diff = min_diff * 0.8; // convert to seconds and shrink a bit\n  }\n\n\n\n  var min_x = d3.min(time_series, function(d) {\n    return d[\"time\"] < d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n  });\n  var max_x = d3.max(time_series, function(d) {\n    return d[\"time\"] > d[\"_bin\"] ? d[\"time\"] : d[\"_bin\"];\n  });\n\n  if (do_barchart) {\n     var max_x2 = new Date ();\n     max_x2.setTime(max_x.getTime() + min_diff);\n     max_x = max_x2;\n  }\n\n  x.domain([min_x, max_x]).clamp(true);\n  y\n    .domain([\n      0.0,\n      Math.round(skip_cumulative ? max_bin + 1 : time_series.length * 1.2)\n    ])\n    .clamp(true);\n\n  /* step-plot generator*/\n\n  /*var svg = container.append(\"svg\")//.style(\"display\", \"table-cell\")\n        .attr(\"width\", width + options.left + options.right)\n        .attr(\"height\", height + options.top + options.bottom);*/\n\n  container.selectAll(\"*\").remove(); // clean up previous plots\n\n  var legend_area = container\n    .append(\"g\")\n    .attr(\n      \"transform\",\n      \"translate(\" +\n        (options.left + options.font_size * 2.5) +\n        \",\" +\n        (options.top + options.font_size) +\n        \")\"\n    );\n\n  var svg = container\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + options.left + \",\" + options.top + \")\");\n\n  /* set the domain for the codons */\n\n  var y_key = _.keys(values_by_attribute)[0];\n\n  var color_scale =\n    \"colorizer\" in options &&\n    options[\"colorizer\"] &&\n    y_key in options[\"colorizer\"]\n      ? options[\"colorizer\"][y_key]\n      : d3.scale.category10();\n\n  color_scale = _.wrap(color_scale, function(func, arg) {\n    if (arg == total_id) return total_color;\n    return func(arg);\n  });\n\n  var plot_types = _.keys(values_by_attribute[y_key]);\n\n  if (do_barchart) {\n    if (plot_types.length == 0) {\n        plot_types.push(total_id);\n    }\n  } else {\n    plot_types.push(total_id);\n  }\n\n  plot_types.sort();\n\n  if (options && options[\"drag\"]) {\n    var drag = d3.behavior.drag();\n    drag.on(\"drag\", function() {\n      options[\"drag\"].x += d3.event.dx;\n      options[\"drag\"].y += d3.event.dy;\n      d3\n        .select(this)\n        .attr(\n          \"transform\",\n          \"translate(\" + options[\"drag\"].x + \",\" + options[\"drag\"].y + \")\"\n        );\n    });\n    container.call(drag);\n  }\n\n  function opacity_toggle(tag, on_off) {\n    if (do_barchart) {\n        d3\n          .selectAll('[data-plotid=\"' + tag + '\"]')\n          .style(\"stroke-width\", on_off ? 4 : 1);\n\n    } else {\n        d3\n          .selectAll('[data-plotid=\"' + tag + '\"]')\n          .style(\"fill-opacity\", on_off ? 0.5 : 0.1);\n    }\n    d3\n      .selectAll('[data-curveid=\"' + tag + '\"]')\n      .style(\"stroke-width\", on_off ? 3 : 1);\n  }\n\n  if (!do_barchart || plot_types.length > 1 || plot_types[0] != total_id) {\n\n      var legend_lines = legend_area.selectAll(\"g\").data(plot_types);\n\n      legend_lines.enter().append(\"g\").attr(\"class\", \"annotation-text\");\n\n\n      legend_lines\n        .selectAll(\"text\")\n        .data(function(d) {\n          return [d];\n        })\n        .enter()\n        .append(\"text\")\n        .attr(\"transform\", function(d, i, j) {\n          return (\n            \"translate(\" +\n            options.rect_size +\n            \",\" +\n            (options.rect_size * (plot_types.length - 1 - j) -\n              (options.rect_size - options.font_size)) +\n            \")\"\n          );\n        })\n        .attr(\"dx\", \"0.2em\")\n        .style(\"font-size\", options.font_size)\n        .text(function(d) {\n          return d;\n        })\n        .on(\"mouseover\", function(d) {\n          opacity_toggle(prefix + d, true);\n        })\n        .on(\"mouseout\", function(d) {\n          opacity_toggle(prefix + d, false);\n        });\n\n      legend_lines\n        .selectAll(\"rect\")\n        .data(function(d) {\n          return [d];\n        })\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", function(d, i, j) {\n          return options.rect_size * (plot_types.length - 2 - j);\n        })\n        .attr(\"width\", options.rect_size)\n        .attr(\"height\", options.rect_size)\n        .attr(\"class\", \"area\")\n        .style(\"fill\", function(d, i, j) {\n          return color_scale(d);\n        })\n        .on(\"mouseover\", function(d) {\n          opacity_toggle(prefix + d, true);\n        })\n        .on(\"mouseout\", function(d) {\n          opacity_toggle(prefix + d, false);\n        });\n    }\n\n  var last = _.clone(time_series[time_series.length - 1]);\n  last[\"time\"] = x.domain()[1];\n  time_series.push(last);\n\n\n\n  _.each(plot_types, function(plot_key, idx) {\n\n\n    var plot_color = color_scale(plot_key);\n    var y_accessor = function(d) {\n      //console.log ((plot_key in d['y']) ? d['y'][plot_key] : 0);\n      if (plot_key in d[\"y\"]) {\n        return d[\"y\"][plot_key];\n      }\n      if (y_key in d[\"y\"]) {\n        if (plot_key in d[\"y\"][y_key]) {\n          return d[\"y\"][y_key][plot_key];\n        }\n      }\n      return 0.0;\n    };\n\n    var bin_accessor = function(d) {\n      if (y_key && plot_key in d[y_key]) {\n        return d[y_key][plot_key];\n      } else {\n        if (plot_key in d) {\n          return d[plot_key];\n        }\n      }\n      return 0.0;\n    };\n\n    if (!skip_cumulative) {\n      var curve = d3.svg\n        .area()\n        .x(function(d) {\n          return x(d[\"time\"]);\n        })\n        .y1(function(d) {\n          return y(y_accessor(d));\n        })\n        .y0(function(d) {\n          return y(0);\n        })\n        .interpolate(\"step\");\n\n      svg\n        .append(\"path\")\n        .datum(time_series)\n        .classed(\"trend\", true)\n        .style(\"fill\", plot_color)\n        .style(\"stroke\", plot_color)\n        .attr(\"d\", curve)\n        .attr(\"data-plotid\", prefix + plot_key);\n    }\n\n\n\n    if (do_barchart) {\n        binned_array.forEach(function(d) {\n            var dd = new Date();\n            dd.setTime(d[\"time\"].getTime() - min_diff * 0.5);\n            var dd2 = new Date();\n            dd2.setTime(d[\"time\"].getTime() + min_diff * 0.5);\n            var xc = x(dd);\n            var w = x(dd2) - x(dd);\n            var last_y = (\"last_y\" in d) ? d[\"last_y\"] : 0;\n            var new_y = bin_accessor(d);\n            svg.append (\"rect\")\n               .attr (\"x\", xc)\n               .attr (\"y\", y(last_y+new_y))\n               .attr (\"height\",  y(0) - y(new_y))\n               .attr (\"width\", w).attr(\"data-plotid\", prefix + plot_key)\n               .classed(\"tracer\", true)\n               .style(\"fill\", plot_color)\n               .style(\"stroke\", d3.rgb (plot_color).darker (2))\n               .style(\"fill-opacity\", 1)\n               .append (\"title\").text (plot_key + \" \" + new_y + \" cases in \" +\n                    (x_tick_format ? x_tick_format(d[\"time\"]) : d[\"time\"]));\n\n            d[\"last_y\"] = (d[\"last_y\"] ? d[\"last_y\"] : 0) + new_y;\n\n        });\n    } else {\n\n        binned_array.forEach(function(d) {\n          svg\n            .append(\"circle\")\n            .attr(\"cx\", x(d[\"time\"]))\n            .attr(\"cy\", y(bin_accessor(d)))\n            .attr(\"r\", \"5\")\n            .classed(\"node\", true)\n            .style(\"fill\", plot_color)\n            .style(\"stroke\", plot_color)\n            .attr(\"title\", plot_key + \" : \" + bin_accessor(d));\n        });\n\n        var curve_year = d3.svg\n          .line()\n          .x(function(d) {\n            return x(d[\"time\"]);\n          })\n          .y(function(d) {\n            return y(bin_accessor(d));\n          })\n          .interpolate(\"cardinal\");\n\n        svg\n          .append(\"path\")\n          .datum(binned_array)\n          .classed(\"tracer\", true)\n          .style(\"stroke\", plot_color)\n          .attr(\"d\", curve_year)\n          .attr(\"data-curveid\", prefix + plot_key);\n    }\n  });\n\n  /* x-axis */\n  var x_axis = svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .style(\"font-size\", options.font_size)\n    .call(xAxis);\n\n  x_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(-45)\")\n    .attr(\"dy\", \"0.9em\")\n    .attr(\"dx\", \"-1.75em\");\n\n  x_axis\n    .append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"dy\", \"3.5em\")\n    .style(\"text-anchor\", \"middle\")\n    .style(\"font-size\", options.font_size * 1.5)\n    .text(x_title);\n\n  /* y-axis*/\n  svg\n    .append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .style(\"font-size\", options.font_size)\n    .call(yAxis)\n    .append(\"text\")\n    .style(\"font-size\", options.font_size * 1.5)\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", 6)\n    .attr(\"dy\", \"-2em\")\n    //.attr(\"dx\", \"-1em\")\n    .style(\"text-anchor\", \"end\")\n    .text(y_title); // beta - alpha\n}\n\nmodule.exports.compute_node_degrees = hivtrace_compute_node_degrees;\nmodule.exports.export_csv_button = hivtrace_export_csv_button;\nmodule.exports.convert_to_csv = hivtrace_convert_to_csv;\nmodule.exports.betweenness_centrality = hivtrace_compute_betweenness_centrality;\nmodule.exports.betweenness_centrality_all_nodes_in_cluster = hivtrace_compute_betweenness_centrality_all_nodes_in_cluster;\nmodule.exports.cluster_adjacency_list = hivtrace_cluster_adjacency_list;\nmodule.exports.new_cluster_adjacency_list = hivtrace_new_cluster_adjacency_list;\nmodule.exports.analysis_settings = hivtrace_render_settings;\nmodule.exports.export_table_to_text = hiv_trace_export_table_to_text;\nmodule.exports.compute_local_clustering = hivtrace_compute_local_clustering_coefficients;\nmodule.exports.undefined = {};\nmodule.exports.too_large = {};\nmodule.exports.processing = {};\nmodule.exports.format_value = hivtrace_format_value;\nmodule.exports.polygon = hivtrace_generate_svg_polygon;\nmodule.exports.symbol = hivtrace_generate_svg_symbol;\nmodule.exports.cluster_dynamics = hivtrace_plot_cluster_dynamics;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc.js","var download = require(\"downloadjs\");\n\nvar datamonkey_error_modal = function(msg) {\n  $(\"#modal-error-msg\").text(msg);\n  $(\"#errorModal\").modal();\n};\n\nfunction b64toBlob(b64, onsuccess, onerror) {\n  var img = new Image();\n\n  img.onerror = onerror;\n\n  img.onload = function onload() {\n    var canvas = document.getElementById(\"hyphy-chart-canvas\");\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    var ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n    if (canvas.msToBlob) {\n      var blob = canvas.msToBlob(onsuccess);\n      onsuccess(blob);\n      window.navigator.msSaveBlob(blob, \"image.png\");\n    } else {\n      canvas.toBlob(onsuccess);\n    }\n  };\n\n  img.src = b64;\n}\n\nvar datamonkey_export_csv_button = function(data) {\n  data = d3.csv.format(data);\n  if (data !== null) {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\n      \"href\",\n      \"data:text/csv;charset=utf-8,\" + encodeURIComponent(data)\n    );\n    pom.setAttribute(\"download\", \"export.csv\");\n    pom.className = \"btn btn-default btn-sm\";\n    pom.innerHTML =\n      '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\nvar datamonkey_save_image = function(type, container) {\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  function get_styles(doc) {\n    function process_stylesheet(ss) {\n      try {\n        if (ss.cssRules) {\n          for (var i = 0; i < ss.cssRules.length; i++) {\n            var rule = ss.cssRules[i];\n            if (rule.type === 3) {\n              // Import Rule\n              process_stylesheet(rule.styleSheet);\n            } else {\n              // hack for illustrator crashing on descendent selectors\n              if (rule.selectorText) {\n                if (rule.selectorText.indexOf(\">\") === -1) {\n                  styles += \"\\n\" + rule.cssText;\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        console.log(\"Could not process stylesheet : \" + ss);\n      }\n    }\n\n    var styles = \"\",\n      styleSheets = doc.styleSheets;\n\n    if (styleSheets) {\n      for (var i = 0; i < styleSheets.length; i++) {\n        process_stylesheet(styleSheets[i]);\n      }\n    }\n\n    return styles;\n  }\n\n  var convert_svg_to_png = function(image_string) {\n    var image = document.getElementById(\"hyphy-chart-image\");\n\n    image.onload = function() {\n      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = \"#FFFFFF\";\n      context.fillRect(0, 0, image.width, image.height);\n      context.drawImage(image, 0, 0);\n      var img = canvas.toDataURL(\"image/png\");\n      var pom = document.createElement(\"a\");\n      pom.setAttribute(\"download\", \"image.png\");\n      pom.href = canvas.toDataURL(\"image/png\");\n      $(\"body\").append(pom);\n      pom.click();\n      pom.remove();\n    };\n\n    image.src = image_string;\n  };\n\n  var svg = $(container).find(\"svg\")[0];\n  if (!svg) {\n    svg = $(container)[0];\n  }\n\n  var styles = get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = new XMLSerializer()\n    .serializeToString(svg)\n    .replace(\"</style>\", \"<![CDATA[\" + styles + \"]]></style>\");\n  var rect = svg.getBoundingClientRect();\n  var doctype =\n    '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string =\n    \"data:image/svg+xml;base66,\" + encodeURIComponent(to_download);\n\n  if (navigator.msSaveBlob) {\n    // IE10\n    download(image_string, \"image.svg\", \"image/svg+xml\");\n  } else if (type == \"png\") {\n    b64toBlob(\n      image_string,\n      function(blob) {\n        var url = window.URL.createObjectURL(blob);\n        var pom = document.createElement(\"a\");\n        pom.setAttribute(\"download\", \"image.png\");\n        pom.setAttribute(\"href\", url);\n        $(\"body\").append(pom);\n        pom.click();\n        pom.remove();\n      },\n      function(error) {\n        console.log(error);\n      }\n    );\n  } else {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\"download\", \"image.svg\");\n    pom.setAttribute(\"href\", image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\nvar datamonkey_validate_date = function() {\n  // Check that it is not empty\n  if ($(this).val().length === 0) {\n    $(this).next(\".help-block\").remove();\n    $(this).parent().removeClass(\"has-success\");\n    $(this).parent().addClass(\"has-error\");\n\n    jQuery(\"<span/>\", {\n      class: \"help-block\",\n      text: \"Field is empty\"\n    }).insertAfter($(this));\n  } else if (isNaN(Date.parse($(this).val()))) {\n    $(this).next(\".help-block\").remove();\n    $(this).parent().removeClass(\"has-success\");\n    $(this).parent().addClass(\"has-error\");\n\n    jQuery(\"<span/>\", {\n      class: \"help-block\",\n      text: \"Date format should be in the format YYYY-mm-dd\"\n    }).insertAfter($(this));\n  } else {\n    $(this).parent().removeClass(\"has-error\");\n    $(this).parent().addClass(\"has-success\");\n    $(this).next(\".help-block\").remove();\n  }\n};\n\nfunction datamonkey_get_styles(doc) {\n  var styles = \"\",\n    styleSheets = doc.styleSheets;\n\n  if (styleSheets) {\n    for (var i = 0; i < styleSheets.length; i++) {\n      processStyleSheet(styleSheets[i]);\n    }\n  }\n\n  function processStyleSheet(ss) {\n    if (ss.cssRules) {\n      for (var i = 0; i < ss.cssRules.length; i++) {\n        var rule = ss.cssRules[i];\n        if (rule.type === 3) {\n          // Import Rule\n          processStyleSheet(rule.styleSheet);\n        } else {\n          // hack for illustrator crashing on descendent selectors\n          if (rule.selectorText) {\n            if (rule.selectorText.indexOf(\">\") === -1) {\n              styles += \"\\n\" + rule.cssText;\n            }\n          }\n        }\n      }\n    }\n  }\n  return styles;\n}\n\nfunction datamonkey_save_newick_to_file() {\n  var top_modal_container = \"#neighbor-tree-modal\";\n  var nwk = $(top_modal_container).data(\"tree\");\n  var pom = document.createElement(\"a\");\n  pom.setAttribute(\n    \"href\",\n    \"data:text/octet-stream;charset=utf-8,\" + encodeURIComponent(nwk)\n  );\n  pom.setAttribute(\"download\", \"nwk.txt\");\n  $(\"body\").append(pom);\n  pom.click();\n  pom.remove();\n}\n\nfunction datamonkey_convert_svg_to_png(image_string) {\n  var image = document.getElementById(\"image\");\n  image.src = image_string;\n\n  image.onload = function() {\n    var canvas = document.getElementById(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#FFFFFF\";\n    context.fillRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n    var img = canvas.toDataURL(\"image/png\");\n\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\"download\", \"phylotree.png\");\n    pom.href = canvas.toDataURL(\"image/png\");\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  };\n}\n\nfunction datamonkey_save_newick_tree(type) {\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  var tree_container = \"#tree_container\";\n  var svg = $(\"#tree_container\").find(\"svg\")[0];\n  var styles = datamonkey_get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = new XMLSerializer()\n    .serializeToString(svg)\n    .replace(\"</style>\", \"<![CDATA[\" + styles + \"]]></style>\");\n  var rect = svg.getBoundingClientRect();\n  var doctype =\n    '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string =\n    \"data:image/svg+xml;base66,\" + encodeURIComponent(to_download);\n\n  if (type == \"png\") {\n    datamonkey_convert_svg_to_png(image_string);\n  } else {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\"download\", \"phylotree.svg\");\n    pom.setAttribute(\"href\", image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_validate_email(email) {\n  if ($(this).find(\"input[name='receive_mail']\")[0].checked) {\n    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    if (regex.test($(this).find(\"input[name='mail']\").val())) {\n      // Give them green. They like that.\n      $(this).removeClass(\"has-error\");\n      $(this).addClass(\"has-success\");\n      $(this).next(\".help-block\").remove();\n    } else {\n      $(this).next(\".help-block\").remove();\n      $(this).removeClass(\"has-error\");\n      $(this).removeClass(\"has-success\");\n      $(this).addClass(\"has-error\");\n      var span = jQuery(\"<span/>\", {\n        class: \"help-block col-lg-9 pull-right\",\n        text: \"Invalid Email\"\n      }).insertAfter($(this));\n    }\n  } else {\n    $(this).removeClass(\"has-error\");\n    $(this).removeClass(\"has-success\");\n    $(this).next(\".help-block\").remove();\n  }\n}\n\nfunction datamonkey_describe_vector(vector, as_list) {\n  var d = {};\n\n  if (vector.length) {\n    vector.sort(d3.ascending);\n\n    var d = {\n      min: d3.min(vector),\n      max: d3.max(vector),\n      median: d3.median(vector),\n      Q1: d3.quantile(vector, 0.25),\n      Q3: d3.quantile(vector, 0.75),\n      mean: d3.mean(vector)\n    };\n  } else {\n    var d = {\n      min: null,\n      max: null,\n      median: null,\n      Q1: null,\n      Q3: null,\n      mean: null\n    };\n  }\n\n  if (as_list) {\n    d =\n      \"<pre>Range  :\" +\n      d[\"min\"] +\n      \"-\" +\n      d[\"max\"] +\n      \"\\n\" +\n      \"IQR    :\" +\n      d[\"Q1\"] +\n      \"-\" +\n      d[\"Q3\"] +\n      \"\\n\" +\n      \"Mean   :\" +\n      d[\"mean\"] +\n      \"\\n\" +\n      \"Median :\" +\n      d[\"median\"] +\n      \"\\n\" +\n      \"</pre>\";\n\n    /*d =\n    \"<dl class = 'dl-horizontal'>\" +\n    \"<dt>Range</dt><dd>\" + d['min'] + \"-\" + d['max'] + \"</dd>\" +\n    \"<dt>IQR</dt><dd>\" + d['Q1'] + \"-\" + d['Q3'] +  \"</dd>\" +\n    \"<dt>Mean</dt><dd>\" + d['mean'] +  \"</dd>\" +\n    \"<dt>Median</dt><dd>\" + d['median'] + \"</dd></dl>\";*/\n  }\n\n  return d;\n}\n\nfunction datamonkey_export_handler(data, filename, mimeType) {\n  function msieversion() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n      return true;\n    }\n    return false;\n  }\n\n  if (msieversion()) {\n    var IEwindow = window.open();\n    IEwindow.document.write(data);\n    IEwindow.document.close();\n    IEwindow.document.execCommand(\"SaveAs\", true, filename + \".csv\");\n    IEwindow.close();\n  } else {\n    var pom = document.createElement(\"a\");\n    pom.setAttribute(\n      \"href\",\n      \"data:\" +\n        (mimeType || \"text/plain\") +\n        \";charset=utf-8,\" +\n        encodeURIComponent(data)\n    );\n    pom.setAttribute(\"download\", filename || \"download.tsv\");\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_table_to_text(table_id, sep) {\n  sep = sep || \"\\t\";\n  var header_row = [];\n  var extract_text = function (e) {\n    var first_element = d3.select (e).selectAll (\"p, span, button\");\n    if (!first_element.empty()) {\n        return d3.select(first_element.node()).text();\n    } else {\n        return d3.select(e).text();\n    }\n  };\n\n  d3.selectAll(table_id + \" thead th\").each(function() {\n    header_row.push(extract_text(this));\n  });\n  var data_rows = [];\n  d3.select(table_id + \" tbody\").selectAll (\"tr\").each(function(d, i) {\n    data_rows.push([]);\n    d3.select(this).selectAll(\"td\").each(function() {\n      data_rows[i].push(extract_text(this));\n    });\n  });\n\n  return (\n    header_row.join(sep) +\n    \"\\n\" +\n    data_rows\n      .map(function(d) {\n        return d.join(sep);\n      })\n      .join(\"\\n\")\n  );\n}\n\nfunction datamonkey_capitalize(s) {\n  if (s.length > 0) {\n    return s[0].toUpperCase() + s.slice(1);\n  } else {\n    return s;\n  }\n}\n\nfunction datamonkey_count_partitions(json) {\n  try {\n    return _.keys(json).length;\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_sum(object, accessor) {\n  accessor =\n    accessor ||\n    function(value) {\n      return value;\n    };\n  return _.reduce(\n    object,\n    function(sum, value, index) {\n      return sum + accessor(value, index);\n    },\n    0\n  );\n}\n\nfunction datamonkey_count_sites_from_partitions(json) {\n  try {\n    return datamonkey_sum(json[\"partitions\"], function(value) {\n      return value[\"coverage\"][0].length;\n    });\n  } catch (e) {\n    // ignore errors\n  }\n  return 0;\n}\n\nfunction datamonkey_filter_list(list, predicate, context) {\n  var result = {};\n  predicate = _.bind(predicate, context);\n  _.each(\n    list,\n    _.bind(function(value, key) {\n      if (predicate(value, key)) {\n        result[key] = value;\n      }\n    }, context)\n  );\n  return result;\n}\n\nfunction datamonkey_map_list(list, transform, context) {\n  var result = {};\n  transform = _.bind(transform, context);\n  _.each(\n    list,\n    _.bind(function(value, key) {\n      result[key] = transform(value, key);\n    }, context)\n  );\n  return result;\n}\n\nmodule.exports.errorModal = datamonkey_error_modal;\nmodule.exports.export_csv_button = datamonkey_export_csv_button;\nmodule.exports.save_image = datamonkey_save_image;\nmodule.exports.validate_date = datamonkey_validate_date;\n\nmodule.exports.save_newick_to_file = datamonkey_save_newick_to_file;\nmodule.exports.convert_svg_to_png = datamonkey_convert_svg_to_png;\nmodule.exports.save_newick_tree = datamonkey_save_newick_tree;\nmodule.exports.validate_email = datamonkey_validate_email;\nmodule.exports.describe_vector = datamonkey_describe_vector;\nmodule.exports.table_to_text = datamonkey_table_to_text;\nmodule.exports.export_handler = datamonkey_export_handler;\nmodule.exports.capitalize = datamonkey_capitalize;\nmodule.exports.countPartitionsJSON = datamonkey_count_partitions;\nmodule.exports.countSitesFromPartitionsJSON = datamonkey_count_sites_from_partitions;\nmodule.exports.sum = datamonkey_sum;\nmodule.exports.filter = datamonkey_filter_list;\nmodule.exports.map = datamonkey_map_list;\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/downloadjs/download.js\n// module id = 45\n// module chunks = 0","var d3 = require(\"d3\"),\n  _ = require(\"underscore\");\n\nfunction hivtrace_render_scatterplot(points, w, h, id, labels, dates) {\n  var _defaultDateViewFormat = d3.time.format(\"%B %d, %Y\");\n  var _defaultFloatFormat = d3.format(\",.2r\");\n  var _defaultDateViewFormatShort = d3.time.format(\"%B %Y\");\n\n  var margin = {\n      top: 10,\n      right: 10,\n      bottom: 100,\n      left: 100\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var x = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(\n      d3.extent(points, function(p) {\n        return p.x;\n      })\n    )\n    .range([0, width]);\n\n  var y = (dates ? d3.time.scale() : d3.scale.linear())\n    .domain(\n      d3.extent(points, function(p) {\n        return p.y;\n      })\n    )\n    .range([height, 0]);\n\n  var xAxis = d3.svg\n    .axis()\n    .scale(x)\n    .orient(\"bottom\")\n    .tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var yAxis = d3.svg\n    .axis()\n    .scale(y)\n    .orient(\"left\")\n    .tickFormat(dates ? _defaultDateViewFormatShort : _defaultFloatFormat);\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (!histogram_svg.empty()) {\n    histogram_svg.remove();\n  }\n\n  histogram_svg = d3\n    .select(id)\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  points = histogram_svg.selectAll(\"circle\").data(points);\n  points.enter().append(\"circle\");\n\n  points\n    .attr(\"cx\", function(d) {\n      return x(d.x);\n    })\n    .attr(\"cy\", function(d) {\n      return y(d.y);\n    })\n    .attr(\"r\", 3)\n    .classed(\"node scatter\", true);\n\n  points.each(function(d) {\n    if (\"title\" in d) {\n      d3.select(this).append(\"title\").text(d.title);\n    }\n  });\n\n  var x_axis = histogram_svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n  x_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(-45)\")\n    .attr(\"dx\", \"-.5em\")\n    .attr(\"dy\", \".25em\")\n    .style(\"text-anchor\", \"end\");\n  x_axis\n    .append(\"text\")\n    .text(labels.x)\n    .attr(\"transform\", \"translate(\" + width + \",0)\")\n    .attr(\"dy\", \"-1em\")\n    .attr(\"text-anchor\", \"end\");\n\n  var y_axis = histogram_svg\n    .append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .attr(\"transform\", \"translate(0,\" + 0 + \")\")\n    .call(yAxis);\n\n  y_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(-45)\")\n    .attr(\"dx\", \"-.5em\")\n    .attr(\"dy\", \".25em\")\n    .style(\"text-anchor\", \"end\");\n  y_axis\n    .append(\"text\")\n    .text(labels.y)\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"dy\", \"1em\")\n    .attr(\"text-anchor\", \"end\");\n}\n\nmodule.exports.scatterPlot = hivtrace_render_scatterplot;\n\n\n\n// WEBPACK FOOTER //\n// ./src/scatterplot.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar topojsonClient = require('topojson-client');\nvar topojsonServer = require('topojson-server');\nvar topojsonSimplify = require('topojson-simplify');\n\n\n\nObject.keys(topojsonClient).forEach(function (key) { exports[key] = topojsonClient[key]; });\nObject.keys(topojsonServer).forEach(function (key) { exports[key] = topojsonServer[key]; });\nObject.keys(topojsonSimplify).forEach(function (key) { exports[key] = topojsonSimplify[key]; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/topojson/dist/topojson.node.js\n// module id = 47\n// module chunks = 0","// https://github.com/topojson/topojson-client Version 3.0.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.topojson = global.topojson || {})));\n}(this, (function (exports) { 'use strict';\n\nvar identity = function(x) {\n  return x;\n};\n\nvar transform = function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n};\n\nvar bbox = function(topology) {\n  var t = transform(topology.transform), key,\n      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n  function bboxPoint(p) {\n    p = t(p);\n    if (p[0] < x0) x0 = p[0];\n    if (p[0] > x1) x1 = p[0];\n    if (p[1] < y0) y0 = p[1];\n    if (p[1] > y1) y1 = p[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = -1, n = arc.length, p;\n    while (++i < n) {\n      p = t(arc[i], i);\n      if (p[0] < x0) x0 = p[0];\n      if (p[0] > x1) x1 = p[0];\n      if (p[1] < y0) y0 = p[1];\n      if (p[1] > y1) y1 = p[1];\n    }\n  });\n\n  for (key in topology.objects) {\n    bboxGeometry(topology.objects[key]);\n  }\n\n  return [x0, y0, x1, y1];\n};\n\nvar reverse = function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n};\n\nvar feature = function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature$1(topology, o); })}\n      : feature$1(topology, o);\n};\n\nfunction feature$1(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n\nvar stitch = function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n};\n\nvar mesh = function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n};\n\nfunction meshArcs(topology, object$$1, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object$$1, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object$$1, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object$$1);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nvar merge = function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n};\n\nfunction mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n\nvar bisect = function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n};\n\nvar neighbors = function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n};\n\nvar untransform = function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2,\n        n = input.length,\n        output = new Array(n),\n        x1 = Math.round((input[0] - dx) / kx),\n        y1 = Math.round((input[1] - dy) / ky);\n    output[0] = x1 - x0, x0 = x1;\n    output[1] = y1 - y0, y0 = y1;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n};\n\nvar quantize = function(topology, transform) {\n  if (topology.transform) throw new Error(\"already quantized\");\n\n  if (!transform || !transform.scale) {\n    if (!((n = Math.floor(transform)) >= 2)) throw new Error(\"n must be ≥2\");\n    box = topology.bbox || bbox(topology);\n    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;\n    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};\n  } else {\n    box = topology.bbox;\n  }\n\n  var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};\n\n  function quantizePoint(point) {\n    return t(point);\n  }\n\n  function quantizeGeometry(input) {\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n      case \"MultiPoint\": output = {type: \"MultiPoint\", coordinates: input.coordinates.map(quantizePoint)}; break;\n      default: return input;\n    }\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function quantizeArc(input) {\n    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic\n    output[0] = t(input[0], 0);\n    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points\n    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points\n    output.length = j;\n    return output;\n  }\n\n  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);\n\n  return {\n    type: \"Topology\",\n    bbox: box,\n    transform: transform,\n    objects: outputs,\n    arcs: topology.arcs.map(quantizeArc)\n  };\n};\n\nexports.bbox = bbox;\nexports.feature = feature;\nexports.mesh = mesh;\nexports.meshArcs = meshArcs;\nexports.merge = merge;\nexports.mergeArcs = mergeArcs;\nexports.neighbors = neighbors;\nexports.quantize = quantize;\nexports.transform = transform;\nexports.untransform = untransform;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/topojson/~/topojson-client/dist/topojson-client.js\n// module id = 48\n// module chunks = 0","// https://github.com/topojson/topojson-server Version 3.0.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.topojson = global.topojson || {})));\n}(this, (function (exports) { 'use strict';\n\n// Computes the bounding box of the specified hash of GeoJSON objects.\nvar bounds = function(objects) {\n  var x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  function boundGeometry(geometry) {\n    if (geometry != null && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);\n  }\n\n  var boundGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(boundGeometry); },\n    Point: function(o) { boundPoint(o.coordinates); },\n    MultiPoint: function(o) { o.coordinates.forEach(boundPoint); },\n    LineString: function(o) { boundLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs.forEach(boundLine); },\n    Polygon: function(o) { o.arcs.forEach(boundLine); },\n    MultiPolygon: function(o) { o.arcs.forEach(boundMultiLine); }\n  };\n\n  function boundPoint(coordinates) {\n    var x = coordinates[0],\n        y = coordinates[1];\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  function boundLine(coordinates) {\n    coordinates.forEach(boundPoint);\n  }\n\n  function boundMultiLine(coordinates) {\n    coordinates.forEach(boundLine);\n  }\n\n  for (var key in objects) {\n    boundGeometry(objects[key]);\n  }\n\n  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;\n};\n\nvar hashset = function(size, hash, equal, type, empty) {\n  if (arguments.length === 3) {\n    type = Array;\n    empty = null;\n  }\n\n  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    store[i] = empty;\n  }\n\n  function add(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) throw new Error(\"full hashset\");\n      match = store[index = (index + 1) & mask];\n    }\n    store[index] = value;\n    return true;\n  }\n\n  function has(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) break;\n      match = store[index = (index + 1) & mask];\n    }\n    return false;\n  }\n\n  function values() {\n    var values = [];\n    for (var i = 0, n = store.length; i < n; ++i) {\n      var match = store[i];\n      if (match != empty) values.push(match);\n    }\n    return values;\n  }\n\n  return {\n    add: add,\n    has: has,\n    values: values\n  };\n};\n\nvar hashmap = function(size, hash, equal, keyType, keyEmpty, valueType) {\n  if (arguments.length === 3) {\n    keyType = valueType = Array;\n    keyEmpty = null;\n  }\n\n  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      valstore = new valueType(size),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    keystore[i] = keyEmpty;\n  }\n\n  function set(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index] = value;\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function maybeSet(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function get(key, missingValue) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) break;\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    return missingValue;\n  }\n\n  function keys() {\n    var keys = [];\n    for (var i = 0, n = keystore.length; i < n; ++i) {\n      var matchKey = keystore[i];\n      if (matchKey != keyEmpty) keys.push(matchKey);\n    }\n    return keys;\n  }\n\n  return {\n    set: set,\n    maybeSet: maybeSet, // set if unset\n    get: get,\n    keys: keys\n  };\n};\n\nvar equalPoint = function(pointA, pointB) {\n  return pointA[0] === pointB[0] && pointA[1] === pointB[1];\n};\n\n// TODO if quantized, use simpler Int32 hashing?\n\nvar buffer = new ArrayBuffer(16);\nvar floats = new Float64Array(buffer);\nvar uints = new Uint32Array(buffer);\n\nvar hashPoint = function(point) {\n  floats[0] = point[0];\n  floats[1] = point[1];\n  var hash = uints[0] ^ uints[1];\n  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];\n  return hash & 0x7fffffff;\n};\n\n// Given an extracted (pre-)topology, identifies all of the junctions. These are\n// the points at which arcs (lines or rings) will need to be cut so that each\n// arc is represented uniquely.\n//\n// A junction is a point where at least one arc deviates from another arc going\n// through the same point. For example, consider the point B. If there is a arc\n// through ABC and another arc through CBA, then B is not a junction because in\n// both cases the adjacent point pairs are {A,C}. However, if there is an\n// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.\n//\n// For a closed ring ABCA, the first point A’s adjacent points are the second\n// and last point {B,C}. For a line, the first and last point are always\n// considered junctions, even if the line is closed; this ensures that a closed\n// line is never rotated.\nvar join = function(topology) {\n  var coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      indexes = index(),\n      visitedByIndex = new Int32Array(coordinates.length),\n      leftByIndex = new Int32Array(coordinates.length),\n      rightByIndex = new Int32Array(coordinates.length),\n      junctionByIndex = new Int8Array(coordinates.length),\n      junctionCount = 0, // upper bound on number of junctions\n      i, n,\n      previousIndex,\n      currentIndex,\n      nextIndex;\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;\n  }\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineStart = line[0],\n        lineEnd = line[1];\n    currentIndex = indexes[lineStart];\n    nextIndex = indexes[++lineStart];\n    ++junctionCount, junctionByIndex[currentIndex] = 1; // start\n    while (++lineStart <= lineEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);\n    }\n    ++junctionCount, junctionByIndex[nextIndex] = 1; // end\n  }\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = -1;\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0] + 1,\n        ringEnd = ring[1];\n    previousIndex = indexes[ringEnd - 1];\n    currentIndex = indexes[ringStart - 1];\n    nextIndex = indexes[ringStart];\n    sequence(i, previousIndex, currentIndex, nextIndex);\n    while (++ringStart <= ringEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);\n    }\n  }\n\n  function sequence(i, previousIndex, currentIndex, nextIndex) {\n    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection\n    visitedByIndex[currentIndex] = i;\n    var leftIndex = leftByIndex[currentIndex];\n    if (leftIndex >= 0) {\n      var rightIndex = rightByIndex[currentIndex];\n      if ((leftIndex !== previousIndex || rightIndex !== nextIndex)\n        && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {\n        ++junctionCount, junctionByIndex[currentIndex] = 1;\n      }\n    } else {\n      leftByIndex[currentIndex] = previousIndex;\n      rightByIndex[currentIndex] = nextIndex;\n    }\n  }\n\n  function index() {\n    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),\n        indexes = new Int32Array(coordinates.length);\n\n    for (var i = 0, n = coordinates.length; i < n; ++i) {\n      indexes[i] = indexByPoint.maybeSet(i, i);\n    }\n\n    return indexes;\n  }\n\n  function hashIndex(i) {\n    return hashPoint(coordinates[i]);\n  }\n\n  function equalIndex(i, j) {\n    return equalPoint(coordinates[i], coordinates[j]);\n  }\n\n  visitedByIndex = leftByIndex = rightByIndex = null;\n\n  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint), j;\n\n  // Convert back to a standard hashset by point for caller convenience.\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    if (junctionByIndex[j = indexes[i]]) {\n      junctionByPoint.add(coordinates[j]);\n    }\n  }\n\n  return junctionByPoint;\n};\n\n// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared\n// point sequences are identified. The topology can then be subsequently deduped\n// to remove exact duplicate arcs.\nvar cut = function(topology) {\n  var junctions = join(topology),\n      coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      next,\n      i, n;\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineMid = line[0],\n        lineEnd = line[1];\n    while (++lineMid < lineEnd) {\n      if (junctions.has(coordinates[lineMid])) {\n        next = {0: lineMid, 1: line[1]};\n        line[1] = lineMid;\n        line = line.next = next;\n      }\n    }\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0],\n        ringMid = ringStart,\n        ringEnd = ring[1],\n        ringFixed = junctions.has(coordinates[ringStart]);\n    while (++ringMid < ringEnd) {\n      if (junctions.has(coordinates[ringMid])) {\n        if (ringFixed) {\n          next = {0: ringMid, 1: ring[1]};\n          ring[1] = ringMid;\n          ring = ring.next = next;\n        } else { // For the first junction, we can rotate rather than cut.\n          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);\n          coordinates[ringEnd] = coordinates[ringStart];\n          ringFixed = true;\n          ringMid = ringStart; // restart; we may have skipped junctions\n        }\n      }\n    }\n  }\n\n  return topology;\n};\n\nfunction rotateArray(array, start, end, offset) {\n  reverse(array, start, end);\n  reverse(array, start, start + offset);\n  reverse(array, start + offset, end);\n}\n\nfunction reverse(array, start, end) {\n  for (var mid = start + ((end-- - start) >> 1), t; start < mid; ++start, --end) {\n    t = array[start], array[start] = array[end], array[end] = t;\n  }\n}\n\n// Given a cut topology, combines duplicate arcs.\nvar dedup = function(topology) {\n  var coordinates = topology.coordinates,\n      lines = topology.lines, line,\n      rings = topology.rings, ring,\n      arcCount = lines.length + rings.length,\n      i, n;\n\n  delete topology.lines;\n  delete topology.rings;\n\n  // Count the number of (non-unique) arcs to initialize the hashmap safely.\n  for (i = 0, n = lines.length; i < n; ++i) {\n    line = lines[i]; while (line = line.next) ++arcCount;\n  }\n  for (i = 0, n = rings.length; i < n; ++i) {\n    ring = rings[i]; while (ring = ring.next) ++arcCount;\n  }\n\n  var arcsByEnd = hashmap(arcCount * 2 * 1.4, hashPoint, equalPoint),\n      arcs = topology.arcs = [];\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    line = lines[i];\n    do {\n      dedupLine(line);\n    } while (line = line.next);\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    ring = rings[i];\n    if (ring.next) { // arc is no longer closed\n      do {\n        dedupLine(ring);\n      } while (ring = ring.next);\n    } else {\n      dedupRing(ring);\n    }\n  }\n\n  function dedupLine(arc) {\n    var startPoint,\n        endPoint,\n        startArcs, startArc,\n        endArcs, endArc,\n        i, n;\n\n    // Does this arc match an existing arc in order?\n    if (startArcs = arcsByEnd.get(startPoint = coordinates[arc[0]])) {\n      for (i = 0, n = startArcs.length; i < n; ++i) {\n        startArc = startArcs[i];\n        if (equalLine(startArc, arc)) {\n          arc[0] = startArc[0];\n          arc[1] = startArc[1];\n          return;\n        }\n      }\n    }\n\n    // Does this arc match an existing arc in reverse order?\n    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[1]])) {\n      for (i = 0, n = endArcs.length; i < n; ++i) {\n        endArc = endArcs[i];\n        if (reverseEqualLine(endArc, arc)) {\n          arc[1] = endArc[0];\n          arc[0] = endArc[1];\n          return;\n        }\n      }\n    }\n\n    if (startArcs) startArcs.push(arc); else arcsByEnd.set(startPoint, [arc]);\n    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);\n    arcs.push(arc);\n  }\n\n  function dedupRing(arc) {\n    var endPoint,\n        endArcs,\n        endArc,\n        i, n;\n\n    // Does this arc match an existing line in order, or reverse order?\n    // Rings are closed, so their start point and end point is the same.\n    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0]])) {\n      for (i = 0, n = endArcs.length; i < n; ++i) {\n        endArc = endArcs[i];\n        if (equalRing(endArc, arc)) {\n          arc[0] = endArc[0];\n          arc[1] = endArc[1];\n          return;\n        }\n        if (reverseEqualRing(endArc, arc)) {\n          arc[0] = endArc[1];\n          arc[1] = endArc[0];\n          return;\n        }\n      }\n    }\n\n    // Otherwise, does this arc match an existing ring in order, or reverse order?\n    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0] + findMinimumOffset(arc)])) {\n      for (i = 0, n = endArcs.length; i < n; ++i) {\n        endArc = endArcs[i];\n        if (equalRing(endArc, arc)) {\n          arc[0] = endArc[0];\n          arc[1] = endArc[1];\n          return;\n        }\n        if (reverseEqualRing(endArc, arc)) {\n          arc[0] = endArc[1];\n          arc[1] = endArc[0];\n          return;\n        }\n      }\n    }\n\n    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);\n    arcs.push(arc);\n  }\n\n  function equalLine(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1];\n    if (ia - ja !== ib - jb) return false;\n    for (; ia <= ja; ++ia, ++ib) if (!equalPoint(coordinates[ia], coordinates[ib])) return false;\n    return true;\n  }\n\n  function reverseEqualLine(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1];\n    if (ia - ja !== ib - jb) return false;\n    for (; ia <= ja; ++ia, --jb) if (!equalPoint(coordinates[ia], coordinates[jb])) return false;\n    return true;\n  }\n\n  function equalRing(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1],\n        n = ja - ia;\n    if (n !== jb - ib) return false;\n    var ka = findMinimumOffset(arcA),\n        kb = findMinimumOffset(arcB);\n    for (var i = 0; i < n; ++i) {\n      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[ib + (i + kb) % n])) return false;\n    }\n    return true;\n  }\n\n  function reverseEqualRing(arcA, arcB) {\n    var ia = arcA[0], ib = arcB[0],\n        ja = arcA[1], jb = arcB[1],\n        n = ja - ia;\n    if (n !== jb - ib) return false;\n    var ka = findMinimumOffset(arcA),\n        kb = n - findMinimumOffset(arcB);\n    for (var i = 0; i < n; ++i) {\n      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[jb - (i + kb) % n])) return false;\n    }\n    return true;\n  }\n\n  // Rings are rotated to a consistent, but arbitrary, start point.\n  // This is necessary to detect when a ring and a rotated copy are dupes.\n  function findMinimumOffset(arc) {\n    var start = arc[0],\n        end = arc[1],\n        mid = start,\n        minimum = mid,\n        minimumPoint = coordinates[mid];\n    while (++mid < end) {\n      var point = coordinates[mid];\n      if (point[0] < minimumPoint[0] || point[0] === minimumPoint[0] && point[1] < minimumPoint[1]) {\n        minimum = mid;\n        minimumPoint = point;\n      }\n    }\n    return minimum - start;\n  }\n\n  return topology;\n};\n\n// Given an array of arcs in absolute (but already quantized!) coordinates,\n// converts to fixed-point delta encoding.\n// This is a destructive operation that modifies the given arcs!\nvar delta = function(arcs) {\n  var i = -1,\n      n = arcs.length;\n\n  while (++i < n) {\n    var arc = arcs[i],\n        j = 0,\n        k = 1,\n        m = arc.length,\n        point = arc[0],\n        x0 = point[0],\n        y0 = point[1],\n        x1,\n        y1;\n\n    while (++j < m) {\n      point = arc[j], x1 = point[0], y1 = point[1];\n      if (x1 !== x0 || y1 !== y0) arc[k++] = [x1 - x0, y1 - y0], x0 = x1, y0 = y1;\n    }\n\n    if (k === 1) arc[k++] = [0, 0]; // Each arc must be an array of two or more positions.\n\n    arc.length = k;\n  }\n\n  return arcs;\n};\n\n// Extracts the lines and rings from the specified hash of geometry objects.\n//\n// Returns an object with three properties:\n//\n// * coordinates - shared buffer of [x, y] coordinates\n// * lines - lines extracted from the hash, of the form [start, end]\n// * rings - rings extracted from the hash, of the form [start, end]\n//\n// For each ring or line, start and end represent inclusive indexes into the\n// coordinates buffer. For rings (and closed lines), coordinates[start] equals\n// coordinates[end].\n//\n// For each line or polygon geometry in the input hash, including nested\n// geometries as in geometry collections, the `coordinates` array is replaced\n// with an equivalent `arcs` array that, for each line (for line string\n// geometries) or ring (for polygon geometries), points to one of the above\n// lines or rings.\nvar extract = function(objects) {\n  var index = -1,\n      lines = [],\n      rings = [],\n      coordinates = [];\n\n  function extractGeometry(geometry) {\n    if (geometry && extractGeometryType.hasOwnProperty(geometry.type)) extractGeometryType[geometry.type](geometry);\n  }\n\n  var extractGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(extractGeometry); },\n    LineString: function(o) { o.arcs = extractLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs = o.arcs.map(extractLine); },\n    Polygon: function(o) { o.arcs = o.arcs.map(extractRing); },\n    MultiPolygon: function(o) { o.arcs = o.arcs.map(extractMultiRing); }\n  };\n\n  function extractLine(line) {\n    for (var i = 0, n = line.length; i < n; ++i) coordinates[++index] = line[i];\n    var arc = {0: index - n + 1, 1: index};\n    lines.push(arc);\n    return arc;\n  }\n\n  function extractRing(ring) {\n    for (var i = 0, n = ring.length; i < n; ++i) coordinates[++index] = ring[i];\n    var arc = {0: index - n + 1, 1: index};\n    rings.push(arc);\n    return arc;\n  }\n\n  function extractMultiRing(rings) {\n    return rings.map(extractRing);\n  }\n\n  for (var key in objects) {\n    extractGeometry(objects[key]);\n  }\n\n  return {\n    type: \"Topology\",\n    coordinates: coordinates,\n    lines: lines,\n    rings: rings,\n    objects: objects\n  };\n};\n\n// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.\n// Any null input geometry objects are represented as {type: null} in the output.\n// Any feature.{id,properties,bbox} are transferred to the output geometry object.\n// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!\nvar geometry = function(inputs) {\n  var outputs = {}, key;\n  for (key in inputs) outputs[key] = geomifyObject(inputs[key]);\n  return outputs;\n};\n\nfunction geomifyObject(input) {\n  return input == null ? {type: null}\n      : (input.type === \"FeatureCollection\" ? geomifyFeatureCollection\n      : input.type === \"Feature\" ? geomifyFeature\n      : geomifyGeometry)(input);\n}\n\nfunction geomifyFeatureCollection(input) {\n  var output = {type: \"GeometryCollection\", geometries: input.features.map(geomifyFeature)};\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nfunction geomifyFeature(input) {\n  var output = geomifyGeometry(input.geometry), key; // eslint-disable-line no-unused-vars\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  for (key in input.properties) { output.properties = input.properties; break; }\n  return output;\n}\n\nfunction geomifyGeometry(input) {\n  if (input == null) return {type: null};\n  var output = input.type === \"GeometryCollection\" ? {type: \"GeometryCollection\", geometries: input.geometries.map(geomifyGeometry)}\n      : input.type === \"Point\" || input.type === \"MultiPoint\" ? {type: input.type, coordinates: input.coordinates}\n      : {type: input.type, arcs: input.coordinates}; // TODO Check for unknown types?\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nvar prequantize = function(objects, bbox, n) {\n  var x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3],\n      kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,\n      ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;\n\n  function quantizePoint(input) {\n    return [Math.round((input[0] - x0) * kx), Math.round((input[1] - y0) * ky)];\n  }\n\n  function quantizePoints(input, m) {\n    var i = -1,\n        j = 0,\n        n = input.length,\n        output = new Array(n), // pessimistic\n        pi,\n        px,\n        py,\n        x,\n        y;\n\n    while (++i < n) {\n      pi = input[i];\n      x = Math.round((pi[0] - x0) * kx);\n      y = Math.round((pi[1] - y0) * ky);\n      if (x !== px || y !== py) output[j++] = [px = x, py = y]; // non-coincident points\n    }\n\n    output.length = j;\n    while (j < m) j = output.push([output[0][0], output[0][1]]);\n    return output;\n  }\n\n  function quantizeLine(input) {\n    return quantizePoints(input, 2);\n  }\n\n  function quantizeRing(input) {\n    return quantizePoints(input, 4);\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizeRing);\n  }\n\n  function quantizeGeometry(o) {\n    if (o != null && quantizeGeometryType.hasOwnProperty(o.type)) quantizeGeometryType[o.type](o);\n  }\n\n  var quantizeGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(quantizeGeometry); },\n    Point: function(o) { o.coordinates = quantizePoint(o.coordinates); },\n    MultiPoint: function(o) { o.coordinates = o.coordinates.map(quantizePoint); },\n    LineString: function(o) { o.arcs = quantizeLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs = o.arcs.map(quantizeLine); },\n    Polygon: function(o) { o.arcs = quantizePolygon(o.arcs); },\n    MultiPolygon: function(o) { o.arcs = o.arcs.map(quantizePolygon); }\n  };\n\n  for (var key in objects) {\n    quantizeGeometry(objects[key]);\n  }\n\n  return {\n    scale: [1 / kx, 1 / ky],\n    translate: [x0, y0]\n  };\n};\n\n// Constructs the TopoJSON Topology for the specified hash of features.\n// Each object in the specified hash must be a GeoJSON object,\n// meaning FeatureCollection, a Feature or a geometry object.\nvar topology = function(objects, quantization) {\n  var bbox = bounds(objects = geometry(objects)),\n      transform = quantization > 0 && bbox && prequantize(objects, bbox, quantization),\n      topology = dedup(cut(extract(objects))),\n      coordinates = topology.coordinates,\n      indexByArc = hashmap(topology.arcs.length * 1.4, hashArc, equalArc);\n\n  objects = topology.objects; // for garbage collection\n  topology.bbox = bbox;\n  topology.arcs = topology.arcs.map(function(arc, i) {\n    indexByArc.set(arc, i);\n    return coordinates.slice(arc[0], arc[1] + 1);\n  });\n\n  delete topology.coordinates;\n  coordinates = null;\n\n  function indexGeometry(geometry$$1) {\n    if (geometry$$1 && indexGeometryType.hasOwnProperty(geometry$$1.type)) indexGeometryType[geometry$$1.type](geometry$$1);\n  }\n\n  var indexGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(indexGeometry); },\n    LineString: function(o) { o.arcs = indexArcs(o.arcs); },\n    MultiLineString: function(o) { o.arcs = o.arcs.map(indexArcs); },\n    Polygon: function(o) { o.arcs = o.arcs.map(indexArcs); },\n    MultiPolygon: function(o) { o.arcs = o.arcs.map(indexMultiArcs); }\n  };\n\n  function indexArcs(arc) {\n    var indexes = [];\n    do {\n      var index = indexByArc.get(arc);\n      indexes.push(arc[0] < arc[1] ? index : ~index);\n    } while (arc = arc.next);\n    return indexes;\n  }\n\n  function indexMultiArcs(arcs) {\n    return arcs.map(indexArcs);\n  }\n\n  for (var key in objects) {\n    indexGeometry(objects[key]);\n  }\n\n  if (transform) {\n    topology.transform = transform;\n    topology.arcs = delta(topology.arcs);\n  }\n\n  return topology;\n};\n\nfunction hashArc(arc) {\n  var i = arc[0], j = arc[1], t;\n  if (j < i) t = i, i = j, j = t;\n  return i + 31 * j;\n}\n\nfunction equalArc(arcA, arcB) {\n  var ia = arcA[0], ja = arcA[1],\n      ib = arcB[0], jb = arcB[1], t;\n  if (ja < ia) t = ia, ia = ja, ja = t;\n  if (jb < ib) t = ib, ib = jb, jb = t;\n  return ia === ib && ja === jb;\n}\n\nexports.topology = topology;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/topojson/~/topojson-server/dist/topojson-server.js\n// module id = 49\n// module chunks = 0","// https://github.com/topojson/topojson-simplify Version 3.0.2. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('topojson-client')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'topojson-client'], factory) :\n\t(factory((global.topojson = global.topojson || {}),global.topojson));\n}(this, (function (exports,topojsonClient) { 'use strict';\n\nvar prune = function(topology) {\n  var oldObjects = topology.objects,\n      newObjects = {},\n      oldArcs = topology.arcs,\n      oldArcsLength = oldArcs.length,\n      oldIndex = -1,\n      newIndexByOldIndex = new Array(oldArcsLength),\n      newArcsLength = 0,\n      newArcs,\n      newIndex = -1,\n      key;\n\n  function scanGeometry(input) {\n    switch (input.type) {\n      case \"GeometryCollection\": input.geometries.forEach(scanGeometry); break;\n      case \"LineString\": scanArcs(input.arcs); break;\n      case \"MultiLineString\": input.arcs.forEach(scanArcs); break;\n      case \"Polygon\": input.arcs.forEach(scanArcs); break;\n      case \"MultiPolygon\": input.arcs.forEach(scanMultiArcs); break;\n    }\n  }\n\n  function scanArc(index) {\n    if (index < 0) index = ~index;\n    if (!newIndexByOldIndex[index]) newIndexByOldIndex[index] = 1, ++newArcsLength;\n  }\n\n  function scanArcs(arcs) {\n    arcs.forEach(scanArc);\n  }\n\n  function scanMultiArcs(arcs) {\n    arcs.forEach(scanArcs);\n  }\n\n  function reindexGeometry(input) {\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(reindexGeometry)}; break;\n      case \"LineString\": output = {type: \"LineString\", arcs: reindexArcs(input.arcs)}; break;\n      case \"MultiLineString\": output = {type: \"MultiLineString\", arcs: input.arcs.map(reindexArcs)}; break;\n      case \"Polygon\": output = {type: \"Polygon\", arcs: input.arcs.map(reindexArcs)}; break;\n      case \"MultiPolygon\": output = {type: \"MultiPolygon\", arcs: input.arcs.map(reindexMultiArcs)}; break;\n      default: return input;\n    }\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function reindexArc(oldIndex) {\n    return oldIndex < 0 ? ~newIndexByOldIndex[~oldIndex] : newIndexByOldIndex[oldIndex];\n  }\n\n  function reindexArcs(arcs) {\n    return arcs.map(reindexArc);\n  }\n\n  function reindexMultiArcs(arcs) {\n    return arcs.map(reindexArcs);\n  }\n\n  for (key in oldObjects) {\n    scanGeometry(oldObjects[key]);\n  }\n\n  newArcs = new Array(newArcsLength);\n\n  while (++oldIndex < oldArcsLength) {\n    if (newIndexByOldIndex[oldIndex]) {\n      newIndexByOldIndex[oldIndex] = ++newIndex;\n      newArcs[newIndex] = oldArcs[oldIndex];\n    }\n  }\n\n  for (key in oldObjects) {\n    newObjects[key] = reindexGeometry(oldObjects[key]);\n  }\n\n  return {\n    type: \"Topology\",\n    bbox: topology.bbox,\n    transform: topology.transform,\n    objects: newObjects,\n    arcs: newArcs\n  };\n};\n\nvar filter = function(topology, filter) {\n  var oldObjects = topology.objects,\n      newObjects = {},\n      key;\n\n  if (filter == null) filter = filterTrue;\n\n  function filterGeometry(input) {\n    var output, arcs;\n    switch (input.type) {\n      case \"Polygon\": {\n        arcs = filterRings(input.arcs);\n        output = arcs ? {type: \"Polygon\", arcs: arcs} : {type: null};\n        break;\n      }\n      case \"MultiPolygon\": {\n        arcs = input.arcs.map(filterRings).filter(filterIdentity);\n        output = arcs.length ? {type: \"MultiPolygon\", arcs: arcs} : {type: null};\n        break;\n      }\n      case \"GeometryCollection\": {\n        arcs = input.geometries.map(filterGeometry).filter(filterNotNull);\n        output = arcs.length ? {type: \"GeometryCollection\", geometries: arcs} : {type: null};\n        break;\n      }\n      default: return input;\n    }\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function filterRings(arcs) {\n    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes\n        ? [arcs[0]].concat(arcs.slice(1).filter(filterInteriorRing))\n        : null;\n  }\n\n  function filterExteriorRing(ring) {\n    return filter(ring, false);\n  }\n\n  function filterInteriorRing(ring) {\n    return filter(ring, true);\n  }\n\n  for (key in oldObjects) {\n    newObjects[key] = filterGeometry(oldObjects[key]);\n  }\n\n  return prune({\n    type: \"Topology\",\n    bbox: topology.bbox,\n    transform: topology.transform,\n    objects: newObjects,\n    arcs: topology.arcs\n  });\n};\n\nfunction filterTrue() {\n  return true;\n}\n\nfunction filterIdentity(x) {\n  return x;\n}\n\nfunction filterNotNull(geometry) {\n  return geometry.type != null;\n}\n\nvar filterAttached = function(topology) {\n  var ownerByArc = new Array(topology.arcs.length), // arc index -> index of unique associated ring, or -1 if used by multiple rings\n      ownerIndex = 0,\n      key;\n\n  function testGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(testGeometry); break;\n      case \"Polygon\": testArcs(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(testArcs); break;\n    }\n  }\n\n  function testArcs(arcs) {\n    for (var i = 0, n = arcs.length; i < n; ++i, ++ownerIndex) {\n      for (var ring = arcs[i], j = 0, m = ring.length; j < m; ++j) {\n        var arc = ring[j];\n        if (arc < 0) arc = ~arc;\n        var owner = ownerByArc[arc];\n        if (owner == null) ownerByArc[arc] = ownerIndex;\n        else if (owner !== ownerIndex) ownerByArc[arc] = -1;\n      }\n    }\n  }\n\n  for (key in topology.objects) {\n    testGeometry(topology.objects[key]);\n  }\n\n  return function(ring) {\n    for (var j = 0, m = ring.length, arc; j < m; ++j) {\n      if (ownerByArc[(arc = ring[j]) < 0 ? ~arc : arc] === -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n};\n\nfunction planarTriangleArea(triangle) {\n  var a = triangle[0], b = triangle[1], c = triangle[2];\n  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1])) / 2;\n}\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area) / 2;\n}\n\nvar filterWeight = function(topology, minWeight, weight) {\n  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;\n\n  if (weight == null) weight = planarRingArea;\n\n  return function(ring, interior) {\n    return weight(topojsonClient.feature(topology, {type: \"Polygon\", arcs: [ring]}).geometry.coordinates[0], interior) >= minWeight;\n  };\n};\n\nvar filterAttachedWeight = function(topology, minWeight, weight) {\n  var a = filterAttached(topology),\n      w = filterWeight(topology, minWeight, weight);\n  return function(ring, interior) {\n    return a(ring, interior) || w(ring, interior);\n  };\n};\n\nfunction compare(a, b) {\n  return a[1][2] - b[1][2];\n}\n\nvar newHeap = function() {\n  var heap = {},\n      array = [],\n      size = 0;\n\n  heap.push = function(object) {\n    up(array[object._ = size] = object, size++);\n    return size;\n  };\n\n  heap.pop = function() {\n    if (size <= 0) return;\n    var removed = array[0], object;\n    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);\n    return removed;\n  };\n\n  heap.remove = function(removed) {\n    var i = removed._, object;\n    if (array[i] !== removed) return; // invalid request\n    if (i !== --size) object = array[size], (compare(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);\n    return i;\n  };\n\n  function up(object, i) {\n    while (i > 0) {\n      var j = ((i + 1) >> 1) - 1,\n          parent = array[j];\n      if (compare(object, parent) >= 0) break;\n      array[parent._ = i] = parent;\n      array[object._ = i = j] = object;\n    }\n  }\n\n  function down(object, i) {\n    while (true) {\n      var r = (i + 1) << 1,\n          l = r - 1,\n          j = i,\n          child = array[j];\n      if (l < size && compare(array[l], child) < 0) child = array[j = l];\n      if (r < size && compare(array[r], child) < 0) child = array[j = r];\n      if (j === i) break;\n      array[child._ = i] = child;\n      array[object._ = i = j] = object;\n    }\n  }\n\n  return heap;\n};\n\nfunction copy(point) {\n  return [point[0], point[1], 0];\n}\n\nvar presimplify = function(topology, weight) {\n  var point = topology.transform ? topojsonClient.transform(topology.transform) : copy,\n      heap = newHeap();\n\n  if (weight == null) weight = planarTriangleArea;\n\n  var arcs = topology.arcs.map(function(arc) {\n    var triangles = [],\n        maxWeight = 0,\n        triangle,\n        i,\n        n;\n\n    arc = arc.map(point);\n\n    for (i = 1, n = arc.length - 1; i < n; ++i) {\n      triangle = [arc[i - 1], arc[i], arc[i + 1]];\n      triangle[1][2] = weight(triangle);\n      triangles.push(triangle);\n      heap.push(triangle);\n    }\n\n    // Always keep the arc endpoints!\n    arc[0][2] = arc[n][2] = Infinity;\n\n    for (i = 0, n = triangles.length; i < n; ++i) {\n      triangle = triangles[i];\n      triangle.previous = triangles[i - 1];\n      triangle.next = triangles[i + 1];\n    }\n\n    while (triangle = heap.pop()) {\n      var previous = triangle.previous,\n          next = triangle.next;\n\n      // If the weight of the current point is less than that of the previous\n      // point to be eliminated, use the latter’s weight instead. This ensures\n      // that the current point cannot be eliminated without eliminating\n      // previously- eliminated points.\n      if (triangle[1][2] < maxWeight) triangle[1][2] = maxWeight;\n      else maxWeight = triangle[1][2];\n\n      if (previous) {\n        previous.next = next;\n        previous[2] = triangle[2];\n        update(previous);\n      }\n\n      if (next) {\n        next.previous = previous;\n        next[0] = triangle[0];\n        update(next);\n      }\n    }\n\n    return arc;\n  });\n\n  function update(triangle) {\n    heap.remove(triangle);\n    triangle[1][2] = weight(triangle);\n    heap.push(triangle);\n  }\n\n  return {\n    type: \"Topology\",\n    bbox: topology.bbox,\n    objects: topology.objects,\n    arcs: arcs\n  };\n};\n\nvar quantile = function(topology, p) {\n  var array = [];\n\n  topology.arcs.forEach(function(arc) {\n    arc.forEach(function(point) {\n      if (isFinite(point[2])) { // Ignore endpoints, whose weight is Infinity.\n        array.push(point[2]);\n      }\n    });\n  });\n\n  return array.length && quantile$1(array.sort(descending), p);\n};\n\nfunction quantile$1(array, p) {\n  if (!(n = array.length)) return;\n  if ((p = +p) <= 0 || n < 2) return array[0];\n  if (p >= 1) return array[n - 1];\n  var n,\n      h = (n - 1) * p,\n      i = Math.floor(h),\n      a = array[i],\n      b = array[i + 1];\n  return a + (b - a) * (h - i);\n}\n\nfunction descending(a, b) {\n  return b - a;\n}\n\nvar simplify = function(topology, minWeight) {\n  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;\n\n  // Remove points whose weight is less than the minimum weight.\n  var arcs = topology.arcs.map(function(input) {\n    var i = -1,\n        j = 0,\n        n = input.length,\n        output = new Array(n), // pessimistic\n        point;\n\n    while (++i < n) {\n      if ((point = input[i])[2] >= minWeight) {\n        output[j++] = [point[0], point[1]];\n      }\n    }\n\n    output.length = j;\n    return output;\n  });\n\n  return {\n    type: \"Topology\",\n    transform: topology.transform,\n    bbox: topology.bbox,\n    objects: topology.objects,\n    arcs: arcs\n  };\n};\n\nvar pi = Math.PI;\nvar tau = 2 * pi;\nvar quarterPi = pi / 4;\nvar radians = pi / 180;\nvar abs = Math.abs;\nvar atan2 = Math.atan2;\nvar cos = Math.cos;\nvar sin = Math.sin;\n\nfunction halfArea(ring, closed) {\n  var i = 0,\n      n = ring.length,\n      sum = 0,\n      point = ring[closed ? i++ : n - 1],\n      lambda0, lambda1 = point[0] * radians,\n      phi1 = (point[1] * radians) / 2 + quarterPi,\n      cosPhi0, cosPhi1 = cos(phi1),\n      sinPhi0, sinPhi1 = sin(phi1);\n\n  for (; i < n; ++i) {\n    point = ring[i];\n    lambda0 = lambda1, lambda1 = point[0] * radians;\n    phi1 = (point[1] * radians) / 2 + quarterPi;\n    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);\n    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1);\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea\n    var dLambda = lambda1 - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        k = sinPhi0 * sinPhi1,\n        u = cosPhi0 * cosPhi1 + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    sum += atan2(v, u);\n  }\n\n  return sum;\n}\n\nfunction sphericalRingArea(ring, interior) {\n  var sum = halfArea(ring, true);\n  if (interior) sum *= -1;\n  return (sum < 0 ? tau + sum : sum) * 2;\n}\n\nfunction sphericalTriangleArea(t) {\n  return abs(halfArea(t, false)) * 2;\n}\n\nexports.filter = filter;\nexports.filterAttached = filterAttached;\nexports.filterAttachedWeight = filterAttachedWeight;\nexports.filterWeight = filterWeight;\nexports.planarRingArea = planarRingArea;\nexports.planarTriangleArea = planarTriangleArea;\nexports.presimplify = presimplify;\nexports.quantile = quantile;\nexports.simplify = simplify;\nexports.sphericalRingArea = sphericalRingArea;\nexports.sphericalTriangleArea = sphericalTriangleArea;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/topojson/~/topojson-simplify/dist/topojson-simplify.js\n// module id = 50\n// module chunks = 0","var d3 = require(\"d3\"),\n  _ = require(\"underscore\");\n\nfunction hivtrace_histogram(graph, histogram_tag, histogram_label) {\n  var defaultFloatFormat = d3.format(\",.2f\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  hivtrace_render_histogram(\n    graph[\"Degrees\"][\"Distribution\"],\n    graph[\"Degrees\"][\"fitted\"],\n    histogram_w,\n    histogram_h,\n    histogram_tag\n  );\n\n  var label =\n    \"Network degree distribution is best described by the <strong>\" +\n    graph[\"Degrees\"][\"Model\"] +\n    \"</strong> model, with &rho; of \" +\n    defaultFloatFormat(graph[\"Degrees\"][\"rho\"]);\n\n  if (graph[\"Degrees\"][\"rho CI\"] != undefined) {\n    label +=\n      \" (95% CI \" +\n      defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][0]) +\n      \" - \" +\n      defaultFloatFormat(graph[\"Degrees\"][\"rho CI\"][1]) +\n      \")\";\n  }\n\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_histogram_distances(graph, histogram_tag, histogram_label) {\n  var defaultFloatFormat = d3.format(\",.3p\");\n  var histogram_w = 300,\n    histogram_h = 300;\n\n  var edge_lengths = _.map(graph[\"Edges\"], function(edge) {\n    return edge.length;\n  });\n\n  hivtrace_render_histogram_continuous(\n    edge_lengths,\n    histogram_w,\n    histogram_h,\n    histogram_tag\n  );\n\n  var label = \"Genetic distances among linked nodes.\";\n  d3.select(histogram_label).html(label);\n}\n\nfunction hivtrace_render_histogram_continuous(data, w, h, id) {\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 10\n    },\n    width = w - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  if (data.length > 0) {\n    var histogram_data = d3.layout.histogram()(data);\n\n    var x = d3.scale.linear().domain(d3.extent(data));\n\n    var y = d3.scale\n      .linear()\n      .domain([\n        0,\n        d3.max(\n          _.map(histogram_data, function(b) {\n            return b.y;\n          })\n        )\n      ])\n      .range([height, 0]);\n\n    margin.left += 10 * Math.ceil(Math.log10(y.domain()[1]));\n    width -= margin.left;\n    x.range([0, width]);\n\n    var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n\n    var yAxis = d3.svg.axis().scale(y).orient(\"left\");\n\n    histogram_data.splice(0, 0, {\n      x: x.domain()[0],\n      y: 0,\n      dx: 0\n    });\n    histogram_data.splice(histogram_data.length, 0, {\n      x: x.domain()[1],\n      y: 0,\n      dx: 0\n    });\n\n    histogram_svg = d3\n      .select(id)\n      .insert(\"svg\", \".histogram-label\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n      .datum(histogram_data);\n\n    var histogram_line = d3.svg\n      .line()\n      .x(function(d) {\n        return x(d.x + d.dx);\n      })\n      .y(function(d) {\n        return y(d.y);\n      })\n      .interpolate(\"step-before\");\n\n    histogram_svg.selectAll(\"path\").remove();\n    histogram_svg\n      .append(\"path\")\n      .attr(\"d\", function(d) {\n        return histogram_line(d) + \"Z\";\n      })\n      .attr(\"class\", \"histogram\");\n\n    var x_axis = histogram_svg\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n    x_axis\n      .selectAll(\"text\")\n      .attr(\"transform\", \"rotate(45)\")\n      .attr(\"dx\", \"1em\")\n      .attr(\"dy\", \"0.5em\");\n\n    var y_axis = histogram_svg\n      .append(\"g\")\n      .attr(\"class\", \"y axis\")\n      //.attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(yAxis);\n  }\n}\n\nfunction hivtrace_render_histogram(counts, fit, w, h, id) {\n  var margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 30\n    },\n    width = w - margin.left - margin.right,\n    height = h - margin.top - margin.bottom;\n\n  var x = d3.scale.linear().domain([0, counts.length + 1]).range([0, width]);\n\n  var y = d3.scale.log().domain([1, d3.max(counts)]).range([height, 0]);\n\n  var total = d3.sum(counts);\n\n  var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n\n  var histogram_svg = d3.select(id).selectAll(\"svg\");\n\n  if (histogram_svg) {\n    histogram_svg.remove();\n  }\n\n  var data_to_plot = counts.map(function(d, i) {\n    return {\n      x: i + 1,\n      y: d + 1\n    };\n  });\n  data_to_plot.push({\n    x: counts.length + 1,\n    y: 1\n  });\n  data_to_plot.push({\n    x: 0,\n    y: 1\n  });\n  data_to_plot.push({\n    x: 0,\n    y: counts[0] + 1\n  });\n\n  histogram_svg = d3\n    .select(id)\n    .insert(\"svg\", \".histogram-label\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    .datum(data_to_plot);\n\n  var histogram_line = d3.svg\n    .line()\n    .x(function(d) {\n      return x(d.x);\n    })\n    .y(function(d) {\n      return y(d.y);\n    })\n    .interpolate(\"step-before\");\n\n  histogram_svg.selectAll(\"path\").remove();\n  histogram_svg\n    .append(\"path\")\n    .attr(\"d\", function(d) {\n      return histogram_line(d) + \"Z\";\n    })\n    .attr(\"class\", \"histogram\");\n\n  if (fit) {\n    var fit_line = d3.svg\n      .line()\n      .interpolate(\"linear\")\n      .x(function(d, i) {\n        return x(i + 1) + (x(i + 1) - x(i)) / 2;\n      })\n      .y(function(d) {\n        return y(1 + d * total);\n      });\n    histogram_svg\n      .append(\"path\")\n      .datum(fit)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", function(d) {\n        return fit_line(d);\n      });\n  }\n\n  var x_axis = histogram_svg\n    .append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n\n  x_axis\n    .selectAll(\"text\")\n    .attr(\"transform\", \"rotate(45)\")\n    .attr(\"dx\", \"1em\")\n    .attr(\"dy\", \"0.5em\");\n}\n\nexports.histogram = hivtrace_histogram;\nexports.histogramDistances = hivtrace_histogram_distances;\n\n\n\n// WEBPACK FOOTER //\n// ./src/histogram.js"],"sourceRoot":""}